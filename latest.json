{
    "RPA.Archive": {
        "name": "RPA.Archive",
        "doc": "<div class=\"document\">\n<p><cite>Archive</cite> is a library for operating with ZIP and TAR packages.</p>\n<p><strong>Examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Archive</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating a ZIP archive</span><span class=\"p\">\n   </span><span class=\"nf\">Archive Folder With ZIP</span><span class=\"p\">   ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">tasks</span><span class=\"p\">  </span><span class=\"s\">tasks.zip</span><span class=\"p\">   </span><span class=\"s\">recursive=True</span><span class=\"p\">  </span><span class=\"s\">include=*.robot</span><span class=\"p\">  </span><span class=\"s\">exclude=/.*</span><span class=\"p\">\n   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}                  </span><span class=\"nf\">List Archive</span><span class=\"p\">             </span><span class=\"s\">tasks.zip</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  ${</span><span class=\"nv\">files</span><span class=\"p\">}\n      </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n   </span><span class=\"nf\">END</span><span class=\"p\">\n   </span><span class=\"nf\">Add To Archive</span><span class=\"p\">            </span><span class=\"s\">.</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">..</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">missing.robot</span><span class=\"p\">  </span><span class=\"s\">tasks.zip</span><span class=\"p\">\n   &amp;{</span><span class=\"nv\">info</span><span class=\"p\">}                   </span><span class=\"nf\">Get Archive Info</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Archive</span> <span class=\"kn\">import</span> <span class=\"n\">Archive</span>\n\n<span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Archive</span><span class=\"p\">()</span>\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">archive_folder_with_tar</span><span class=\"p\">(</span><span class=\"s1\">'./tasks'</span><span class=\"p\">,</span> <span class=\"s1\">'tasks.tar'</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">list_archive</span><span class=\"p\">(</span><span class=\"s1\">'tasks.tar'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:05:58",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
        "lineno": 45,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Add To Archive",
                "args": [
                    {
                        "name": "files",
                        "types": [
                            "List",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "files: List | str"
                    },
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    },
                    {
                        "name": "folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add file(s) to the archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">name of the file, or list of files, to add</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder for added file,\nrelative path in the archive</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword adds file or list of files into existing archive. Files\ncan be added to archive structure with relative path using argument <cite>folder</cite>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">extrafile.txt</span><span class=\"p\">  </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">stat.png</span><span class=\"p\">       </span><span class=\"c\">archive.tar.gz</span><span class=\"p\">  </span><span class=\"c\">images</span><span class=\"p\">\n</span><span class=\"c\">&#64;{files}</span><span class=\"p\">        </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">filename1.txt</span><span class=\"p\">   </span><span class=\"c\">filename2.txt</span><span class=\"p\">\n</span><span class=\"c\">Add To Archive</span><span class=\"p\">  </span><span class=\"c\">${files}</span><span class=\"p\">       </span><span class=\"c\">files.tar</span>\n</pre>\n</div>\n",
                "shortdoc": "Add file(s) to the archive",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 190
            },
            {
                "name": "Archive Folder With Tar",
                "args": [
                    {
                        "name": "folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "folder: str"
                    },
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    },
                    {
                        "name": "recursive",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recursive: bool = False"
                    },
                    {
                        "name": "include",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include: str | None = None"
                    },
                    {
                        "name": "exclude",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "exclude: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a tar/tar.gz archive of a folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder to archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">should sub directories be included, defaults is False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\">define file pattern to include in the package,\nby default all files are included</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exclude:</th><td class=\"field-body\">define file pattern to exclude from the package</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword creates an TAR or TAR.GZ archive of a local folder. Type of archive\nis determined by the file extension. By default subdirectories are not\nincluded, but they can included using <cite>recursive</cite> argument.</p>\n<p>To include only certain files, like TXT files, the argument <cite>include</cite> can be used.\nSimilarly to exclude certain file, like dotfiles, the argument <cite>exclude</cite> can be used.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.tar</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">tasks.tar.gz</span><span class=\"p\">   </span><span class=\"c\">include=*.robot</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">tasks.tar</span><span class=\"p\">      </span><span class=\"c\">exclude=/.*</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With TAR</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.tar</span><span class=\"p\">  </span><span class=\"c\">recursive=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a tar/tar.gz archive of a folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 149
            },
            {
                "name": "Archive Folder With Zip",
                "args": [
                    {
                        "name": "folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "folder: str"
                    },
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    },
                    {
                        "name": "recursive",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recursive: bool = False"
                    },
                    {
                        "name": "include",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include: str | None = None"
                    },
                    {
                        "name": "exclude",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "exclude: str | None = None"
                    },
                    {
                        "name": "compression",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "stored",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "compression: str = stored"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a zip archive of a folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder to archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">should sub directories be included, defaults is False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\">define file pattern to include in the package, defaults to None (means all files)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exclude:</th><td class=\"field-body\">define file pattern to exclude from the package, defaults is None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param compression:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of package compression method, defaults to &quot;stored&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword creates an ZIP archive of a local folder. By default subdirectories are not\nincluded, but they can included using <cite>recursive</cite> argument.</p>\n<p>To include only certain files, like TXT files, the argument <cite>include</cite> can be used.\nSimilarly to exclude certain file, like dotfiles, the argument <cite>exclude</cite> can be used.</p>\n<p>Compression methods:</p>\n<ul class=\"simple\">\n<li>stored, default</li>\n<li>deflated</li>\n<li>bzip2</li>\n<li>lzma</li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">mydocs.zip</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">robottasks.zip</span><span class=\"p\">   </span><span class=\"c\">include=*.robot</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}tasks</span><span class=\"p\">      </span><span class=\"c\">no_dotfiles.zip</span><span class=\"p\">  </span><span class=\"c\">exclude=/.*</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}documents</span><span class=\"p\">  </span><span class=\"c\">documents.zip</span><span class=\"p\">    </span><span class=\"c\">recursive=True</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}</span><span class=\"p\">               </span><span class=\"c\">packagelzma.zip</span><span class=\"p\">  </span><span class=\"c\">compression=lzma</span><span class=\"p\">\n</span><span class=\"c\">Archive Folder With Zip</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}</span><span class=\"p\">               </span><span class=\"c\">bzipped.zip</span><span class=\"p\">      </span><span class=\"c\">compression=bzip2</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a zip archive of a folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 83
            },
            {
                "name": "Extract Archive",
                "args": [
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    },
                    {
                        "name": "members",
                        "types": [
                            "List",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "members: List | str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Extract files from archive into local directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">filepath to extract file into, default is current working directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param members:</th><td class=\"field-body\">list of files to extract from, by default\nall files in archive are extracted</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword supports extracting files from zip, tar and tar.gz archives.</p>\n<p>By default file is extracted into current working directory, but <cite>path</cite> argument\ncan be set to define extraction path.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Extract Archive</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}extracted</span><span class=\"p\">\n</span><span class=\"c\">&#64;{files}</span><span class=\"p\">           </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">filename1.txt</span><span class=\"p\">    </span><span class=\"c\">filename2.txt</span><span class=\"p\">\n</span><span class=\"c\">Extract Archive</span><span class=\"p\">    </span><span class=\"c\">archive.tar</span><span class=\"p\">   </span><span class=\"c\">C:${/}myfiles${/}</span><span class=\"p\">  </span><span class=\"c\">${files}</span>\n</pre>\n</div>\n",
                "shortdoc": "Extract files from archive into local directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 330
            },
            {
                "name": "Extract File From Archive",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Extract a file from archive into local directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file to extract</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">filepath to extract file into,\ndefault is current working directory</td>\n</tr>\n</tbody>\n</table>\n<p>This keyword supports extracting a file from zip, tar and tar.gz archives.</p>\n<p>By default file is extracted into current working directory,\nbut <cite>path</cite> argument can be set to define extraction path.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Extract File From Archive</span><span class=\"p\">    </span><span class=\"c\">extrafile.txt</span><span class=\"p\">   </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">Extract File From Archive</span><span class=\"p\">    </span><span class=\"c\">background.png</span><span class=\"p\">  </span><span class=\"c\">images.tar.gz</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}extracted</span>\n</pre>\n</div>\n",
                "shortdoc": "Extract a file from archive into local directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 370
            },
            {
                "name": "Get Archive Info",
                "args": [
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get information about the archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n</tbody>\n</table>\n<p>Returns following file attributes in a dictionary:</p>\n<ul class=\"simple\">\n<li>filename</li>\n<li>filemode</li>\n<li>size</li>\n<li>mtime</li>\n<li>last modification time in format <cite>%d.%m.%Y %H:%M:%S</cite></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{archiveinfo}</span><span class=\"p\">   </span><span class=\"c\">Get Archive Info</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span>\n</pre>\n</div>\n",
                "shortdoc": "Get information about the archive",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 289
            },
            {
                "name": "List Archive",
                "args": [
                    {
                        "name": "archive_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "archive_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List files in an archive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param archive_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filename of the archive</td>\n</tr>\n</tbody>\n</table>\n<p>Returns list of file, where each file in a list is a dictionary\nwith following attributes:</p>\n<ul class=\"simple\">\n<li>name</li>\n<li>size</li>\n<li>mtime</li>\n<li>last modification time in format <cite>%d.%m.%Y %H:%M:%S</cite></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{files}</span><span class=\"p\">   </span><span class=\"c\">List Archive</span><span class=\"p\">    </span><span class=\"c\">myfiles.zip</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${file}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">   </span><span class=\"c\">${files}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[filename]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[size]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}[mtime]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "List files in an archive",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Archive.py",
                "lineno": 238
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Browser": {
        "name": "RPA.Browser",
        "doc": "<p>Browser is a web testing library for Robot Framework, based on the popular SeleniumLibrary.</p>\n<p>It uses the Selenium WebDriver modules internally to control a web browser. See <a href=\"http://seleniumhq.org\">http://seleniumhq.org</a> for more information about Selenium in general.</p>\n<h2 id=\"Locating elements\">Locating elements</h2>\n<p>All keywords in the browser library that need to interact with an element on a web page take an argument typically named <code>locator</code> that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but <a href=\"#Using%20WebElements\" class=\"name\">using WebElements</a> is possible too.</p>\n<h3 id=\"Locator syntax\">Locator syntax</h3>\n<p>Finding elements can be done using different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.</p>\n<h4 id=\"Default locator strategy\">Default locator strategy</h4>\n<p>By default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on <code>id</code> and <code>name</code> attributes, but some keywords support additional attributes or other values that make sense in their context. For example, <a href=\"#Click%20Link\" class=\"name\">Click Link</a> supports the <code>href</code> attribute and the link text and addition to the normal <code>id</code> and <code>name</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>example</td>\n<td># Match based on <code>id</code> or <code>name</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Match also based on link text and <code>href</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>example</td>\n<td># Match based on <code>id</code>, <code>name</code> or <code>value</code>.</td>\n</tr>\n</table>\n<p>If a locator accidentally starts with a prefix recognized as <a href=\"#Explicit%20locator%20strategy\" class=\"name\">explicit locator strategy</a> or <a href=\"#Implicit%20XPath%20strategy\" class=\"name\">implicit XPath strategy</a>, it is possible to use the explicit <code>default</code> prefix to enable the default strategy.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>name:foo</td>\n<td># Find element with name <code>foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default:name:foo</td>\n<td># Use default strategy with value <code>name:foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//foo</td>\n<td># Find element using XPath <code>//foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default: //foo</td>\n<td># Use default strategy with value <code>//foo</code>.</td>\n</tr>\n</table>\n<h4 id=\"Explicit locator strategy\">Explicit locator strategy</h4>\n<p>The explicit locator strategy is specified with a prefix using either syntax <code>strategy:value</code> or <code>strategy=value</code>. The former syntax is preferred because the latter is identical to Robot Framework's <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax\">named argument syntax</a> and that can cause problems. Spaces around the separator are ignored, so <code>id:foo</code>, <code>id: foo</code> and <code>id : foo</code> are all equivalent.</p>\n<p>Locator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register <a href=\"#Custom%20locators\" class=\"name\">custom locators</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Strategy</th>\n<th>Match based on</th>\n<th>Example</th>\n</tr>\n<tr>\n<td>id</td>\n<td>Element <code>id</code>.</td>\n<td><code>id:example</code></td>\n</tr>\n<tr>\n<td>name</td>\n<td><code>name</code> attribute.</td>\n<td><code>name:example</code></td>\n</tr>\n<tr>\n<td>identifier</td>\n<td>Either <code>id</code> or <code>name</code>.</td>\n<td><code>identifier:example</code></td>\n</tr>\n<tr>\n<td>class</td>\n<td>Element <code>class</code>.</td>\n<td><code>class:example</code></td>\n</tr>\n<tr>\n<td>tag</td>\n<td>Tag name.</td>\n<td><code>tag:div</code></td>\n</tr>\n<tr>\n<td>xpath</td>\n<td>XPath expression.</td>\n<td><code>xpath://div[@id=\"example\"]</code></td>\n</tr>\n<tr>\n<td>css</td>\n<td>CSS selector.</td>\n<td><code>css:div#example</code></td>\n</tr>\n<tr>\n<td>dom</td>\n<td>DOM expression.</td>\n<td><code>dom:document.images[5]</code></td>\n</tr>\n<tr>\n<td>link</td>\n<td>Exact text a link has.</td>\n<td><code>link:The example</code></td>\n</tr>\n<tr>\n<td>partial link</td>\n<td>Partial link text.</td>\n<td><code>partial link:he ex</code></td>\n</tr>\n<tr>\n<td>sizzle</td>\n<td>Sizzle selector deprecated.</td>\n<td><code>sizzle:div.example</code></td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>jQuery expression.</td>\n<td><code>jquery:div.example</code></td>\n</tr>\n<tr>\n<td>default</td>\n<td>Keyword specific default behavior.</td>\n<td><code>default:example</code></td>\n</tr>\n</table>\n<p>See the <a href=\"#Default%20locator%20strategy\" class=\"name\">Default locator strategy</a> section below for more information about how the default strategy works. Using the explicit <code>default</code> prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.</p>\n<p>Different locator strategies have different pros and cons. Using ids, either explicitly like <code>id:foo</code> or by using the <a href=\"#Default%20locator%20strategy\" class=\"name\">default locator strategy</a> simply like <code>foo</code>, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using <code>tag</code>, <code>class</code> or <code>css</code> strategy like <code>tag:h1</code>, <code>class:example</code> or <code>css:h1.example</code> is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>id:foo</td>\n<td># Element with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>css:div#foo h1</td>\n<td># h1 element under div with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //div[@id=\"foo\"]//h1</td>\n<td># Same as the above using XPath, not CSS.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //*[contains(text(), \"example\")]</td>\n<td># Element containing text 'example'.</td>\n</tr>\n</table>\n<p><b>NOTE:</b></p>\n<ul>\n<li>Using the <code>sizzle</code> strategy or its alias <code>jquery</code> requires that the system under test contains the jQuery library.</li>\n</ul>\n<h4 id=\"Implicit XPath strategy\">Implicit XPath strategy</h4>\n<p>If the locator starts with <code>//</code> or <code>(//</code>, the locator is considered to be an XPath expression. In other words, using <code>//div</code> is equivalent to using explicit <code>xpath://div</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//div[@id=\"foo\"]//h1</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>(//div)[2]</td>\n</tr>\n</table>\n<h4 id=\"Chaining locators\">Chaining locators</h4>\n<p>It's possible to chain multiple locators together as a single locator. Each chained locator must start with a locator strategy. Chained locators must be separated with a single space, two greater than characters, and followed with a space. It's also possible to mix different locator strategies, such as css or xpath. Also, a list can also be used to specify multiple locators, for instance when the chaining separator would conflict with the actual locator, or when an existing web element is used as a base.</p>\n<p>Although all locators support chaining, some locator strategies don't chain properly with previous values. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found by the previous locator. Locator strategies that support chaining are the ones that are based on the Selenium API, such as <span class=\"name\">xpath</span> or <span class=\"name\">css</span>, but for example chaining is not supported by <span class=\"name\">sizzle</span> or <span class=\"name\">jquery</span>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>css:.bar &gt;&gt; <a href=\"xpath://a\">xpath://a</a></td>\n<td># To find a link which is present inside an element with class \"bar\"</td>\n</tr>\n</table>\n<p>List examples:</p>\n<table border=\"1\">\n<tr>\n<td>${locator_list} =</td>\n<td><span class=\"name\">Create List</span></td>\n<td>css:div#div_id</td>\n<td><a href=\"xpath://*[text(\">xpath://*[text(</a>), \" &gt;&gt; \"]</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>${locator_list}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${element} =</td>\n<td>Get WebElement</td>\n<td><a href=\"xpath://*[text(\">xpath://*[text(</a>), \" &gt;&gt; \"]</td>\n<td></td>\n</tr>\n<tr>\n<td>${locator_list} =</td>\n<td><span class=\"name\">Create List</span></td>\n<td>css:div#div_id</td>\n<td>${element}</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>${locator_list}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<h3 id=\"Using WebElements\">Using WebElements</h3>\n<p>In addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the <a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a> keyword.</p>\n<table border=\"1\">\n<tr>\n<td>${elem} =</td>\n<td><a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a></td>\n<td>id:example</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>${elem}</td>\n<td></td>\n</tr>\n</table>\n<h3 id=\"Custom locators\">Custom locators</h3>\n<p>If more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:</p>\n<table border=\"1\">\n<tr>\n<td>Custom Locator Strategy</td>\n<td>[Arguments]</td>\n<td>${browser}</td>\n<td>${locator}</td>\n<td>${tag}</td>\n<td>${constraints}</td>\n</tr>\n<tr>\n<td></td>\n<td>${element}=</td>\n<td>Execute Javascript</td>\n<td>return window.document.getElementById('${locator}');</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[Return]</td>\n<td>${element}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>This keyword is a reimplementation of the basic functionality of the <code>id</code> locator where <code>${browser}</code> is a reference to a WebDriver instance and <code>${locator}</code> is the name of the locator strategy. To use this locator, it must first be registered by using the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a></td>\n<td>custom</td>\n<td>Custom Locator Strategy</td>\n</tr>\n</table>\n<p>The first argument of <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>custom:example</td>\n</tr>\n</table>\n<p>See the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword for more details.</p>\n<h2 id=\"Browser and Window\">Browser and Window</h2>\n<p>There is different conceptual meaning when this library talks about windows or browsers. This chapter explains those differences.</p>\n<h3 id=\"Browser\">Browser</h3>\n<p>When <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> keyword is called, it will create a new Selenium WebDriver instance by using the <a href=\"https://www.seleniumhq.org/docs/03_webdriver.jsp\">Selenium WebDriver</a> API. In this library's terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.</p>\n<h3 id=\"Window\">Window</h3>\n<p>Windows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In this context a browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> keyword:</p>\n<pre>\n<a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a>    window.open()    # Opens a new window with location about:blank\n</pre>\n<p>The example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.</p>\n<p>Structure:</p>\n<pre>\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n</pre>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://robotframework.org\">https://robotframework.org</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserA</td>\n<td># BrowserA with first window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA second window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td></td>\n<td># Switched to second window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://robocon.io\">https://robocon.io</a></td>\n<td></td>\n<td></td>\n<td># Second window navigates to robocon site.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA third window is opened.</td>\n</tr>\n<tr>\n<td>${handle}</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td># Switched to third window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a></td>\n<td></td>\n<td></td>\n<td># Third windows goes to robot framework github site.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://github.com\">https://github.com</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserB</td>\n<td># BrowserB with first windows is opened.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} is: <a href=\"https://www.github.com\">https://www.github.com</a></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td>browser=BrowserA</td>\n<td></td>\n<td># BrowserA second windows is selected.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} = <a href=\"https://robocon.io/\">https://robocon.io/</a></td>\n</tr>\n<tr>\n<td>@{locations 1}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td></td>\n<td></td>\n<td># By default, lists locations under the currectly active browser (BrowserA).</td>\n</tr>\n<tr>\n<td>@{locations 2}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td>browser=ALL</td>\n<td></td>\n<td># By using browser=ALL argument keyword list all locations from all browsers.</td>\n</tr>\n</table>\n<p>The above example, @{locations 1} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a> and <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>'. The @{locations 2} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a>, <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>' and '<a href=\"https://github.com/\">https://github.com/</a>.</p>\n<h2 id=\"Timeouts, waits, and delays\">Timeouts, waits, and delays</h2>\n<p>This section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the <a href=\"#Time%20format\" class=\"name\">time format</a> that can be used when setting various timeouts, waits, and delays.</p>\n<h3 id=\"Timeout\">Timeout</h3>\n<p>This library contains various keywords that have an optional <code>timeout</code> argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, <code>Wait ...</code> keywords and keywords related to alerts. Additionally <a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async Javascript</a>. Although it does not have <code>timeout</code>, argument, uses a timeout to define how long asynchronous JavaScript can run.</p>\n<p>The default timeout these keywords use can be set globally either by using the <a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a> keyword or with the <code>timeout</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported timeout syntax.</p>\n<h3 id=\"Implicit wait\">Implicit wait</h3>\n<p>Implicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> keyword or with the <code>implicit_wait</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp\">Selenium documentation</a> for more information about this functionality.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Selenium speed\">Selenium speed</h3>\n<p>Selenium execution speed can be slowed down globally by using <a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium speed</a> keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Time format\">Time format</h3>\n<p>All timeouts and waits can be given as numbers considered seconds (e.g. <code>0.5</code> or <code>42</code>) or in Robot Framework's time syntax (e.g. <code>1.5 seconds</code> or <code>1 min 30 s</code>). For more information about the time syntax see the <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">Robot Framework User Guide</a>.</p>\n<h2 id=\"Run-on-failure functionality\">Run-on-failure functionality</h2>\n<p>This library has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> keyword, but this can be changed either by using the <a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a> keyword or with the <code>run_on_failure</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. It is possible to use any keyword from any imported library or resource file.</p>\n<p>The run-on-failure functionality can be disabled by using a special value <code>NOTHING</code> or anything considered false (see <span class=\"name\">Boolean arguments</span>) such as <code>NONE</code>.</p>",
        "version": "5.1.3",
        "generated": "2021-10-02 08:05:58",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\__init__.py",
        "lineno": 5,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>SeleniumLibrary can be imported with several optional arguments.</p>\n<ul>\n<li><code>timeout</code>: Default value for <span class=\"name\">timeouts</span> used with <code>Wait ...</code> keywords.</li>\n<li><code>implicit_wait</code>: Default value for <a href=\"#Implicit%20wait\" class=\"name\">implicit wait</a> used when locating elements.</li>\n<li><code>run_on_failure</code>: Default action for the <a href=\"#Run-on-failure%20functionality\" class=\"name\">run-on-failure functionality</a>.</li>\n<li><code>screenshot_root_directory</code>: Path to folder where possible screenshots are created or EMBED. See <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword for further details about EMBED. If not given, the directory where the log file is written is used.</li>\n<li><code>plugins</code>: Allows extending the SeleniumLibrary with external Python classes.</li>\n<li><code>event_firing_webdriver</code>: Class for wrapping Selenium with <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver\">EventFiringWebDriver</a></li>\n</ul>",
                "shortdoc": "SeleniumLibrary can be imported with several optional arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\__init__.py",
                "lineno": 8
            }
        ],
        "keywords": [
            {
                "name": "Add Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    },
                    {
                        "name": "domain",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "domain: str | None = None"
                    },
                    {
                        "name": "secure",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "secure: bool | None = None"
                    },
                    {
                        "name": "expiry",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expiry: str | None = None"
                    }
                ],
                "doc": "<p>Adds a cookie to your current session.</p>\n<p><code>name</code> and <code>value</code> are required, <code>path</code>, <code>domain</code>, <code>secure</code> and <code>expiry</code> are optional.  Expiry supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>domain=example.com</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=2027-09-28 16:21:35</td>\n<td># Expiry as timestamp.</td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=1822137695</td>\n<td># Expiry as epoch seconds.</td>\n</tr>\n</table>\n<p>Prior to SeleniumLibrary 3.0 setting expiry did not work.</p>",
                "shortdoc": "Adds a cookie to your current session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 143
            },
            {
                "name": "Add Location Strategy",
                "args": [
                    {
                        "name": "strategy_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_name: str"
                    },
                    {
                        "name": "strategy_keyword",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_keyword: str"
                    },
                    {
                        "name": "persist",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "persist: bool = False"
                    }
                ],
                "doc": "<p>Adds a custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies. <a href=\"#Remove%20Location%20Strategy\" class=\"name\">Remove Location Strategy</a> can be used to remove a registered strategy.</p>\n<p>Location strategies are automatically removed after leaving the current scope by default. Setting <code>persist</code> to a true value (see <span class=\"name\">Boolean arguments</span>) will cause the location strategy to stay registered throughout the life of the test.</p>",
                "shortdoc": "Adds a custom location strategy.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1118
            },
            {
                "name": "Alert Should Be Present",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str = "
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Verifies that an alert is present and by default, accepts it.</p>\n<p>Fails if no alert is present. If <code>text</code> is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p><code>action</code> and <code>timeout</code> arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.</p>",
                "shortdoc": "Verifies that an alert is present and by default, accepts it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 52
            },
            {
                "name": "Alert Should Not Be Present",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Verifies that no alert is present.</p>\n<p>If the alert actually exists, the <code>action</code> argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> keyword.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the <a href=\"#Time%20format\" class=\"name\">time format</a> section for information about the syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that no alert is present.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 79
            },
            {
                "name": "Assign Id To Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "id: str"
                    }
                ],
                "doc": "<p>Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.</p>\n<p>This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Assign%20Id%20To%20Element\" class=\"name\">Assign ID to Element</a></td>\n<td>//ul[@class='example' and ./li[contains(., 'Stuff')]]</td>\n<td>my id</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>my id</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Assigns a temporary ``id`` to the element specified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 222
            },
            {
                "name": "Attach Chrome Browser",
                "args": [
                    {
                        "name": "port",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "port: int"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    }
                ],
                "doc": "<p>Attach to an existing instance of Chrome or Chromium.</p>\n<p>Requires that the browser was started with the command line option <code>--remote-debugging-port=&lt;port&gt;</code>, where port is any 4-digit number not being used by other applications.</p>\n<p>That port can then be used to connect using this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Attach Chrome Browser</td>\n<td>port=9222</td>\n</tr>\n</table>",
                "shortdoc": "Attach to an existing instance of Chrome or Chromium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 874
            },
            {
                "name": "Capture Element Screenshot",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "selenium-element-screenshot-{index}.png",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = selenium-element-screenshot-{index}.png"
                    }
                ],
                "doc": "<p>Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.</p>\n<p>See <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> for details about <code>filename</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>An absolute path to the created element screenshot is returned.</p>\n<p>Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.</p>\n<p>New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>${OUTPUTDIR}/id_image_id-1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Captures a screenshot from the element identified by ``locator`` and embeds it into log file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 129
            },
            {
                "name": "Capture Page Screenshot",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "selenium-screenshot-{index}.png",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = selenium-screenshot-{index}.png"
                    }
                ],
                "doc": "<p>Takes a screenshot of the current page and embeds it into a log file.</p>\n<p><code>filename</code> argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when <a href=\"#Importing\" class=\"name\">importing</a> the library or by using the <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>filename</code> equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.</p>\n<p>Starting from SeleniumLibrary 1.8, if <code>filename</code> contains marker <code>{index}</code>, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>An absolute path to the created screenshot file is returned or if <code>filename</code>  equals to EMBED, word <span class=\"name\">EMBED</span> is returned.</p>\n<p>Support for EMBED is new in SeleniumLibrary 4.2</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-1.png</td>\n</tr>\n<tr>\n<td>${path} =</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-2.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${path}</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_name.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_name.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_with_index_{index}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_with_index_1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>formatted_index_{index:03}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/formatted_index_001.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>EMBED</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Not Exist</span></td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 67
            },
            {
                "name": "Checkbox Should Be Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is selected/checked.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 44
            },
            {
                "name": "Checkbox Should Not Be Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is not selected/checked.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 58
            },
            {
                "name": "Choose File",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "file_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "file_path: str"
                    }
                ],
                "doc": "<p>Inputs the <code>file_path</code> into the file input field <code>locator</code>.</p>\n<p>This keyword is most often used to input files into upload forms. The keyword does not check <code>file_path</code> is the file or folder available on the machine where tests are executed. If the <code>file_path</code> points at a file and when using Selenium Grid, Selenium will <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE\">magically</a>, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.</p>\n<p>That <code>file_path</code> is not checked, is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Choose%20File\" class=\"name\">Choose File</a></td>\n<td>my_upload_field</td>\n<td>${CURDIR}/trades.csv</td>\n</tr>\n</table>",
                "shortdoc": "Inputs the ``file_path`` into the file input field ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 216
            },
            {
                "name": "Clear All Highlights",
                "args": [],
                "doc": "<p>Remove all highlighting made by <code>Highlight Elements</code>.</p>",
                "shortdoc": "Remove all highlighting made by ``Highlight Elements``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1834
            },
            {
                "name": "Clear Element Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Clears the value of the text-input-element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Clears the value of the text-input-element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 524
            },
            {
                "name": "Click Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks the button identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks the button identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 547
            },
            {
                "name": "Click Button When Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    }
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 986
            },
            {
                "name": "Click Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    },
                    {
                        "name": "action_chain",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action_chain: bool = False"
                    }
                ],
                "doc": "<p>Click the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>modifier</code> argument can be used to pass <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys\">Selenium Keys</a> when clicking the element. The <span class=\"name\">+</span> can be used as a separator for different Selenium Keys. The <span class=\"name\">CTRL</span> is internally translated to the <span class=\"name\">CONTROL</span> key. The <code>modifier</code> is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT\">ALT key</a> . If <code>modifier</code> does not match to Selenium Keys, keyword fails.</p>\n<p>If <code>action_chain</code> argument is true, see <span class=\"name\">Boolean arguments</span> for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &lt;web_element&gt;.click() function. If both <code>action_chain</code> and <code>modifier</code> are defined, the click will be performed using <code>modifier</code> and <code>action_chain</code> will be ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td></td>\n<td># Would click element without any modifiers.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL</td>\n<td># Would click element with CTLR key pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n<td># Would click element with CTLR and ALT keys pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>action_chain=True</td>\n<td># Clicks the button using an Selenium  ActionChains</td>\n</tr>\n</table>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.2 The <code>action_chain</code> argument is new in SeleniumLibrary 4.1</p>",
                "shortdoc": "Click the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 617
            },
            {
                "name": "Click Element At Coordinates",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "xoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "xoffset: int"
                    },
                    {
                        "name": "yoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "yoffset: int"
                    }
                ],
                "doc": "<p>Click the element <code>locator</code> at <code>xoffset/yoffset</code>.</p>\n<p>The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Click the element ``locator`` at ``xoffset/yoffset``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 689
            },
            {
                "name": "Click Element If Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Click element if it is visible</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element If Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click element if it is visible",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1006
            },
            {
                "name": "Click Element When Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    },
                    {
                        "name": "action_chain",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action_chain: bool = False"
                    }
                ],
                "doc": "<p>Click element identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p><code>action_chain</code> store action in Selenium ActionChain queue</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element When Visible</td>\n<td>q</td>\n<td></td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>action_chain=True</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Click element identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 965
            },
            {
                "name": "Click Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks an image identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 571
            },
            {
                "name": "Click Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks a link identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 596
            },
            {
                "name": "Close All Browsers",
                "args": [],
                "doc": "<p>Closes all open browsers and resets the browser cache.</p>\n<p>After this keyword, new indexes returned from <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword are reset to 1.</p>\n<p>This keyword should be used in test or suite teardown to make sure all browsers are closed.</p>",
                "shortdoc": "Closes all open browsers and resets the browser cache.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 40
            },
            {
                "name": "Close Browser",
                "args": [],
                "doc": "<p>Closes the current browser.</p>",
                "shortdoc": "Closes the current browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 53
            },
            {
                "name": "Close Window",
                "args": [],
                "doc": "<p>Closes currently opened and selected browser window/tab.</p>",
                "shortdoc": "Closes currently opened and selected browser window/tab.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 125
            },
            {
                "name": "Cover Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.3.0</p>\n<p>Example: |<a href=\"#Cover%20Element\" class=\"name\">Cover Element</a> | css:div#container |</p>",
                "shortdoc": "Will cover elements identified by ``locator`` with a blue div without breaking page layout.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 474
            },
            {
                "name": "Create Webdriver",
                "args": [
                    {
                        "name": "driver_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "driver_name: str"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "kwargs={}"
                    },
                    {
                        "name": "init_kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**init_kwargs"
                    }
                ],
                "doc": "<p>Creates an instance of Selenium WebDriver.</p>\n<p>Like <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a>, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> is not adequate.</p>\n<p><code>driver_name</code> must be a WebDriver implementation name like Firefox, Chrome, Ie, Opera, Safari, PhantomJS, or Remote.</p>\n<p>The initialized WebDriver can be configured either with a Python dictionary <code>kwargs</code> or by using keyword arguments <code>**init_kwargs</code>. These arguments are passed directly to WebDriver without any processing. See <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/api.html\">Selenium API documentation</a> for details about the supported arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Use proxy with Firefox</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${proxy}=</td>\n<td><span class=\"name\">Evaluate</span></td>\n<td>selenium.webdriver.Proxy()</td>\n<td>modules=selenium, selenium.webdriver</td>\n</tr>\n<tr>\n<td>${proxy.http_proxy}=</td>\n<td><span class=\"name\">Set Variable</span></td>\n<td>localhost:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>Firefox</td>\n<td>proxy=${proxy}</td>\n<td></td>\n</tr>\n<tr>\n<td># Use proxy with PhantomJS</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${service args}=</td>\n<td><span class=\"name\">Create List</span></td>\n<td>--proxy=192.168.132.104:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>PhantomJS</td>\n<td>service_args=${service args}</td>\n<td></td>\n</tr>\n</table>\n<p>Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> keyword is used. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for an example.</p>",
                "shortdoc": "Creates an instance of Selenium WebDriver.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 347
            },
            {
                "name": "Current Frame Should Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that the current frame contains <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Current Frame Contains</span>.</p>",
                "shortdoc": "Verifies that the current frame contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 53
            },
            {
                "name": "Current Frame Should Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that the current frame does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that the current frame does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 70
            },
            {
                "name": "Delete All Cookies",
                "args": [],
                "doc": "<p>Deletes all cookies.</p>",
                "shortdoc": "Deletes all cookies.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 57
            },
            {
                "name": "Delete Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    }
                ],
                "doc": "<p>Deletes the cookie matching <code>name</code>.</p>\n<p>If the cookie is not found, nothing happens.</p>",
                "shortdoc": "Deletes the cookie matching ``name``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 62
            },
            {
                "name": "Does Alert Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    }
                ],
                "doc": "<p>Does alert contain text.</p>\n<p><code>text</code> check if alert includes text, will raise ValueError is text does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Contain</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert contain text.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1148
            },
            {
                "name": "Does Alert Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    }
                ],
                "doc": "<p>Does alert not contain text.</p>\n<p><code>text</code> check that alert does not include text, will raise ValueError if text does exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Not Contain</td>\n<td>unexpected message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert not contain text.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1167
            },
            {
                "name": "Does Element Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Does element contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Element Contain</td>\n<td>id:spec</td>\n<td>specification complete</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Does element contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1217
            },
            {
                "name": "Does Frame Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Does frame contain expected text</p>\n<p><code>locator</code> locator of the frame to check</p>\n<p><code>text</code> does frame contain this text</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Frame Contain</td>\n<td>id:myframe</td>\n<td>secret</td>\n</tr>\n</table>",
                "shortdoc": "Does frame contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1201
            },
            {
                "name": "Does Location Contain",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does current URL contain expected</p>\n<p><code>expected</code> URL should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://robocorp.com\">https://robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Location Contain</td>\n<td>robocorp</td>\n</tr>\n</table>",
                "shortdoc": "Does current URL contain expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1309
            },
            {
                "name": "Does Page Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Does page contain expected text</p>\n<p><code>text</code> page should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain</td>\n<td>Gmail</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1324
            },
            {
                "name": "Does Page Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Button</td>\n<td>search-button</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected button",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1339
            },
            {
                "name": "Does Page Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected checkbox</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Checkbox</td>\n<td>random-selection</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected checkbox",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1353
            },
            {
                "name": "Does Page Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int | None = None"
                    }
                ],
                "doc": "<p>Does page contain expected element</p>\n<p><code>locator</code> element locator</p>\n<p><code>count</code> how many times element is expected to appear on page by default one or more</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>textarea</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>button</td>\n<td>count=4</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1367
            },
            {
                "name": "Does Page Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected image</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Image</td>\n<td>Google</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1385
            },
            {
                "name": "Does Page Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected link</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Link</td>\n<td>id:submit</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected link",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1400
            },
            {
                "name": "Does Page Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected list</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain List</td>\n<td>class:selections</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected list",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1414
            },
            {
                "name": "Does Page Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected radio button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Radio Button</td>\n<td>male</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected radio button",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1428
            },
            {
                "name": "Does Page Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected textfield</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Textfield</td>\n<td>id:address</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected textfield",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1442
            },
            {
                "name": "Does Table Cell Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table cell contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Cell Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table cell contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1489
            },
            {
                "name": "Does Table Column Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table column contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table column</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Column Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Nokia</td>\n</tr>\n</table>",
                "shortdoc": "Does table column contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1511
            },
            {
                "name": "Does Table Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in table</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Contain</td>\n<td>//table</td>\n<td>February</td>\n</tr>\n</table>",
                "shortdoc": "Does table contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1581
            },
            {
                "name": "Does Table Footer Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table footer contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table footer</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Footer Contain</td>\n<td>//table</td>\n<td>Sum</td>\n</tr>\n</table>",
                "shortdoc": "Does table footer contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1549
            },
            {
                "name": "Does Table Header Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table header contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table header</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Header Contain</td>\n<td>//table</td>\n<td>Month</td>\n</tr>\n</table>",
                "shortdoc": "Does table header contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1565
            },
            {
                "name": "Does Table Row Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table row contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Row Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table row contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1531
            },
            {
                "name": "Does Textarea Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does textarea contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textarea</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textarea Contain</td>\n<td>//textarea</td>\n<td>sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Does textarea contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1613
            },
            {
                "name": "Does Textfield Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does textfield contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textfield</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textfield Contain</td>\n<td>id:lname</td>\n<td>Last</td>\n</tr>\n</table>",
                "shortdoc": "Does textfield contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1629
            },
            {
                "name": "Double Click Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Double clicks the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Double clicks the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 713
            },
            {
                "name": "Drag And Drop",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "target",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target: WebElement | str"
                    }
                ],
                "doc": "<p>Drags the element identified by <code>locator</code> into the <code>target</code> element.</p>\n<p>The <code>locator</code> argument is the locator of the dragged element and the <code>target</code> is the locator of the target. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a></td>\n<td>css:div#element</td>\n<td>css:div.target</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified by ``locator`` into the ``target`` element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 753
            },
            {
                "name": "Drag And Drop By Offset",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "xoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "xoffset: int"
                    },
                    {
                        "name": "yoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "yoffset: int"
                    }
                ],
                "doc": "<p>Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element will be moved by <code>xoffset</code> and <code>yoffset</code>, each of which is a negative or positive number specifying the offset.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop%20By%20Offset\" class=\"name\">Drag And Drop By Offset</a></td>\n<td>myElem</td>\n<td>50</td>\n<td>-35</td>\n<td># Move myElem 50px right and 35px down</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified with ``locator`` by ``xoffset/yoffset``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 775
            },
            {
                "name": "Element Attribute Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies element identified by <code>locator</code> contains expected attribute value.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example: <a href=\"#Element%20Attribute%20Value%20Should%20Be\" class=\"name\">Element Attribute Value Should Be</a> | css:img | href | value</p>\n<p>New in SeleniumLibrary 3.2.</p>",
                "shortdoc": "Verifies element identified by ``locator`` contains expected attribute value.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 414
            },
            {
                "name": "Element Should Be Disabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is disabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is disabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 241
            },
            {
                "name": "Element Should Be Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is enabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is enabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 254
            },
            {
                "name": "Element Should Be Focused",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is focused.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is focused.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 267
            },
            {
                "name": "Element Should Be Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is visible.</p>\n<p>Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries <code>display:none</code> is not logically visible, so using this keyword on that element would fail.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>",
                "shortdoc": "Verifies that the element identified by ``locator`` is visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 284
            },
            {
                "name": "Element Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> if you want to match the exact text, not a substring.</p>",
                "shortdoc": "Verifies that element ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 55
            },
            {
                "name": "Element Should Not Be Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is NOT visible.</p>\n<p>Passes if the element does not exists. See <a href=\"#Element%20Should%20Be%20Visible\" class=\"name\">Element Should Be Visible</a> for more information about visibility and supported arguments.</p>",
                "shortdoc": "Verifies that the element identified by ``locator`` is NOT visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 307
            },
            {
                "name": "Element Should Not Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that element ``locator`` does not contain text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 93
            },
            {
                "name": "Element Text Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains exact the text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Should%20Contain\" class=\"name\">Element Should Contain</a> if a substring match is desired.</p>",
                "shortdoc": "Verifies that element ``locator`` contains exact the text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 326
            },
            {
                "name": "Element Text Should Not Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "not_expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "not_expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p>New in SeleniumLibrary 3.1.1</p>",
                "shortdoc": "Verifies that element ``locator`` does not contain exact the text ``not_expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 362
            },
            {
                "name": "Execute Async Javascript",
                "args": [
                    {
                        "name": "code",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*code: WebElement | str"
                    }
                ],
                "doc": "<p>Executes asynchronous JavaScript code with possible arguments.</p>\n<p>Similar to <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.</p>\n<p>Scripts must complete within the script timeout or this keyword will fail. See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section for more information.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\">arguments</a> as part of <code>code</code> argument. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> for more details.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>${CURDIR}/async_js_to_execute.js</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>var callback = arguments[arguments.length - 1];</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>function answer(){callback(\"text\");};</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>window.setTimeout(answer, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result}</td>\n<td>text</td>\n</tr>\n</table>",
                "shortdoc": "Executes asynchronous JavaScript code with possible arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "lineno": 76
            },
            {
                "name": "Execute Cdp",
                "args": [
                    {
                        "name": "command",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "command"
                    },
                    {
                        "name": "parameters",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "parameters"
                    }
                ],
                "doc": "<p>Executes Chrome DevTools Protocol commands</p>\n<p>Works only with Chrome/Chromium</p>\n<p>For more information, available commands and parameters, see: <a href=\"https://chromedevtools.github.io/devtools-protocol/\">https://chromedevtools.github.io/devtools-protocol/</a></p>\n<p><code>command</code> command to execute as string</p>\n<p><code>parameters</code> parameters for command as a dictionary</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Chrome Browser</td>\n<td>about:blank</td>\n<td>headless=True</td>\n</tr>\n<tr>\n<td>&amp;{params}</td>\n<td>Create Dictionary</td>\n<td>useragent=Chrome/83.0.4103.53</td>\n</tr>\n<tr>\n<td>Execute CDP</td>\n<td>Network.setUserAgentOverride</td>\n<td>${params}</td>\n</tr>\n<tr>\n<td>Go To</td>\n<td><a href=\"https://robocorp.com\">https://robocorp.com</a></td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Executes Chrome DevTools Protocol commands",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1892
            },
            {
                "name": "Execute Javascript",
                "args": [
                    {
                        "name": "code",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*code: WebElement | str"
                    }
                ],
                "doc": "<p>Executes the given JavaScript code with possible arguments.</p>\n<p><code>code</code> may be divided into multiple cells in the test data and <code>code</code> may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from <code>code</code>.</p>\n<p>If <code>code</code> is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.</p>\n<p>The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use <code>window</code> to refer to the window of your application and <code>document</code> to refer to the document object of the current frame or window, e.g. <code>document.getElementById('example')</code>.</p>\n<p>This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\">arguments</a> as part of <code>code</code> argument. The JavaScript code and arguments must be separated with <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers and must be used exactly with this format. If the Javascript code is first, then the <span class=\"name\">JAVASCRIPT</span> marker is optional. The order of <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers can be swapped, but if <span class=\"name\">ARGUMENTS</span> is the first marker, then <span class=\"name\">JAVASCRIPT</span> marker is mandatory. It is only allowed to use <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers only one time in the <code>code</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>window.myFunc('arg1', 'arg2')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>${CURDIR}/js_to_execute.js</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>alert(arguments[0]);</td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td>JAVASCRIPT</td>\n<td>alert(arguments[0]);</td>\n</tr>\n</table>",
                "shortdoc": "Executes the given JavaScript code with possible arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "lineno": 33
            },
            {
                "name": "Frame Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that frame identified by <code>locator</code> contains <code>text</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that frame identified by ``locator`` contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 84
            },
            {
                "name": "Get All Links",
                "args": [],
                "doc": "<p>Returns a list containing ids of all links found in current page.</p>\n<p>If a link has no id, an empty string will be in the list instead.</p>",
                "shortdoc": "Returns a list containing ids of all links found in current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 993
            },
            {
                "name": "Get Browser Aliases",
                "args": [],
                "doc": "<p>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserA</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserB</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{aliases}</td>\n<td><a href=\"#Get%20Browser%20Aliases\" class=\"name\">Get Browser Aliases</a></td>\n<td></td>\n<td># &amp;{aliases} = { BrowserA=1|BrowserB=2 }</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>${aliases.BrowserA}</td>\n<td></td>\n<td># logs <code>1</code></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${alias}</td>\n<td>IN</td>\n<td>@{aliases}</td>\n</tr>\n<tr>\n<td></td>\n<td><span class=\"name\">Log</span></td>\n<td>${alias}</td>\n<td># logs <code>BrowserA</code> and <code>BrowserB</code></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 459
            },
            {
                "name": "Get Browser Capabilities",
                "args": [],
                "doc": "<p>Get dictionary of browser properties</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${caps}=</td>\n<td>Get Browser Capabilities</td>\n</tr>\n</table>",
                "shortdoc": "Get dictionary of browser properties",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1748
            },
            {
                "name": "Get Browser Ids",
                "args": [],
                "doc": "<p>Returns index of all active browser as list.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{browser_ids}=</td>\n<td>Get Browser Ids</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${id}</td>\n<td>IN</td>\n<td>@{browser_ids}</td>\n</tr>\n<tr>\n<td></td>\n<td>@{window_titles}=</td>\n<td>Get Window Titles</td>\n<td>browser=${id}</td>\n</tr>\n<tr>\n<td></td>\n<td>Log</td>\n<td>Browser ${id} has these windows: ${window_titles}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns index of all active browser as list.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 442
            },
            {
                "name": "Get Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    }
                ],
                "doc": "<p>Returns information of cookie with <code>name</code> as an object.</p>\n<p>If no cookie is found with <code>name</code>, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path, for example <code>/</code>.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>The domain, the cookie is visible to.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Python datetime object indicating when the cookie expires.</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>Possible attributes outside of the WebDriver specification</td>\n</tr>\n</table>\n<p>See the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a> for details about the cookie information. Notice that <code>expiry</code> is specified as a <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\">datetime object</a>, not as seconds since Unix Epoch like WebDriver natively does.</p>\n<p>In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a>. These other attributes are available in an <code>extra</code> attribute in the cookie object and it contains a dictionary of the other attributes. The <code>extra</code> attribute is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n</tr>\n<tr>\n<td>${cookie} =</td>\n<td><a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a></td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.name}</td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.value}</td>\n<td>bar</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${cookie.expiry.year} &gt; 2017</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns information of cookie with ``name`` as an object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 97
            },
            {
                "name": "Get Cookies",
                "args": [
                    {
                        "name": "as_dict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_dict: bool = False"
                    }
                ],
                "doc": "<p>Returns all cookies of the current page.</p>\n<p>If <code>as_dict</code> argument evaluates as false, see <span class=\"name\">Boolean arguments</span> for more details, then cookie information is returned as a single string in format <code>name1=value1; name2=value2; name3=value3</code>. When <code>as_dict</code> argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.</p>\n<p>The <span class=\"name\">` as_dict</span>` argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Returns all cookies of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 70
            },
            {
                "name": "Get Element Attribute",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    }
                ],
                "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>\n<p>Passing attribute name as part of the <code>locator</code> was removed in SeleniumLibrary 3.2. The explicit <code>attribute</code> argument should be used instead.</p>",
                "shortdoc": "Returns the value of ``attribute`` from the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 396
            },
            {
                "name": "Get Element Count",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the number of elements matching <code>locator</code>.</p>\n<p>If you wish to assert the number of matching elements, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument. Keyword will always return an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td><a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a></td>\n<td>name:div_name</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${count} &gt; 2</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns the number of elements matching ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1102
            },
            {
                "name": "Get Element Size",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns width and height of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both width and height are returned as integers.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height} =</td>\n<td><a href=\"#Get%20Element%20Size\" class=\"name\">Get Element Size</a></td>\n<td>css:div#container</td>\n</tr>\n</table>",
                "shortdoc": "Returns width and height of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 459
            },
            {
                "name": "Get Element Status",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Return dictionary containing element status of:</p>\n<ul>\n<li>visible</li>\n<li>enabled</li>\n<li>disabled</li>\n<li>focused</li>\n</ul>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{res}</td>\n<td>Get Element Status</td>\n<td>class:special</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.visible}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.enabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.disabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.focused}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Return dictionary containing element status of:",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1691
            },
            {
                "name": "Get Horizontal Position",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the horizontal position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the left side of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Vertical%20Position\" class=\"name\">Get Vertical Position</a>.</p>",
                "shortdoc": "Returns the horizontal position of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 445
            },
            {
                "name": "Get List Items",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "values: bool = False"
                    }
                ],
                "doc": "<p>Returns all labels or values of selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Returns visible labels by default, but values can be returned by setting the <code>values</code> argument to a true value (see <span class=\"name\">Boolean arguments</span>).</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${labels} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>mylist</td>\n<td></td>\n</tr>\n<tr>\n<td>${values} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>css:#example select</td>\n<td>values=True</td>\n</tr>\n</table>\n<p>Support to return values is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns all labels or values of selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 27
            },
            {
                "name": "Get Location",
                "args": [],
                "doc": "<p>Returns the current browser window URL.</p>",
                "shortdoc": "Returns the current browser window URL.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 498
            },
            {
                "name": "Get Locations",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs URLs of all windows of the selected browser.</p>\n<p><b>Browser Scope:</b></p>\n<p>The <code>browser</code> argument specifies the browser that shall return its windows information.</p>\n<ul>\n<li><code>browser</code> can be <code>index_or_alias</code> like in <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a>.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>CURRENT</code> (default, case-insensitive) the currently active browser is selected.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>ALL</code> (case-insensitive) the window information of all windows of all opened browsers are returned.</li>\n</ul>",
                "shortdoc": "Returns and logs URLs of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 166
            },
            {
                "name": "Get Selected List Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the label of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the label of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the label of selected option from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 52
            },
            {
                "name": "Get Selected List Labels",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns labels of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns labels of selected options from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 65
            },
            {
                "name": "Get Selected List Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the value of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the value of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value of selected option from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 78
            },
            {
                "name": "Get Selected List Values",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns values of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns values of selected options from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 91
            },
            {
                "name": "Get Selenium Implicit Wait",
                "args": [],
                "doc": "<p>Gets the implicit wait value used by Selenium.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>",
                "shortdoc": "Gets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 620
            },
            {
                "name": "Get Selenium Speed",
                "args": [],
                "doc": "<p>Gets the delay that is waited after each Selenium command.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>",
                "shortdoc": "Gets the delay that is waited after each Selenium command.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 600
            },
            {
                "name": "Get Selenium Timeout",
                "args": [],
                "doc": "<p>Gets the timeout that is used by various keywords.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>",
                "shortdoc": "Gets the timeout that is used by various keywords.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 610
            },
            {
                "name": "Get Session Id",
                "args": [],
                "doc": "<p>Returns the currently active browser session id.</p>\n<p>New in SeleniumLibrary 3.2</p>",
                "shortdoc": "Returns the currently active browser session id.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 480
            },
            {
                "name": "Get Source",
                "args": [],
                "doc": "<p>Returns the entire HTML source of the current page or frame.</p>",
                "shortdoc": "Returns the entire HTML source of the current page or frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 488
            },
            {
                "name": "Get Table Cell",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Returns contents of a table cell.</p>\n<p>The table is located using the <code>locator</code> argument and its cell found using <code>row</code> and <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.</p>\n<p>All <code>&lt;th&gt;</code> and <code>&lt;td&gt;</code> elements anywhere in the table are considered to be cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Returns contents of a table cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 26
            },
            {
                "name": "Get Testability Status",
                "args": [],
                "doc": "<p>Get SeleniumTestability plugin status</p>",
                "shortdoc": "Get SeleniumTestability plugin status",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1718
            },
            {
                "name": "Get Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the text value of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the text value of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 515
            },
            {
                "name": "Get Title",
                "args": [],
                "doc": "<p>Returns the title of the current page.</p>",
                "shortdoc": "Returns the title of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 493
            },
            {
                "name": "Get Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the value attribute of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value attribute of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 506
            },
            {
                "name": "Get Vertical Position",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the vertical position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the top of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Horizontal%20Position\" class=\"name\">Get Horizontal Position</a>.</p>",
                "shortdoc": "Returns the vertical position of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 533
            },
            {
                "name": "Get WebElement",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the first WebElement matching the given <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the first WebElement matching the given ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 33
            },
            {
                "name": "Get WebElements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns a list of WebElement objects matching the <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.</p>",
                "shortdoc": "Returns a list of WebElement objects matching the ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 42
            },
            {
                "name": "Get Window Handles",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns all child window handles of the selected browser as a list.</p>\n<p>Can be used as a list of windows to exclude with <span class=\"name\">Select Window</span>.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>\n<p>Prior to SeleniumLibrary 3.0, this keyword was named <span class=\"name\">List Windows</span>.</p>",
                "shortdoc": "Returns all child window handles of the selected browser as a list.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 130
            },
            {
                "name": "Get Window Identifiers",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs id attributes of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs id attributes of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 142
            },
            {
                "name": "Get Window Names",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs names of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs names of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 150
            },
            {
                "name": "Get Window Position",
                "args": [],
                "doc": "<p>Returns current window position.</p>\n<p>The position is relative to the top left corner of the screen. Returned values are integers. See also <a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x}</td>\n<td>${y}=</td>\n<td><a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a></td>\n</tr>\n</table>",
                "shortdoc": "Returns current window position.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 256
            },
            {
                "name": "Get Window Size",
                "args": [
                    {
                        "name": "inner",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "inner: bool = False"
                    }
                ],
                "doc": "<p>Returns current window width and height as integers.</p>\n<p>See also <a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a>.</p>\n<p>If <code>inner</code> parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See <span class=\"name\">Boolean arguments</span> for more details on how to set boolean arguments. The <code>inner</code> is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Returns current window width and height as integers.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 190
            },
            {
                "name": "Get Window Titles",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs titles of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs titles of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 158
            },
            {
                "name": "Go Back",
                "args": [],
                "doc": "<p>Simulates the user clicking the back button on their browser.</p>",
                "shortdoc": "Simulates the user clicking the back button on their browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 584
            },
            {
                "name": "Go To",
                "args": [
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    }
                ],
                "doc": "<p>Navigates the current browser window to the provided <code>url</code>.</p>",
                "shortdoc": "Navigates the current browser window to the provided ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 589
            },
            {
                "name": "Handle Alert",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Handles the current alert and returns its message.</p>\n<p>By default, the alert is accepted, but this can be controlled with the <code>action</code> argument that supports the following case-insensitive values:</p>\n<ul>\n<li><code>ACCEPT</code>: Accept the alert i.e. press <code>Ok</code>. Default.</li>\n<li><code>DISMISS</code>: Dismiss the alert i.e. press <code>Cancel</code>.</li>\n<li><code>LEAVE</code>: Leave the alert open.</li>\n</ul>\n<p>The <code>timeout</code> argument specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Handle Alert</td>\n<td></td>\n<td></td>\n<td># Accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>action=DISMISS</td>\n<td></td>\n<td># Dismiss alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>timeout=10 s</td>\n<td></td>\n<td># Use custom timeout and accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>DISMISS</td>\n<td>1 min</td>\n<td># Use custom timeout and dismiss alert.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td></td>\n<td># Accept alert and get its message.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td>LEAVE</td>\n<td># Leave alert open and get its message.</td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Handles the current alert and returns its message.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 104
            },
            {
                "name": "Highlight Elements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "width",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "2px",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width: str = 2px"
                    },
                    {
                        "name": "style",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "dotted",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "style: str = dotted"
                    },
                    {
                        "name": "color",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "blue",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "color: str = blue"
                    }
                ],
                "doc": "<p>Highlight all matching elements by locator.</p>\n<p>Highlighting is done by adding a colored outline around the elements with CSS styling.</p>\n<p><code>locator</code>  element locator <code>width</code>    highlight outline width <code>style</code>    highlight outline style <code>color</code>    highlight outline color</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Highlight Elements</td>\n<td><a href=\"xpath://h2\">xpath://h2</a></td>\n</tr>\n</table>",
                "shortdoc": "Highlight all matching elements by locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1783
            },
            {
                "name": "Input Password",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given password into the text field identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See <a href=\"#Input%20Text\" class=\"name\">Input Text</a> for <code>clear</code> argument details.</p>\n<p>Difference compared to <a href=\"#Input%20Text\" class=\"name\">Input Text</a> is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>password</td>\n</tr>\n</table>\n<p>the password is shown as a normal keyword argument. A way to avoid that is using variables like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>${PASSWORD}</td>\n</tr>\n</table>\n<p>Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.</p>\n<p>The <span class=\"name\">clear</span> argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Types the given password into the text field identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 242
            },
            {
                "name": "Input Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given <code>text</code> into the text field identified by <code>locator</code>.</p>\n<p>When <code>clear</code> is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use <a href=\"#Input%20Password\" class=\"name\">Input Password</a> if you do not want the given <code>text</code> to be logged.</p>\n<p>If <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> is used and the <code>text</code> argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the <code>text</code> string as is to the element. If a file should be transferred to the hub and upload should be performed, please use <a href=\"#Choose%20File\" class=\"name\">Choose File</a> keyword.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See the <span class=\"name\">Boolean arguments</span> section how Boolean values are handled.</p>\n<p>Disabling the file upload the Selenium Grid node and the <span class=\"name\">clear</span> argument are new in SeleniumLibrary 4.0</p>",
                "shortdoc": "Types the given ``text`` into the text field identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 272
            },
            {
                "name": "Input Text Into Alert",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Types the given <code>text</code> into an input field in an alert.</p>\n<p>The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Types the given ``text`` into an input field in an alert.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 34
            },
            {
                "name": "Input Text When Element Is Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Input text into locator after it has become visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>text</code> insert text to locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Input Text When Element Is Visible</td>\n<td>//input[@id=\"freetext\"]</td>\n<td>my feedback</td>\n</tr>\n</table>",
                "shortdoc": "Input text into locator after it has become visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1020
            },
            {
                "name": "Is Alert Present",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    }
                ],
                "doc": "<p>Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.</p>\n<p>Other possible actions are DISMISS and LEAVE.</p>\n<p><code>text</code> check if alert text is matching to this, if <span class=\"name\">None</span> will check if alert is present at all</p>\n<p><code>action</code> possible action if alert is present, default ACCEPT</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Alert Present</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1128
            },
            {
                "name": "Is Checkbox Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Is checkbox selected</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Checkbox Selected</td>\n<td>id:taxes-paid</td>\n</tr>\n</table>",
                "shortdoc": "Is checkbox selected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1187
            },
            {
                "name": "Is Element Attribute Equal To",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is element attribute equal to expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>attribute</code> element attribute to check for</p>\n<p><code>expected</code> is attribute value equal to this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Attribute Equal To</td>\n<td>h1</td>\n<td>id</td>\n<td>main</td>\n</tr>\n</table>",
                "shortdoc": "Is element attribute equal to expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1108
            },
            {
                "name": "Is Element Disabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element disabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Disabled</td>\n<td>//input[@type=\"submit\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element disabled",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1072
            },
            {
                "name": "Is Element Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element enabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Enabled</td>\n<td>input.field1</td>\n</tr>\n</table>",
                "shortdoc": "Is element enabled",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1036
            },
            {
                "name": "Is Element Focused",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element focused</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Focused</td>\n<td>//input[@id=\"freetext\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element focused",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1090
            },
            {
                "name": "Is Element Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Is element text expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Is element text expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1241
            },
            {
                "name": "Is Element Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element visible</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Visible</td>\n<td>id:confirmation</td>\n</tr>\n</table>",
                "shortdoc": "Is element visible",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1054
            },
            {
                "name": "Is List Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Is any option selected in the</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selected</td>\n<td>id:cars</td>\n</tr>\n</table>",
                "shortdoc": "Is any option selected in the",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1281
            },
            {
                "name": "Is List Selection",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*expected: str"
                    }
                ],
                "doc": "<p>Is list selected with expected values</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected selected options</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selection</td>\n<td>id:cars</td>\n<td>Ford</td>\n</tr>\n</table>",
                "shortdoc": "Is list selected with expected values",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1265
            },
            {
                "name": "Is Location",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    }
                ],
                "doc": "<p>Is current URL expected url</p>\n<p><code>url</code> expected current URL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Location</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Is current URL expected url",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1296
            },
            {
                "name": "Is Radio Button Selected",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    }
                ],
                "doc": "<p>Is any radio button selected in the button group</p>\n<p><code>group_name</code> radio button group name</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Selected</td>\n<td>group_name=gender</td>\n</tr>\n</table>",
                "shortdoc": "Is any radio button selected in the button group",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1472
            },
            {
                "name": "Is Radio Button Set To",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Is radio button group set to expected value</p>\n<p><code>group_name</code> radio button group name</p>\n<p><code>value</code> expected value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Set To</td>\n<td>group_name=gender</td>\n<td>value=female</td>\n</tr>\n</table>",
                "shortdoc": "Is radio button group set to expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1456
            },
            {
                "name": "Is Textarea Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is textarea matching expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textarea value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textarea Value</td>\n<td>//textarea</td>\n<td>Yours sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Is textarea matching expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1597
            },
            {
                "name": "Is Textfield Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is textfield value expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textfield value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textfield Value</td>\n<td>id:lname</td>\n<td>Lastname</td>\n</tr>\n</table>",
                "shortdoc": "Is textfield value expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1645
            },
            {
                "name": "Is Title",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    }
                ],
                "doc": "<p>Is page title expected</p>\n<p><code>title</code> expected title value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Title</td>\n<td>Webpage title text</td>\n</tr>\n</table>",
                "shortdoc": "Is page title expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1661
            },
            {
                "name": "List Selection Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*expected: str"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has <code>expected</code> options selected.</p>\n<p>It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.</p>\n<p>If no expected options are given, validates that the list has no selections. A more explicit alternative is using <a href=\"#List%20Should%20Have%20No%20Selections\" class=\"name\">List Should Have No Selections</a>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>gender</td>\n<td>Female</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>interests</td>\n<td>Test Automation</td>\n<td>Python</td>\n</tr>\n</table>",
                "shortdoc": "Verifies selection list ``locator`` has ``expected`` options selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 104
            },
            {
                "name": "List Should Have No Selections",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has no options selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` has no options selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 141
            },
            {
                "name": "Location Should Be",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current URL is exactly <code>url</code>.</p>\n<p>The <code>url</code> argument contains the exact url that should exist in browser.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL is exactly ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 503
            },
            {
                "name": "Location Should Contain",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL contains ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 521
            },
            {
                "name": "Log Location",
                "args": [],
                "doc": "<p>Logs and returns the current browser window URL.</p>",
                "shortdoc": "Logs and returns the current browser window URL.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 542
            },
            {
                "name": "Log Source",
                "args": [
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "INFO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = INFO"
                    }
                ],
                "doc": "<p>Logs and returns the HTML source of the current page or frame.</p>\n<p>The <code>loglevel</code> argument defines the used log level. Valid log levels are <code>WARN</code>, <code>INFO</code> (default), <code>DEBUG</code>, <code>TRACE</code> and <code>NONE</code> (no logging).</p>",
                "shortdoc": "Logs and returns the HTML source of the current page or frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 549
            },
            {
                "name": "Log Title",
                "args": [],
                "doc": "<p>Logs and returns the title of the current page.</p>",
                "shortdoc": "Logs and returns the title of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 561
            },
            {
                "name": "Maximize Browser Window",
                "args": [],
                "doc": "<p>Maximizes current browser window.</p>",
                "shortdoc": "Maximizes current browser window.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 185
            },
            {
                "name": "Mouse Down",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates pressing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element is pressed without releasing the mouse button.</p>\n<p>See also the more specific keywords <a href=\"#Mouse%20Down%20On%20Image\" class=\"name\">Mouse Down On Image</a> and <a href=\"#Mouse%20Down%20On%20Link\" class=\"name\">Mouse Down On Link</a>.</p>",
                "shortdoc": "Simulates pressing the left mouse button on the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 797
            },
            {
                "name": "Mouse Down On Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates a mouse down event on an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>",
                "shortdoc": "Simulates a mouse down event on an image identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1052
            },
            {
                "name": "Mouse Down On Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates a mouse down event on a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>",
                "shortdoc": "Simulates a mouse down event on a link identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1002
            },
            {
                "name": "Mouse Out",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates moving the mouse away from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates moving the mouse away from the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 816
            },
            {
                "name": "Mouse Over",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates hovering the mouse over the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates hovering the mouse over the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 835
            },
            {
                "name": "Mouse Up",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates releasing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates releasing the left mouse button on the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 849
            },
            {
                "name": "Open Available Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "use_profile",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_profile: bool = False"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: Any = AUTO"
                    },
                    {
                        "name": "maximized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "maximized: bool = False"
                    },
                    {
                        "name": "browser_selection",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser_selection: Any = AUTO"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "profile_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_name: str | None = None"
                    },
                    {
                        "name": "profile_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_path: str | None = None"
                    },
                    {
                        "name": "preferences",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "preferences: dict | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: str | None = None"
                    },
                    {
                        "name": "user_agent",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user_agent: str | None = None"
                    },
                    {
                        "name": "download",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "download: Any = AUTO"
                    }
                ],
                "doc": "<p>Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.</p>\n<p>Optionally can be given a <code>url</code> as the first argument, to open the browser directly to the given page.</p>\n<p>Returns either a generated index or a custom <code>alias</code> for the browser instance. The returned value can be used to refer to that specific browser instance in other keywords.</p>\n<p>If the browser should start in a maximized window, this can be enabled with the argument <code>maximized</code>, but is disabled by default.</p>\n<p>For certain applications it might also be required to force a certain user-agent string for Selenium, which can be overriden with the <code>user_agent</code> argument.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${index}=</td>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>browser_selection=opera,firefox</td>\n</tr>\n<tr>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>headless=True</td>\n<td>alias=HeadlessBrowser</td>\n</tr>\n</table>\n<h3>Browser order</h3>\n<p>The default order of supported browsers is based on the operating system and is as follows:</p>\n<table border=\"1\">\n<tr>\n<td>Platform</td>\n<td>Default order</td>\n</tr>\n<tr>\n<td><code>Windows</code> |\u00a0Chrome, Firefox, Edge, IE, Opera</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Linux</code>   |\u00a0Chrome, Firefox, Opera</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Darwin</code>  |\u00a0Chrome, Safari, Firefox, Opera</td>\n<td></td>\n</tr>\n</table>\n<p>The order can be overriden with a custom list by using the argument <code>browser_selection</code>. The argument can be either a comma-separated string or a list object.</p>\n<h3>Webdriver download</h3>\n<p>The library can (if requested) automatically download webdrivers for all supported browsers. This can be controlled with the argument <code>download</code>.</p>\n<p>If the value is <code>False</code>, it will only attempt to start webdrivers found from the system PATH.</p>\n<p>If the value is <code>True</code>, it will download a webdriver that matches the current browser.</p>\n<p>By default the argument has the value <code>AUTO</code>, which means it first attempts to use webdrivers found in PATH and if that fails forces a webdriver download.</p>\n<h3>Opening process</h3>\n<p>1. Parse list of preferred browser order. If not given, use values from above table.</p>\n<p>2. Loop through listed browsers:</p>\n<p>a. Set the webdriver options for the browser.</p>\n<p>b. Download webdriver (if requested).</p>\n<p>c. Attempt to launch the webdriver and stop the loop if successful.</p>\n<p>3. Return index/alias if webdriver was created, or raise an exception if no browsers were successfully opened.</p>\n<h3>Headless mode</h3>\n<p>If required, the browser can also run <span class=\"name\">headless</span>, which means that it does not create a visible window. Generally a headless browser is slightly faster, but might not support all features a normal browser does.</p>\n<p>One typical use-case for headless mode is in cloud containers, where there is no display available. It also prevents manual interaction with the browser, which can be either a benefit or a drawback depending on the context.</p>\n<p>It can be explicitly enabled or disabled with the argument <code>headless</code>. By default it will be disabled, unless it detects that it is running in a Linux environment without a display, i.e. a container.</p>\n<h3>Chrome options</h3>\n<p>Some features are currently available only for Chrome/Chromium. This includes using an existing user profile. By default Selenium uses a new profile for each session, but it can use an existing one by enabling the <code>use_profile</code> argument.</p>\n<p>If a custom profile is stored somewhere outside of the default location, the path to the profiles directory and the name of the profile can be controlled with <code>profile_path</code> and <code>profile_name</code> respectively.</p>\n<p>Profile preferences can be further overriden with the <code>preferences</code> argument by giving a dictionary of key/value pairs.</p>\n<p>Chrome can additionally connect through a <code>proxy</code>, which should be given as either local or remote address.</p>",
                "shortdoc": "Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 451
            },
            {
                "name": "Open Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "firefox",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = firefox"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "remote_url",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "remote_url: bool | str = False"
                    },
                    {
                        "name": "desired_capabilities",
                        "types": [
                            "dict",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "desired_capabilities: dict | None | str = None"
                    },
                    {
                        "name": "ff_profile_dir",
                        "types": [
                            "FirefoxProfile",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ff_profile_dir: FirefoxProfile | str | None = None"
                    },
                    {
                        "name": "options",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "options: Any | None = None"
                    },
                    {
                        "name": "service_log_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_log_path: str | None = None"
                    },
                    {
                        "name": "executable_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "executable_path: str | None = None"
                    }
                ],
                "doc": "<p>Opens a new browser instance to the optional <code>url</code>.</p>\n<p>The <code>browser</code> argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>firefox, ff</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>googlechrome, chrome, gc</td>\n</tr>\n<tr>\n<td>Headless Firefox</td>\n<td>headlessfirefox</td>\n</tr>\n<tr>\n<td>Headless Chrome</td>\n<td>headlesschrome</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>internetexplorer, ie</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>edge</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>safari</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>opera</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>android</td>\n</tr>\n<tr>\n<td>Iphone</td>\n<td>iphone</td>\n</tr>\n<tr>\n<td>PhantomJS</td>\n<td>phantomjs</td>\n</tr>\n<tr>\n<td>HTMLUnit</td>\n<td>htmlunit</td>\n</tr>\n<tr>\n<td>HTMLUnit with Javascript</td>\n<td>htmlunitwithjs</td>\n</tr>\n</table>\n<p>To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the <a href=\"https://github.com/robotframework/SeleniumLibrary#browser-drivers\">project documentation</a> for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.</p>\n<p>After opening the browser, it is possible to use optional <code>url</code> to navigate the browser to the desired address.</p>\n<p>Optional <code>alias</code> is an alias given for this browser instance and it can be used for switching between browsers. When same <code>alias</code> is given with two <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The <code>alias</code> definition overrules <code>browser</code> definition. When same <code>alias</code> is used but a different <code>browser</code> is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> is called. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>Optional <code>remote_url</code> is the URL for a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Optional <code>desired_capabilities</code> can be used to configure, for example, logging preferences for a browser or a browser and operating system when using <a href=\"http://saucelabs.com\">Sauce Labs</a>. Desired capabilities can be given either as a Python dictionary or as a string in the format <code>key1:value1,key2:value2</code>. <a href=\"https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities\">Selenium documentation</a> lists possible capabilities that can be enabled.</p>\n<p>Optional <code>ff_profile_dir</code> is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The <code>ff_profile_dir</code> can also be an instance of the <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html\">selenium.webdriver.FirefoxProfile</a> . As a third option, it is possible to use <span class=\"name\">FirefoxProfile</span> methods and attributes to define the profile using methods and attributes in the same way as with <code>options</code> argument. Example: It is possible to use FirefoxProfile <span class=\"name\">set_preference</span> to define different profile settings. See <code>options</code> argument documentation in below how to handle backslash escaping.</p>\n<p>Optional <code>options</code> argument allows defining browser specific Selenium options. Example for Chrome, the <code>options</code> argument allows defining the following <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">methods and attributes</a> and for Firefox these <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options\">methods and attributes</a> are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If <code>browser</code> argument is <span class=\"name\">android</span> then <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> is used. Selenium options are also supported, when <code>remote_url</code> argument is used.</p>\n<p>The SeleniumLibrary <code>options</code> argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.</p>\n<p>The string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: <span class=\"name\">add_argument(\"--headless\")</span> or <span class=\"name\">add_experimental_option(\"key\", \"value\")</span>. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, <span class=\"name\">headless=True</span>. Multiple methods and attributes must be separated by a semicolon. Example: <span class=\"name\">add_argument(\"--headless\");add_argument(\"--start-maximized\")</span>.</p>\n<p>Arguments allow defining Python data types and arguments are evaluated by using Python <a href=\"https://docs.python.org/3/library/ast.html#ast.literal_eval\">ast.literal_eval</a>. Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example <span class=\"name\">True</span> or <span class=\"name\">None</span>, by not using quotes around the arguments.</p>\n<p>The string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example <span class=\"name\">add_argument ( \"--headless\" )</span> is same as <span class=\"name\">add_argument(\"--headless\")</span>. But <span class=\"name\">add_argument(\" --headless \")</span> is not same same as <span class=\"name\">add_argument ( \"--headless\" )</span>, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\">raw strings</a> and example write: r\"C:\\\\path\\\\to\\\\profile\".</p>\n<p>As last format, <code>options</code> argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to <span class=\"name\">${options}</span> variable in the Robot Framework data:</p>\n<pre>\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n</pre>\n<p>Then the <span class=\"name\">${options}</span> variable can be used as an argument to <code>options</code>.</p>\n<p>Example the <code>options</code> argument can be used to launch Chomium-based applications which utilize the <a href=\"https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver\">Chromium Embedded Framework</a> . To lauch Chomium-based application, use <code>options</code> to define <span class=\"name\">binary_location</span> attribute and use <span class=\"name\">add_argument</span> method to define <span class=\"name\">remote-debugging-port</span> port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.</p>\n<p>Optional <code>service_log_path</code> argument defines the name of the file where to write the browser driver logs. If the <code>service_log_path</code>  argument contain a  marker <code>{index}</code>, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>Optional <code>executable_path</code> argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\">$PATH</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>alias=Firefox</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Edge</td>\n<td>remote_url=http://127.0.0.1:4444/wd/hub</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>about:blank</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>browser=Chrome</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Alias examples:</p>\n<table border=\"1\">\n<tr>\n<td>${1_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Opens new browser because alias is new.</td>\n</tr>\n<tr>\n<td>${2_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td></td>\n<td># Opens new browser because alias is not defined.</td>\n</tr>\n<tr>\n<td>${3_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>${4_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=${1_index}</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${3_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${4_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${2_index}</td>\n<td>${2}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Example when using <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> method:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")</td>\n<td># Sting format.</td>\n</tr>\n<tr>\n<td>${options} =</td>\n<td>Get Options</td>\n<td></td>\n<td></td>\n<td># Selenium options instance.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=${options}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")</td>\n<td># Start Chomium-based application.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"</td>\n<td># Windows OS path escaping.</td>\n</tr>\n</table>\n<p>Example for FirefoxProfile</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=/path/to/profile</td>\n<td># Using profile from disk.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=${FirefoxProfile_instance}</td>\n<td># Using instance of FirefoxProfile.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")</td>\n<td># Defining profile using FirefoxProfile mehtods.</td>\n</tr>\n</table>\n<p>If the provided configuration options are not enough, it is possible to use <a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a> to customize browser initialization even more.</p>\n<p>Applying <code>desired_capabilities</code> argument also for local browser is new in SeleniumLibrary 3.1.</p>\n<p>Using <code>alias</code> to decide, is the new browser opened is new in SeleniumLibrary 4.0. The <code>options</code> and <code>service_log_path</code> are new in SeleniumLibrary 4.0. Support for <code>ff_profile_dir</code> accepting an instance of the <span class=\"name\">selenium.webdriver.FirefoxProfile</span> and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0.</p>\n<p>Making <code>url</code> optional is new in SeleniumLibrary 4.1.</p>\n<p>The <code>executable_path</code> argument is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Opens a new browser instance to the optional ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 60
            },
            {
                "name": "Open Chrome Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "use_profile",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_profile: bool = False"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: bool = False"
                    },
                    {
                        "name": "maximized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "maximized: bool = False"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "profile_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_name: str | None = None"
                    },
                    {
                        "name": "profile_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_path: str | None = None"
                    },
                    {
                        "name": "preferences",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "preferences: dict | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: str | None = None"
                    },
                    {
                        "name": "user_agent",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user_agent: str | None = None"
                    }
                ],
                "doc": "<p>Open Chrome browser. See <code>Open Available Browser</code> for descriptions of arguments.</p>",
                "shortdoc": "Open Chrome browser. See ``Open Available Browser`` for descriptions of arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 843
            },
            {
                "name": "Open Context Menu",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Opens the context menu on the element identified by <code>locator</code>.</p>",
                "shortdoc": "Opens the context menu on the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 862
            },
            {
                "name": "Open Headless Chrome Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    }
                ],
                "doc": "<p>Open Chrome browser in headless mode.</p>\n<p><code>url</code> URL to open</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${idx}</td>\n<td>Open Headless Chrome Browser</td>\n<td><a href=\"https://www.google.com\">https://www.google.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Open Chrome browser in headless mode.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 898
            },
            {
                "name": "Open User Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "tab",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tab=True"
                    }
                ],
                "doc": "<p>Open URL with user's default browser</p>\n<p>The browser opened with this keyword is not accessible with selenium. To interact with the opened browser it is possible to use <code>Desktop</code> library keywords.</p>\n<p>The keyword <a href=\"#Attach%20Chrome%20Browser\" class=\"name\">Attach Chrome Browser</a> can be used to access already open browser with selenium keywords.</p>\n<p>Read more: <a href=\"https://robocorp.com/docs/development-guide/browser/how-to-attach-to-running-chrome-browser\">https://robocorp.com/docs/development-guide/browser/how-to-attach-to-running-chrome-browser</a></p>\n<p><code>url</code> URL to open <code>tab</code> defines is url is opened in a tab (default <span class=\"name\">True</span>) or in new window (<span class=\"name\">False</span>)</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td></td>\n</tr>\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td>tab=False</td>\n</tr>\n</table>",
                "shortdoc": "Open URL with user's default browser",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1723
            },
            {
                "name": "Page Should Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that current page contains <code>text</code>.</p>\n<p>If this keyword fails, it automatically logs the page source using the log level specified with the optional <code>loglevel</code> argument. Valid log levels are <code>DEBUG</code>, <code>INFO</code> (default), <code>WARN</code>, and <code>NONE</code>. If the log level is <code>NONE</code> or below the current active log level the source will not be logged.</p>",
                "shortdoc": "Verifies that current page contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 128
            },
            {
                "name": "Page Should Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 430
            },
            {
                "name": "Page Should Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is found from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 70
            },
            {
                "name": "Page Should Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> is found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <code>None</code> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Examples assumes that locator matches to two elements.</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=1</td>\n<td># Keyword fails.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=2</td>\n<td># Keyword passes.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=none</td>\n<td># None is considered one or more.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n</table>\n<p>The <code>limit</code> argument is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element ``locator`` is found on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 145
            },
            {
                "name": "Page Should Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1066
            },
            {
                "name": "Page Should Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1016
            },
            {
                "name": "Page Should Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 159
            },
            {
                "name": "Page Should Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 132
            },
            {
                "name": "Page Should Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 300
            },
            {
                "name": "Page Should Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies the current page does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies the current page does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 193
            },
            {
                "name": "Page Should Not Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 451
            },
            {
                "name": "Page Should Not Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is not found from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 87
            },
            {
                "name": "Page Should Not Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> is not found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies that element ``locator`` is not found on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 205
            },
            {
                "name": "Page Should Not Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1084
            },
            {
                "name": "Page Should Not Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1034
            },
            {
                "name": "Page Should Not Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 176
            },
            {
                "name": "Page Should Not Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 150
            },
            {
                "name": "Page Should Not Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 317
            },
            {
                "name": "Press Key",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<p><b>DEPRECATED in SeleniumLibrary 4.0.</b> use <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> instead.</p>",
                "shortdoc": "*DEPRECATED in SeleniumLibrary 4.0.* use `Press Keys` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 896
            },
            {
                "name": "Press Keys",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: WebElement | None | str = None"
                    },
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*keys: str"
                    }
                ],
                "doc": "<p>Simulates the user pressing key(s) to an element or on the active browser.</p>\n<p>If <code>locator</code> evaluates as false, see <span class=\"name\">Boolean arguments</span> for more details, then the <code>keys</code> are sent to the currently active browser. Otherwise element is searched and <code>keys</code> are send to the element identified by the <code>locator</code>. In later case, keyword fails if element is not found. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>keys</code> arguments can contain one or many strings, but it can not be empty. <code>keys</code> can also be a combination of <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\">Selenium Keys</a> and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the <span class=\"name\">+</span> character, like in <span class=\"name\">CONTROL+c</span>. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string <span class=\"name\">AALTO</span> and <span class=\"name\">ALT</span> not parsed inside of the string. But <span class=\"name\">A+ALT+O</span> would found Selenium ALT key from the <code>keys</code> argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.</p>\n<p>If Selenium Keys are detected in the <code>keys</code> argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with <span class=\"name\">+</span> character, example <span class=\"name\">E+N+D</span>.</p>\n<p><span class=\"name\">CTRL</span> is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL\">Selenium CONTROL</a> and ESC is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE\">Selenium ESCAPE</a></p>\n<p>New in SeleniumLibrary 3.3</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>AAAAA</td>\n<td></td>\n<td># Sends string \"AAAAA\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>None</td>\n<td>BBBBB</td>\n<td></td>\n<td># Sends string \"BBBBB\" to currently active browser.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>E+N+D</td>\n<td></td>\n<td># Sends string \"END\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX</td>\n<td>YY</td>\n<td># Sends strings \"XXX\" and \"YY\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX+YY</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT+ARROW_DOWN</td>\n<td></td>\n<td># Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT</td>\n<td>ARROW_DOWN</td>\n<td># Pressing \"ALT\" key and then pressing ARROW_DOWN.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>CTRL+c</td>\n<td></td>\n<td># Pressing CTRL key down, sends string \"c\" and then releases CTRL key.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>button</td>\n<td>RETURN</td>\n<td></td>\n<td># Pressing \"ENTER\" key to element.</td>\n</tr>\n</table>",
                "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 904
            },
            {
                "name": "Print To Pdf",
                "args": [
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "params",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params: dict | None = None"
                    }
                ],
                "doc": "<p>Print the current page to a PDF document using Chromium devtools.</p>\n<p>For supported parameters see: <a href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF\">https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF</a></p>\n<p><code>output_path</code> filepath for the generated pdf. By default it is saved to the output folder with name <span class=\"name\">out.pdf</span>.</p>\n<p><code>params</code> parameters for the Chrome print method. By default uses values:</p>\n<p><code>{ \"landscape\": False, \"displayHeaderFooter\": False, \"printBackground\": True, \"preferCSSPageSize\": True, }</code></p>",
                "shortdoc": "Print the current page to a PDF document using Chromium devtools.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1846
            },
            {
                "name": "Radio Button Should Be Set To",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> is set to <code>value</code>.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group ``group_name`` is set to ``value``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 168
            },
            {
                "name": "Radio Button Should Not Be Selected",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    }
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> has no selection.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group ``group_name`` has no selection.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 183
            },
            {
                "name": "Register Keyword To Run On Failure",
                "args": [
                    {
                        "name": "keyword",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword: str | None"
                    }
                ],
                "doc": "<p>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NOTHING</code> or <code>NONE</code>, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>Log Source</td>\n<td></td>\n</tr>\n<tr>\n<td>${previous kw}=</td>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>NONE</td>\n</tr>\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>${previous kw}</td>\n<td></td>\n</tr>\n</table>\n<p>Changes in SeleniumLibrary 3.0:</p>\n<ul>\n<li>Possible to use string <code>NONE</code> or Python <code>None</code> to disable the functionality.</li>\n<li>Return Python <code>None</code> when the functionality was disabled earlier. In previous versions special value <code>No Keyword</code> was returned and it could not be used to restore the original state.</li>\n</ul>",
                "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\runonfailure.py",
                "lineno": 23
            },
            {
                "name": "Reload Page",
                "args": [],
                "doc": "<p>Simulates user reloading page.</p>",
                "shortdoc": "Simulates user reloading page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 595
            },
            {
                "name": "Remove Location Strategy",
                "args": [
                    {
                        "name": "strategy_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_name: str"
                    }
                ],
                "doc": "<p>Removes a previously added custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies.</p>",
                "shortdoc": "Removes a previously added custom location strategy.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1135
            },
            {
                "name": "Screenshot",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | None = None"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = "
                    }
                ],
                "doc": "<p>Capture page and/or element screenshot.</p>\n<p><code>locator</code> if defined, take element screenshot, if not takes page screenshot</p>\n<p><code>filename</code> filename for the screenshot, by default creates file <span class=\"name\">screenshot-timestamp-element/page.png</span> if set to <span class=\"name\">None</span> then file is not saved at all</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td>filename=locator.png</td>\n<td># element screenshot, defined filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>filename=page.png</td>\n<td></td>\n<td># page screenshot, defined filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>filename=${NONE}</td>\n<td></td>\n<td># page screenshot, NO file will be created</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td></td>\n<td></td>\n<td># page screenshot, default filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td></td>\n<td># element screenshot, default filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td>filename=${CURDIR}/subdir/loc.png</td>\n<td># element screenshot, create dirs if not existing</td>\n</tr>\n</table>",
                "shortdoc": "Capture page and/or element screenshot.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 910
            },
            {
                "name": "Scroll Element Into View",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Scrolls the element identified by <code>locator</code> into view.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.2.0</p>",
                "shortdoc": "Scrolls the element identified by ``locator`` into view.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 739
            },
            {
                "name": "Select All From List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Selects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects all options from multi-selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 193
            },
            {
                "name": "Select Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Selects the checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if checkbox is already selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects the checkbox identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 104
            },
            {
                "name": "Select Frame",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Sets frame identified by <code>locator</code> as the current frame.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Works both with frames and iframes. Use <a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a> to cancel the frame selection and return to the main frame.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>top-frame</td>\n<td># Select frame with id or name 'top-frame'</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Click link 'example' in the selected frame</td>\n</tr>\n<tr>\n<td><a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a></td>\n<td></td>\n<td># Back to main frame.</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>//iframe[@name='xxx']</td>\n<td># Select frame using xpath</td>\n</tr>\n</table>",
                "shortdoc": "Sets frame identified by ``locator`` as the current frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 25
            },
            {
                "name": "Select From List By Index",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "indexes",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*indexes: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``indexes``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 209
            },
            {
                "name": "Select From List By Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "labels",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*labels: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``labels``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 256
            },
            {
                "name": "Select From List By Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*values: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``values``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 234
            },
            {
                "name": "Select Radio Button",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Sets the radio button group <code>group_name</code> to <code>value</code>.</p>\n<p>The radio button to be selected is located by two arguments:</p>\n<ul>\n<li><code>group_name</code> is the name of the radio button group.</li>\n<li><code>value</code> is the <code>id</code> or <code>value</code> attribute of the actual radio button.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>size</td>\n<td>XL</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>contact</td>\n<td>email</td>\n</tr>\n</table>",
                "shortdoc": "Sets the radio button group ``group_name`` to ``value``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 198
            },
            {
                "name": "Set Browser Implicit Wait",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>Same as <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> but only affects the current browser.</p>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 698
            },
            {
                "name": "Set Download Directory",
                "args": [
                    {
                        "name": "directory",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "directory: str | None = None"
                    },
                    {
                        "name": "download_pdf",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "download_pdf: bool = True"
                    }
                ],
                "doc": "<p>Set browser download directory</p>\n<p><code>directory</code>    target directory for downloads, defaults to None which means that setting is removed <code>download_pdf</code> if <span class=\"name\">True</span> then PDF is downloaded instead of shown with browser's internal viewer</p>",
                "shortdoc": "Set browser download directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1759
            },
            {
                "name": "Set Focus To Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Sets the focus to the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Focus</span>.</p>",
                "shortdoc": "Sets the focus to the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 727
            },
            {
                "name": "Set Screenshot Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: None | str"
                    }
                ],
                "doc": "<p>Sets the directory for captured screenshots.</p>\n<p><code>path</code> argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when <a href=\"#Importing\" class=\"name\">importing</a> the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>path</code> equals to EMBED (case insensitive) and <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> or <a href=\"#Capture%20Element%20Screenshot\" class=\"name\">capture Element Screenshot</a> keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Sets the directory for captured screenshots.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 32
            },
            {
                "name": "Set Selenium Implicit Wait",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>This keyword sets the implicit wait for all opened browsers. Use <a href=\"#Set%20Browser%20Implicit%20Wait\" class=\"name\">Set Browser Implicit Wait</a> to set it only to the current browser.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig wait} =</td>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>10 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Perform AJAX call that is slow</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>${orig wait}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 672
            },
            {
                "name": "Set Selenium Speed",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the delay that is waited after each Selenium command.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium Speed</a></td>\n<td>0.5 seconds</td>\n</tr>\n</table>",
                "shortdoc": "Sets the delay that is waited after each Selenium command.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 630
            },
            {
                "name": "Set Selenium Timeout",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the timeout that is used by various keywords.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>15 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>${orig timeout}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the timeout that is used by various keywords.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 650
            },
            {
                "name": "Set Window Position",
                "args": [
                    {
                        "name": "x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "x: int"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "y: int"
                    }
                ],
                "doc": "<p>Sets window position using <code>x</code> and <code>y</code> coordinates.</p>\n<p>The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a></td>\n<td>100</td>\n<td>200</td>\n</tr>\n</table>",
                "shortdoc": "Sets window position using ``x`` and ``y`` coordinates.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 269
            },
            {
                "name": "Set Window Size",
                "args": [
                    {
                        "name": "width",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "width: int"
                    },
                    {
                        "name": "height",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "height: int"
                    },
                    {
                        "name": "inner",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "inner: bool = False"
                    }
                ],
                "doc": "<p>Sets current windows size to given <code>width</code> and <code>height</code>.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a>.</p>\n<p>Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.</p>\n<p>If <code>inner</code> parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM <i>window.innerWidth</i> and <i>window.innerHeight</i>. See <span class=\"name\">Boolean arguments</span> for more details on how to set boolean arguments.</p>\n<p>The <code>inner</code> argument is new since SeleniumLibrary 4.0.</p>\n<p>This <code>inner</code> argument does not support Frames. If a frame is selected, switch to default before running this.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Sets current windows size to given ``width`` and ``height``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 212
            },
            {
                "name": "Simulate Event",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "event",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "event: str"
                    }
                ],
                "doc": "<p>Simulates <code>event</code> on the element identified by <code>locator</code>.</p>\n<p>This keyword is useful if element has <code>OnEvent</code> handler that needs to be explicitly invoked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Simulate</span>.</p>",
                "shortdoc": "Simulates ``event`` on the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 871
            },
            {
                "name": "Submit Form",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: WebElement | None | str = None"
                    }
                ],
                "doc": "<p>Submits a form identified by <code>locator</code>.</p>\n<p>If <code>locator</code> is not given, first form on the page is submitted.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Submits a form identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 29
            },
            {
                "name": "Switch Browser",
                "args": [
                    {
                        "name": "index_or_alias",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "index_or_alias: str"
                    }
                ],
                "doc": "<p>Switches between active browsers using <code>index_or_alias</code>.</p>\n<p>Indices are returned by the <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword and aliases can be given to it explicitly. Indices start from 1.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td>ff</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td>ie</td>\n<td>alias=second</td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>1</td>\n<td># index</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>I'm feeling lucky</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>second</td>\n<td># alias</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>More Yahoo!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Above example expects that there was no other open browsers when opening the first one because it used index <code>1</code> when switching to it later. If you are not sure about that, you can store the index into a variable as below.</p>\n<table border=\"1\">\n<tr>\n<td>${index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n</tr>\n<tr>\n<td># Do something ...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>${index}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Switches between active browsers using ``index_or_alias``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 405
            },
            {
                "name": "Switch Window",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "list",
                            "str"
                        ],
                        "defaultValue": "MAIN",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: list | str = MAIN"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: str | None = None"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Switches to browser window matching <code>locator</code>.</p>\n<p>If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.</p>\n<p>Notice that alerts should be handled with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> or other alert related keywords.</p>\n<p>The <code>locator</code> can be specified using different strategies somewhat similarly as when <a href=\"#Locating%20elements\" class=\"name\">locating elements</a> on pages.</p>\n<ul>\n<li>By default, the <code>locator</code> is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.</li>\n</ul>\n<ul>\n<li>The <code>locator</code> can specify an explicit strategy by using the format <code>strategy:value</code> (recommended) or <code>strategy=value</code>. Supported strategies are <code>name</code>, <code>title</code>, and <code>url</code>. These matches windows using their name, title, or URL, respectively. Additionally, <code>default</code> can be used to explicitly use the default strategy explained above.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>NEW</code> (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>MAIN</code> (default, case-insensitive), the main window is selected.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>CURRENT</code> (case-insensitive), nothing is done. This effectively just returns the current window handle.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is not a string, it is expected to be a list of window handles <i>to exclude</i>. Such a list of excluded windows can be got from <a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a> before doing an action that opens a new window.</li>\n</ul>\n<p>The <code>timeout</code> is used to specify how long keyword will poll to select the new window. The <code>timeout</code> is new in SeleniumLibrary 3.2.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup1</td>\n<td></td>\n<td># Open new window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>example</td>\n<td></td>\n<td># Select window using default strategy</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>popup2</td>\n<td></td>\n<td># Open another window</td>\n</tr>\n<tr>\n<td>${handle} =</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>NEW</td>\n<td># Select latest opened window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td></td>\n<td># Select window using handle</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>MAIN</td>\n<td></td>\n<td># Select the main window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Main</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${excludes} =</td>\n<td><a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a></td>\n<td></td>\n<td># Get list of current windows</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup3</td>\n<td></td>\n<td># Open one more window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${excludes}</td>\n<td></td>\n<td># Select window using excludes</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 3</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>The <code>browser</code> argument allows with <code>index_or_alias</code> to implicitly switch to a specific browser when switching to a window. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></p>\n<ul>\n<li>If the <code>browser</code> is <code>CURRENT</code> (case-insensitive), no other browser is selected.</li>\n</ul>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The <code>strategy:value</code> syntax is only supported by SeleniumLibrary 3.0 and newer.</li>\n<li>Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.</li>\n<li>Earlier versions supported aliases <code>None</code>, <code>null</code> and the empty string for selecting the main window, and alias <code>self</code> for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.</li>\n</ul>",
                "shortdoc": "Switches to browser window matching ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 33
            },
            {
                "name": "Table Cell Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table cell contains text <code>expected</code>.</p>\n<p>See <a href=\"#Get%20Table%20Cell\" class=\"name\">Get Table Cell</a> that this keyword uses internally for an explanation about accepted arguments.</p>",
                "shortdoc": "Verifies table cell contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 90
            },
            {
                "name": "Table Column Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table column contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple columns, those merged cells count as a single column.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table column contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 113
            },
            {
                "name": "Table Footer Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table footer contains text <code>expected</code>.</p>\n<p>Any <code>&lt;td&gt;</code> element inside <code>&lt;tfoot&gt;</code> element is considered to be part of the footer.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table footer contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 144
            },
            {
                "name": "Table Header Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table header contains text <code>expected</code>.</p>\n<p>Any <code>&lt;th&gt;</code> element anywhere in the table is considered to be part of the header.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table header contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 169
            },
            {
                "name": "Table Row Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that table row contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that table row contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 194
            },
            {
                "name": "Table Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 225
            },
            {
                "name": "Textarea Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text area <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 382
            },
            {
                "name": "Textarea Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text area <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area ``locator`` has exactly text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 406
            },
            {
                "name": "Textfield Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override the default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 334
            },
            {
                "name": "Textfield Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` has exactly text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 358
            },
            {
                "name": "Title Should Be",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current page title equals <code>title</code>.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that the current page title equals ``title``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 568
            },
            {
                "name": "Unselect All From List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Unselects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Unselects all options from multi-selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 278
            },
            {
                "name": "Unselect Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Removes the selection of checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if the checkbox is not selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Removes the selection of checkbox identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 118
            },
            {
                "name": "Unselect Frame",
                "args": [],
                "doc": "<p>Sets the main frame as the current frame.</p>\n<p>In practice cancels the previous <a href=\"#Select%20Frame\" class=\"name\">Select Frame</a> call.</p>",
                "shortdoc": "Sets the main frame as the current frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 45
            },
            {
                "name": "Unselect From List By Index",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "indexes",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*indexes: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0. This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``indexes``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 295
            },
            {
                "name": "Unselect From List By Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "labels",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*labels: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``labels``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 347
            },
            {
                "name": "Unselect From List By Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*values: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``values``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 322
            },
            {
                "name": "Wait And Click Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    }
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 986
            },
            {
                "name": "Wait For Condition",
                "args": [
                    {
                        "name": "condition",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "condition: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a> for information about accessing content on pages.</p>\n<p>Fails if the timeout expires before the condition becomes true. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return document.title == \"New Title\"</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return jQuery.active == 0</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>style = document.querySelector('h1').style; return style.background == \"red\" &amp;&amp; style.color == \"white\"</td>\n</tr>\n</table>",
                "shortdoc": "Waits until ``condition`` is true or ``timeout`` expires.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 31
            },
            {
                "name": "Wait Until Element Contains",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> contains <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 373
            },
            {
                "name": "Wait Until Element Does Not Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> does not contain <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 397
            },
            {
                "name": "Wait Until Element Is Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is enabled.</p>\n<p>Element is considered enabled if it is not disabled nor read-only.</p>\n<p>Fails if <code>timeout</code> expires before the element is enabled. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Waits until the element ``locator`` is enabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 345
            },
            {
                "name": "Wait Until Element Is Not Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is not visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is not visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` is not visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 322
            },
            {
                "name": "Wait Until Element Is Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` is visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 299
            },
            {
                "name": "Wait Until Location Contains",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL contains ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 123
            },
            {
                "name": "Wait Until Location Does Not Contain",
                "args": [
                    {
                        "name": "location",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "location: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL does not contains <code>location</code>.</p>\n<p>The <code>location</code> argument contains value not expected in url.</p>\n<p>Fails if <code>timeout</code> expires before the location not contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL does not contains ``location``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 151
            },
            {
                "name": "Wait Until Location Is",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL is <code>expected</code>.</p>\n<p>The <code>expected</code> argument is the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL is ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 66
            },
            {
                "name": "Wait Until Location Is Not",
                "args": [
                    {
                        "name": "location",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "location: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL is not <code>location</code>.</p>\n<p>The <code>location</code> argument is the unexpected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is not. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL is not ``location``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 95
            },
            {
                "name": "Wait Until Page Contains",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>text</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until ``text`` appears on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 179
            },
            {
                "name": "Wait Until Page Contains Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element ``locator`` appears on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 223
            },
            {
                "name": "Wait Until Page Does Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>text</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until ``text`` disappears from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 201
            },
            {
                "name": "Wait Until Page Does Not Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should not contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element ``locator`` disappears from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 261
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Browser.Playwright": {
        "name": "RPA.Browser.Playwright",
        "doc": "<p>Browser library is a browser automation library for Robot Framework.</p>\n<p>This is the keyword documentation for Browser library. For information about installation, support, and more please visit the <a href=\"https://github.com/MarketSquare/robotframework-playwright\">project pages</a>. For more information about Robot Framework itself, see <a href=\"https://robotframework.org\">robotframework.org</a>.</p>\n<p>Browser library uses <a href=\"https://github.com/microsoft/playwright\">Playwright Node module</a> to automate <a href=\"https://www.chromium.org/Home\">Chromium</a>, <a href=\"https://www.mozilla.org/en-US/firefox/new/\">Firefox</a> and <a href=\"https://webkit.org/\">WebKit</a> with a single library.</p>\n<h3 id=\"Table of contents\">Table of contents</h3>\n<ul>\n<li><a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a></li>\n<li><a href=\"#Finding%20elements\" class=\"name\">Finding elements</a></li>\n<li><a href=\"#Assertions\" class=\"name\">Assertions</a></li>\n<li><a href=\"#Automatic%20page%20and%20context%20closing\" class=\"name\">Automatic page and context closing</a></li>\n<li><a href=\"#Experimental%3A%20Re-using%20same%20node%20process\" class=\"name\">Experimental: Re-using same node process</a></li>\n<li><a href=\"#Extending%20Browser%20library%20with%20a%20JavaScript%20module\" class=\"name\">Extending Browser library with a JavaScript module</a></li>\n<li><a href=\"#Importing\" class=\"name\">Importing</a></li>\n<li><a href=\"#Keywords\" class=\"name\">Keywords</a></li>\n<li><a href=\"#Data%20types\" class=\"name\">Data types</a></li>\n</ul>\n<h2 id=\"Browser, Context and Page\">Browser, Context and Page</h2>\n<p>Browser library works with three different layers that build on each other: <b>Browser</b>, <b>Context</b> and <b>Page</b>.</p>\n<h3 id=\"Browsers\">Browsers</h3>\n<p>A <b>browser</b> can be started with one of the three different engines Chromium, Firefox or Webkit.</p>\n<h4 id=\"Supported Browsers\">Supported Browsers</h4>\n<table border=\"1\">\n<tr>\n<td>Browser</td>\n<td>Browser with this engine</td>\n</tr>\n<tr>\n<td><code>chromium</code></td>\n<td>Google Chrome, Microsoft Edge (since 2020), Opera</td>\n</tr>\n<tr>\n<td><code>firefox</code></td>\n<td>Mozilla Firefox</td>\n</tr>\n<tr>\n<td><code>webkit</code></td>\n<td>Apple Safari, Mail, AppStore on MacOS and iOS</td>\n</tr>\n</table>\n<p>Since <a href=\"https://github.com/microsoft/playwright\">Playwright</a> comes with a pack of builtin binaries for all browsers, no additional drivers e.g. geckodriver are needed.</p>\n<p>All these browsers that cover more than 85% of the world wide used browsers, can be tested on Windows, Linux and MacOS. Theres is not need for dedicated machines anymore.</p>\n<p>A browser process is started <code>headless</code> (without a GUI) by default. Run <a href=\"#New%20Browser\" class=\"name\">New Browser</a> with specified arguments if a browser with a GUI is requested or if a proxy has to be configured. A browser process can contain several contexts.</p>\n<h3 id=\"Contexts\">Contexts</h3>\n<p>A <b>context</b> corresponds to set of independent incognito pages in a browser that share cookies, sessions or profile settings. Pages in two separate contexts do not share cookies, sessions or profile settings. Compared to Selenium, these do <b>not</b> require their own browser process. To get a clean environment a test can just open a new context. Due to this new independent browser sessions can be opened with Robot Framework Browser about 10 times faster than with Selenium by just opening a <a href=\"#New%20Context\" class=\"name\">New Context</a> within the opened browser.</p>\n<p>The context layer is useful e.g. for testing different users sessions on the same webpage without opening a whole new browser context. Contexts can also have detailed configurations, such as geo-location, language settings, the viewport size or color scheme. Contexts do also support http credentials to be set, so that basic authentication can also be tested. To be able to download files within the test, the <code>acceptDownloads</code> argument must be set to <code>True</code> in <a href=\"#New%20Context\" class=\"name\">New Context</a> keyword. A context can contain different pages.</p>\n<h3 id=\"Pages\">Pages</h3>\n<p>A <b>page</b> does contain the content of the loaded web site and has a browsing history. Pages and browser tabs are the same.</p>\n<p>Typical usage could be:</p>\n<pre>\n<b>*</b> Test Cases <b>*</b>\nStarting a browser with a page\n    New Browser    chromium    headless=false\n    New Context    viewport={'width': 1920, 'height': 1080}\n    New Page       <a href=\"https://marketsquare.github.io/robotframework-browser/Browser.html\">https://marketsquare.github.io/robotframework-browser/Browser.html</a>\n    Get Title      ==    Browser\n</pre>\n<p>The <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword opens a new browser, a new context and a new page. This keyword is useful for quick experiments or debugging sessions.</p>\n<p>When a <a href=\"#New%20Page\" class=\"name\">New Page</a> is called without an open browser, <a href=\"#New%20Browser\" class=\"name\">New Browser</a> and <a href=\"#New%20Context\" class=\"name\">New Context</a> are executed with default values first.</p>\n<p>Each Browser, Context and Page has a unique ID with which they can be addressed. A full catalog of what is open can be received by <a href=\"#Get%20Browser%20Catalog\" class=\"name\">Get Browser Catalog</a> as dictionary.</p>\n<h2 id=\"Finding elements\">Finding elements</h2>\n<p>All keywords in the library that need to interact with an element on a web page take an argument typically named <code>selector</code> that specifies how to find the element.</p>\n<p>Selector strategies that are supported by default are listed in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Strategy</th>\n<th>Match based on</th>\n<th>Example</th>\n</tr>\n<tr>\n<td><code>css</code></td>\n<td>CSS selector.</td>\n<td><code>css=.class &gt; #login_btn</code></td>\n</tr>\n<tr>\n<td><code>xpath</code></td>\n<td>XPath expression.</td>\n<td><code>xpath=//input[@id=\"login_btn\"]</code></td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>Browser text engine.</td>\n<td><code>text=Login</code></td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>Element ID Attribute.</td>\n<td><code>id=login_btn</code></td>\n</tr>\n</table>\n<h3 id=\"Explicit Selector Strategy\">Explicit Selector Strategy</h3>\n<p>The explicit selector strategy is specified with a prefix using syntax <code>strategy=value</code>. Spaces around the separator are ignored, so <code>css=foo</code>, <code>css= foo</code> and <code>css = foo</code> are all equivalent.</p>\n<h3 id=\"Implicit Selector Strategy\">Implicit Selector Strategy</h3>\n<p><b>The default selector strategy is <a href=\"#CSS\" class=\"name\">css</a>.</b></p>\n<p>If selector does not contain one of the know explicit selector strategies, it is assumed to contain css selector.</p>\n<p>Selectors that are starting with <code>//</code> or <code>..</code> are considered as xpath selectors.</p>\n<p>Selectors that are in quotes are considered as text selectors.</p>\n<p>Examples:</p>\n<pre>\n# CSS selectors are default.\n<a href=\"#Click\" class=\"name\">Click</a>  span &gt; button.some_class         # This is equivalent\n<a href=\"#Click\" class=\"name\">Click</a>  css=span &gt; button.some_class     # to this.\n\n# // or .. leads to xpath selector strategy\n<a href=\"#Click\" class=\"name\">Click</a>  //span/button[@class=\"some_class\"]\n<a href=\"#Click\" class=\"name\">Click</a>  xpath=//span/button[@class=\"some_class\"]\n\n# \"text\" in quotes leads to exact text selector strategy\n<a href=\"#Click\" class=\"name\">Click</a>  \"Login\"\n<a href=\"#Click\" class=\"name\">Click</a>  text=\"Login\"\n</pre>\n<h3 id=\"CSS\">CSS</h3>\n<p>As written before, the default selector strategy is <a href=\"#CSS\" class=\"name\">css</a>. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">css selector</a> for more information.</p>\n<p>Any malformed selector not starting with <code>//</code> or <code>..</code> nor starting and ending with a quote is assumed to be a css selector.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Click\" class=\"name\">Click</a>  span &gt; button.some_class\n</pre>\n<h3 id=\"XPath\">XPath</h3>\n<p>XPath engine is equivalent to <a href=\"https://developer.mozilla.org/en/docs/Web/API/Document/evaluate\">Document.evaluate</a>. Example: <code>xpath=//html/body//span[text()=\"Hello World\"]</code>.</p>\n<p>Malformed selector starting with <code>//</code> or <code>..</code> is assumed to be an xpath selector. For example, <code>//html/body</code> is converted to <code>xpath=//html/body</code>. More examples are displayed in <a href=\"#Examples\" class=\"name\">Examples</a>.</p>\n<p>Note that xpath does not pierce <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">shadow_roots</a>.</p>\n<h3 id=\"Text\">Text</h3>\n<p>Text engine finds an element that contains a text node with the passed text. For example, <code>Click    text=Login</code> clicks on a login button, and <code>Wait For Elements State   text=\"lazy loaded text\"</code> waits for the \"lazy loaded text\" to appear in the page.</p>\n<p>Text engine finds fields based on their labels in text inserting keywords.</p>\n<p>Malformed selector starting and ending with a quote (either <code>\"</code> or <code>'</code>) is assumed to be a text selector. For example, <code>Click    \"Login\"</code> is converted to <code>Click    text=\"Login\"</code>. Be aware that these leads to exact matches only! More examples are displayed in <a href=\"#Examples\" class=\"name\">Examples</a>.</p>\n<h4 id=\"Insensitive match\">Insensitive match</h4>\n<p>By default, the match is case-insensitive, ignores leading/trailing whitespace and searches for a substring. This means <code>text= Login</code> matches <code>&lt;button&gt;Button loGIN (click me)&lt;/button&gt;</code>.</p>\n<h4 id=\"Exact match\">Exact match</h4>\n<p>Text body can be escaped with single or double quotes for precise matching, insisting on exact match, including specified whitespace and case. This means <code>text=\"Login \"</code> will only match <code>&lt;button&gt;Login &lt;/button&gt;</code> with exactly one space after \"Login\". Quoted text follows the usual escaping rules, e.g. use <code>\\\"</code> to escape double quote in a double-quoted string: <code>text=\"foo\\\"bar\"</code>.</p>\n<h4 id=\"RegEx\">RegEx</h4>\n<p>Text body can also be a JavaScript-like regex wrapped in / symbols. This means <code>text=/^hello .*!$/i</code> or <code>text=/^Hello .*!$/</code> will match <code>&lt;span&gt;Hello Peter Parker!&lt;/span&gt;</code> with any name after <code>Hello</code>, ending with <code>!</code>. The first one flagged with <code>i</code> for case-insensitive. See <a href=\"https://regex101.com/\">https://regex101.com</a> for more information about RegEx.</p>\n<h4 id=\"Button and Submit Values\">Button and Submit Values</h4>\n<p>Input elements of the type button and submit are rendered with their value as text, and text engine finds them. For example, <code>text=Login</code> matches <code>&lt;input type=button value=\"Login\"&gt;</code>.</p>\n<h3 id=\"Cascaded selector syntax\">Cascaded selector syntax</h3>\n<p>Browser library supports the same selector strategies as the underlying Playwright node module: xpath, css, id and text. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.</p>\n<p>A major advantage of Browser is, that multiple selector engines can be used within one selector. It is possible to mix XPath, CSS and Text selectors while selecting a single element.</p>\n<p>Selectors are strings that consists of one or more clauses separated by <code>&gt;&gt;</code> token, e.g. <code>clause1 &gt;&gt; clause2 &gt;&gt; clause3</code>. When multiple clauses are present, next one is queried relative to the previous one's result. Browser library supports concatination of different selectors seperated by <code>&gt;&gt;</code>.</p>\n<p>For example:</p>\n<pre>\n<a href=\"#Highlight%20Elements\" class=\"name\">Highlight Elements</a>    \"Hello\" &gt;&gt; ../.. &gt;&gt; .select_button\n<a href=\"#Highlight%20Elements\" class=\"name\">Highlight Elements</a>    text=Hello &gt;&gt; xpath=../.. &gt;&gt; css=.select_button\n</pre>\n<p>Each clause contains a selector engine name and selector body, e.g. <code>engine=body</code>. Here <code>engine</code> is one of the supported engines (e.g. css or a custom one). Selector <code>body</code> follows the format of the particular engine, e.g. for css engine it should be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors\">css selector</a>. Body format is assumed to ignore leading and trailing white spaces, so that extra whitespace can be added for readability. If selector engine needs to include <code>&gt;&gt;</code> in the body, it should be escaped inside a string to not be confused with clause separator, e.g. <code>text=\"some &gt;&gt; text\"</code>.</p>\n<p>Selector engine name can be prefixed with <code>*</code> to capture element that matches the particular clause instead of the last one. For example, <code>css=article &gt;&gt; text=Hello</code> captures the element with the text <code>Hello</code>, and <code>*css=article &gt;&gt; text=Hello</code> (note the *) captures the article element that contains some element with the text Hello.</p>\n<p>For convenience, selectors in the wrong format are heuristically converted to the right format. See <a href=\"#Implicit%20Selector%20Strategy\" class=\"name\">Implicit Selector Strategy</a></p>\n<h3 id=\"Examples\">Examples</h3>\n<pre>\n# queries 'div' css selector\nGet Element    css=div\n\n# queries '//html/body/div' xpath selector\nGet Element    //html/body/div\n\n# queries '\"foo\"' text selector\nGet Element    text=foo\n\n# queries 'span' css selector inside the result of '//html/body/div' xpath selector\nGet Element    xpath=//html/body/div &gt;&gt; css=span\n\n# converted to 'css=div'\nGet Element    div\n\n# converted to 'xpath=//html/body/div'\nGet Element    //html/body/div\n\n# converted to 'text=\"foo\"'\nGet Element    \"foo\"\n\n# queries the div element of every 2nd span element inside an element with the id foo\nGet Element    \\#foo &gt;&gt; css=span:nth-child(2n+1) &gt;&gt; div\nGet Element    id=foo &gt;&gt; css=span:nth-child(2n+1) &gt;&gt; div\n</pre>\n<p>Be aware that using <code>#</code> as a starting character in Robot Framework would be interpreted as comment. Due to that fact a <code>#id</code> must be escaped as <code>\\#id</code>.</p>\n<h3 id=\"Frames\">Frames</h3>\n<p>By default, selector chains do not cross frame boundaries. It means that a simple CSS selector is not able to select and element located inside an iframe or a frameset. For this usecase, there is a special selector <code>&gt;&gt;&gt;</code> which can be used to combine a selector for the frame and a selector for an element inside a frame.</p>\n<p>Given this simple pseudo html snippet:</p>\n<pre>\n&lt;iframe id=\"iframe\" src=\"src.html\"&gt;\n  #document\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n      &lt;head&gt;&lt;/head&gt;\n      &lt;body&gt;\n        &lt;button id=\"btn\"&gt;Click Me&lt;/button&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n&lt;/iframe&gt;\n</pre>\n<p>Here's a keyword call that clicks the button inside the frame.</p>\n<pre>\nClick   id=iframe &gt;&gt;&gt; id=btn\n</pre>\n<p>The selectors on the left and right side of <code>&gt;&gt;&gt;</code> can be any valid selectors. The selector clause directly before the frame opener <code>&gt;&gt;&gt;</code> must select the frame element.</p>\n<h3 id=\"WebComponents and Shadow DOM\">WebComponents and Shadow DOM</h3>\n<p>Playwright and so also Browser are able to do automatic piercing of Shadow DOMs and therefore are the best automation technology when working with WebComponents.</p>\n<p>Also other technologies claim that they can handle <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM\">Shadow DOM and Web Components</a>. However, non of them do pierce shadow roots automatically, which may be inconvenient when working with Shadow DOM and Web Components.</p>\n<p>For that reason, css engine pierces shadow roots. More specifically, every <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator\">Descendant combinator</a> pierces an arbitrary number of open shadow roots, including the implicit descendant combinator at the start of the selector.</p>\n<p>That means, it is not nessesary to select each shadow host, open its shadow root and select the next shadow host until you reach the element that should be controlled.</p>\n<h4 id=\"CSS:light\">CSS:light</h4>\n<p><code>css:light</code> engine is equivalent to <a href=\"https://developer.mozilla.org/en/docs/Web/API/Document/querySelector\">Document.querySelector</a> and behaves according to the CSS spec. However, it does not pierce shadow roots.</p>\n<p><code>css</code> engine first searches for elements in the light dom in the iteration order, and then recursively inside open shadow roots in the iteration order. It does not search inside closed shadow roots or iframes.</p>\n<p>Examples:</p>\n<pre>\n&lt;article&gt;\n  &lt;div&gt;In the light dom&lt;/div&gt;\n  &lt;div slot='myslot'&gt;In the light dom, but goes into the shadow slot&lt;/div&gt;\n  &lt;open mode shadow root&gt;\n      &lt;div class='in-the-shadow'&gt;\n          &lt;span class='content'&gt;\n              In the shadow dom\n              &lt;open mode shadow root&gt;\n                  &lt;li id='target'&gt;Deep in the shadow&lt;/li&gt;\n              &lt;/open mode shadow root&gt;\n          &lt;/span&gt;\n      &lt;/div&gt;\n      &lt;slot name='myslot'&gt;&lt;/slot&gt;\n  &lt;/open mode shadow root&gt;\n&lt;/article&gt;\n</pre>\n<p>Note that <code>&lt;open mode shadow root&gt;</code> is not an html element, but rather a shadow root created with <code>element.attachShadow({mode: 'open'})</code>.</p>\n<ul>\n<li>Both <code>\"css=article div\"</code> and <code>\"css:light=article div\"</code> match the first <code>&lt;div&gt;In the light dom&lt;/div&gt;</code>.</li>\n<li>Both <code>\"css=article &gt; div\"</code> and <code>\"css:light=article &gt; div\"</code> match two <code>div</code> elements that are direct children of the <code>article</code>.</li>\n<li><code>\"css=article .in-the-shadow\"</code> matches the <code>&lt;div class='in-the-shadow'&gt;</code>, piercing the shadow root, while <code>\"css:light=article .in-the-shadow\"</code> does not match anything.</li>\n<li><code>\"css:light=article div &gt; span\"</code> does not match anything, because both light-dom <code>div</code> elements do not contain a <code>span</code>.</li>\n<li><code>\"css=article div &gt; span\"</code> matches the <code>&lt;span class='content'&gt;</code>, piercing the shadow root.</li>\n<li><code>\"css=article &gt; .in-the-shadow\"</code> does not match anything, because <code>&lt;div class='in-the-shadow'&gt;</code> is not a direct child of <code>article</code></li>\n<li><code>\"css:light=article &gt; .in-the-shadow\"</code> does not match anything.</li>\n<li><code>\"css=article li#target\"</code> matches the <code>&lt;li id='target'&gt;Deep in the shadow&lt;/li&gt;</code>, piercing two shadow roots.</li>\n</ul>\n<h4 id=\"text:light\">text:light</h4>\n<p><code>text</code> engine open pierces shadow roots similarly to <code>css</code>, while <code>text:light</code> does not. Text engine first searches for elements in the light dom in the iteration order, and then recursively inside open shadow roots in the iteration order. It does not search inside closed shadow roots or iframes.</p>\n<h4 id=\"id, data-testid, data-test-id, data-test and their :light counterparts\">id, data-testid, data-test-id, data-test and their :light counterparts</h4>\n<p>Attribute engines are selecting based on the corresponding attribute value. For example: <code>data-test-id=foo</code> is equivalent to <code>css=[data-test-id=\"foo\"]</code>, and <code>id:light=foo</code> is equivalent to <code>css:light=[id=\"foo\"]</code>.</p>\n<h3 id=\"Element reference syntax\">Element reference syntax</h3>\n<p>It is possible to get a reference to an element by using <a href=\"#Get%20Element\" class=\"name\">Get Element</a> keyword. This reference can be used as a <b>first</b> part of a selector by using a special selector syntax <span class=\"name\">element=</span> like this:</p>\n<pre>\n${ref}=    Get Element    .some_class\n           Click          element=${ref} &gt;&gt; .some_child\n</pre>\n<p>The <span class=\"name\">.some_child</span> selector in the example is relative to the element referenced by ${ref}.</p>\n<h2 id=\"Assertions\">Assertions</h2>\n<p>Keywords that accept arguments <code>assertion_operator</code> &lt;<a href=\"#AssertionOperator\" class=\"name\">AssertionOperator</a>&gt; and <code>assertion_expected</code> can optionally assert.</p>\n<p>Currently supported assertion operators are:</p>\n<table border=\"1\">\n<tr>\n<th>Operator</th>\n<th>Alternative Operators</th>\n<th>Description</th>\n<th>Validate Equivalent</th>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td><code>equal</code>, <code>should be</code></td>\n<td>Checks if returned value is equal to expected value.</td>\n<td><code>value == expected</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td><code>inequal</code>, <code>should not be</code></td>\n<td>Checks if returned value is not equal to expected value.</td>\n<td><code>value != expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td><code>greater than</code></td>\n<td>Checks if returned value is greater than expected value.</td>\n<td><code>value &gt; expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td></td>\n<td>Checks if returned value is greater than or equal to expected value.</td>\n<td><code>value &gt;= expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td><code>less than</code></td>\n<td>Checks if returned value is less than expected value.</td>\n<td><code>value &lt; expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td></td>\n<td>Checks if returned value is less than or equal to expected value.</td>\n<td><code>value &lt;= expected</code></td>\n</tr>\n<tr>\n<td><code>*=</code></td>\n<td><code>contains</code></td>\n<td>Checks if returned value contains expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>not contains</code></td>\n<td>Checks if returned value does not contain expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td><code>^=</code></td>\n<td><code>should start with</code>, <code>starts</code></td>\n<td>Checks if returned value starts with expected value.</td>\n<td><code>re.search(f\"^{expected}\", value)</code></td>\n</tr>\n<tr>\n<td><code>$=</code></td>\n<td><code>should end with</code>, <code>ends</code></td>\n<td>Checks if returned value ends with expected value.</td>\n<td><code>re.search(f\"{expected}$\", value)</code></td>\n</tr>\n<tr>\n<td><code>matches</code></td>\n<td></td>\n<td>Checks if given RegEx matches minimum once in returned value.</td>\n<td><code>re.search(expected, value)</code></td>\n</tr>\n<tr>\n<td><code>validate</code></td>\n<td></td>\n<td>Checks if given Python expression evaluates to <code>True</code>.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>evaluate</code></td>\n<td><code>then</code></td>\n<td>When using this operator, the keyword does return the evaluated Python expression.</td>\n<td></td>\n</tr>\n</table>\n<p>But default the keywords will provide an error message if the assertion fails, but default error message can be overwritten with a <code>message</code> argument. The <code>message</code> argument accepts <span class=\"name\">{value}</span>, <span class=\"name\">{value_type}</span>, <span class=\"name\">{expected}</span> and <span class=\"name\">{expected_type}</span> <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format</a> options. The <span class=\"name\">{value}</span> is the value returned by the keyword and the <span class=\"name\">{expected}</span> is the expected value defined by the user, usually value in the <code>assertion_expected</code> argument. The <span class=\"name\">{value_type}</span> and <span class=\"name\">{expected_type}</span> are the type definitions from <span class=\"name\">{value}</span> and <span class=\"name\">{expected}</span> arguments. In similar fashion as Python <a href=\"https://docs.python.org/3/library/functions.html#type\">type</a> returns type definition. Assertions will retry until <code>timeout</code> has expired if they do not pass.</p>\n<p>The assertion <code>assertion_expected</code> value is not converted by the library and is used as is. Therefore when assertion is made, the <code>assertion_expected</code> argument value and value returned the keyword must have same type. If types are not same, assertion will fail. Example <a href=\"#Get%20Text\" class=\"name\">Get Text</a> always returns a string and has to be compared with a string, even the returnd value might look like a number.</p>\n<p>Other Keywords have other specific types they return. <a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a> always returns an integer. <a href=\"#Get%20BoundingBox\" class=\"name\">Get Bounding Box</a> and <a href=\"#Get%20Viewport%20Size\" class=\"name\">Get Viewport Size</a> can be filtered. They return a dictionary without filter and a number when filtered. These Keywords do autoconvert the expected value if a number is returned.</p>\n<p>* &lt; less or greater &gt; With Strings* Compairisons of strings with <code>greater than</code> or <code>less than</code> compares each character, starting from 0 reagarding where it stands in the code page. Example: <code>A &lt; Z</code>, <code>Z &lt; a</code>, <code>ac &lt; dc<span class=\"name\"> It does never compare the length of elements. Neither lists nor strings. The comparison stops at the first character that is different. Examples: </span>`'abcde' &lt; 'abd'</code>, <code>'100.000' &lt; '2'</code> In Python 3 and therefore also in Browser it is not possible to compare numbers with strings with a greater or less operator. On keywords that return numbers, the given expected value is automatically converted to a number before comparison.</p>\n<p>The getters <span class=\"name\">Get Page State</span> and <a href=\"#Get%20Browser%20Catalog\" class=\"name\">Get Browser Catalog</a> return a dictionary. Values of the dictionary can directly asserted. Pay attention of possible types because they are evaluated in Python. For example:</p>\n<pre>\nGet Page State    validate    2020 &gt;= value['year']                     # Compairsion of numbers\nGet Page State    validate    \"IMPORTANT MESSAGE!\" == value['message']  # Compairsion of strings\n</pre>\n<h3 id=\"The 'then' or 'evaluate' closure\">The 'then' or 'evaluate' closure</h3>\n<p>Keywords that accept arguments <code>assertion_operator</code> and <code>assertion_expected</code> can optionally also use <code>then</code> or <code>evaluate</code> closure to modify the returned value with BuiltIn Evaluate. Actual value can be accessed with <code>value</code>.</p>\n<p>For example <code>Get Title  then  'TITLE: '+value</code>. See <a href=\"https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Evaluating%20expressions\">Builtin Evaluating expressions</a> for more info on the syntax.</p>\n<h3 id=\"Examples\">Examples</h3>\n<pre>\n# <b>Keyword</b>    <b>Selector</b>                    <b>Key</b>        <b>Assertion Operator</b>    <b>Assertion Expected</b>\nGet Title                                           equal                 Page Title\nGet Title                                           ^=                    Page\nGet Style    //*[@id=\"div-element\"]      width      &gt;                     100\nGet Title                                           matches               \\\\w+\\\\s\\\\w+\nGet Title                                           validate              value == \"Login Page\"\nGet Title                                           evaluate              value if value == \"some value\" else \"something else\"\n</pre>\n<h2 id=\"Automatic page and context closing\">Automatic page and context closing</h2>\n<p>Controls when contexts and pages are closed during the test execution.</p>\n<p>If automatic closing level is <span class=\"name\">TEST</span>, contexts and pages that are created during a single test are automatically closed when the test ends. Contexts and pages that are created during suite setup are closed when the suite teardown ends.</p>\n<p>If automatic closing level is <span class=\"name\">SUITE</span>, all contexts and pages that are created during the test suite are closed when the suite teardown ends.</p>\n<p>If automatic closing level is <span class=\"name\">MANUAL</span>, nothing is closed automatically during the test execution is ongoing.</p>\n<p>All browsers are automatically closed, always and regardless of the automatic closing level at the end of the test execution. This will also close all remaining pages and contexts.</p>\n<p>Automatic closing can be configured or switched off with the auto_closing_level library import parameter.</p>\n<p>See: <a href=\"#Importing\" class=\"name\">Importing</a></p>\n<h2 id=\"Experimental: Re-using same node process\">Experimental: Re-using same node process</h2>\n<p>Browser library integrated nodejs and python. NodeJS side can be also executed as a standalone process. Browser libraries running on the same machine can talk to that instead of starting new node processes. This can speed execution when running tests parallel. To start node side run on the directory when Browser package is <code>PLAYWRIGHT_BROWSERS_PATH=0 node Browser/wrapper/index.js PORT</code>. <code>PORT</code> is port you want to use for the node process. To execute tests then with pabot for example do <code>ROBOT_FRAMEWORK_BROWSER_NODE_PORT=PORT pabot ..</code>.</p>\n<h2 id=\"Extending Browser library with a JavaScript module\">Extending Browser library with a JavaScript module</h2>\n<p>Browser library can be extended with JavaScript. Module must be in CommonJS format that Node.js uses. You can translate your ES6 module to Node.js CommonJS style with Babel. Many other languages can be also translated to modules that can be used from Node.js. For example TypeScript, PureScript and ClojureScript just to mention few.</p>\n<pre>\nasync function myGoToKeyword(page, args, logger, playwright) {\n  logger(args.toString())\n  playwright.coolNewFeature()\n  return await page.goto(args[0]);\n}\n</pre>\n<p><code>page</code>: <a href=\"https://playwright.dev/docs/api/class-page\">the playwright Page object</a>.</p>\n<p><code>args</code>: list of strings from Robot Framework keyword call.</p>\n<p>!! A BIT UNSTABLE AND SUBJECT TO API CHANGES !! <code>logger</code>: callback function that takes strings as arguments and writes them to robot log. Can be called multiple times.</p>\n<p><code>playwright</code>: playwright module (* from 'playwright'). Useful for integrating with Playwright features that Browser library doesn't support with it's own keywords. <a href=\"https://playwright.dev/docs/api/class-playwright\">API docs</a></p>\n<h3 id=\"Example module.js\">Example module.js</h3>\n<pre>\nasync function myGoToKeyword(page, args) {\n  await page.goto(args[0]);\n  return await page.title();\n}\nexports.__esModule = true;\nexports.myGoToKeyword = myGoToKeyword;\n</pre>\n<h3 id=\"Example Robot Framework side\">Example Robot Framework side</h3>\n<pre>\n<b>*</b> Settings <b>*</b>\nLibrary   Browser  jsextension=${CURDIR}/module.js\n\n<b>*</b> Test Cases <b>*</b>\nHello\n  New Page\n  ${title}=  myGoToKeyword  <a href=\"https://playwright.dev\">https://playwright.dev</a>\n  Should be equal  ${title}  Playwright\n</pre>\n<p>Also selector syntax can be extended withm custom selector with a js module</p>\n<h3 id=\"Example module keyword for custom selector registerin\">Example module keyword for custom selector registerin</h3>\n<pre>\nasync function registerMySelector(page, args, log, playwright) {\nplaywright.selectors.register(\"myselector\", () =&gt; ({\n   // Returns the first element matching given selector in the root's subtree.\n   query(root, selector) {\n      return root.querySelector(<span class=\"name\">a[data-title=\"${selector}\"]</span>);\n    },\n\n    // Returns all elements matching given selector in the root's subtree.\n    queryAll(root, selector) {\n      return Array.from(root.querySelectorAll(<span class=\"name\">a[data-title=\"${selector}\"]</span>));\n    }\n}));\nreturn 1;\n}\nexports.__esModule = true;\nexports.registerMySelector = registerMySelector;\n</pre>",
        "version": "4.5.2",
        "generated": "2021-10-02 08:05:59",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\browser.py",
        "lineno": 58,
        "tags": [
            "Assertion",
            "BrowserControl",
            "Config",
            "Getter",
            "HTTP",
            "PageContent",
            "Setter",
            "Wait"
        ],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta = 0:00:10"
                    },
                    {
                        "name": "enable_playwright_debug",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "enable_playwright_debug: bool = False"
                    },
                    {
                        "name": "auto_closing_level",
                        "types": [
                            "AutoClosingLevel"
                        ],
                        "defaultValue": "TEST",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "auto_closing_level: AutoClosingLevel = TEST"
                    },
                    {
                        "name": "retry_assertions_for",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:01",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_assertions_for: timedelta = 0:00:01"
                    },
                    {
                        "name": "run_on_failure",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "Take Screenshot",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "run_on_failure: str = Take Screenshot"
                    },
                    {
                        "name": "external_browser_executable",
                        "types": [
                            "Dict[Browser.utils.data_types.SupportedBrowsers, str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "external_browser_executable: Dict[Browser.utils.data_types.SupportedBrowsers, str] | None = None"
                    },
                    {
                        "name": "jsextension",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "jsextension: str | None = None"
                    },
                    {
                        "name": "enable_presenter_mode",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "enable_presenter_mode: bool = False"
                    }
                ],
                "doc": "<p>Browser library can be taken into use with optional arguments:</p>\n<ul>\n<li><code>timeout</code> &lt;str&gt; Timeout for keywords that operate on elements. The keywords will wait for this time for the element to appear into the page. Defaults to \"10s\" =&gt; 10 seconds.</li>\n<li><code>enable_playwright_debug</code> &lt;bool&gt; Enable low level debug information from the playwright tool. Mainly Useful for the library developers and for debugging purposes.</li>\n<li><code>auto_closing_level</code> &lt; <code>TEST</code> | <code>SUITE</code> | <code>MANUAL</code> &gt; Configure context and page automatic closing. Default is <code>TEST</code>, for more details, see <a href=\"#AutoClosingLevel\" class=\"name\">AutoClosingLevel</a></li>\n<li><code>retry_assertions_for</code> &lt;str&gt; Timeout for retrying assertions on keywords before failing the keywords. This timeout starts counting from the first failure. Global <code>timeout</code> will still be in effect. This allows stopping execution faster to assertion failure when element is found fast.</li>\n<li><code>run_on_failure</code> &lt;str&gt; Sets the keyword to execute in case of a failing Browser keyword. It can be the name of any keyword that does not have any mandatory argument. If no extra action should be done after a failure, set it to <code>None</code> or any other robot falsy value.</li>\n<li><code>external_browser_executable</code> &lt;Dict &lt;SupportedBrowsers, Path&gt;&gt; Dict mapping name of browser to path of executable of a browser. Will make opening new browsers of the given type use the set executablePath. Currently only configuring of <span class=\"name\">chromium</span> to a separate executable (chrome, chromium and Edge executables all work with recent versions) works.</li>\n<li><code>jsextension</code> &lt;str&gt; Path to Javascript module exposed as extra keywords. Module must be in CommonJS.</li>\n<li><code>enable_presenter_mode</code> &lt;bool&gt; Automatic highlights to interacted components, slowMo and a small pause at the end.</li>\n</ul>",
                "shortdoc": "Browser library can be taken into use with optional arguments:",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\browser.py",
                "lineno": 602
            }
        ],
        "keywords": [
            {
                "name": "Add Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    },
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "domain",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "domain: str | None = None"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    },
                    {
                        "name": "expires",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expires: str | None = None"
                    },
                    {
                        "name": "httpOnly",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "httpOnly: bool | None = None"
                    },
                    {
                        "name": "secure",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "secure: bool | None = None"
                    },
                    {
                        "name": "sameSite",
                        "types": [
                            "CookieSameSite",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sameSite: CookieSameSite | None = None"
                    }
                ],
                "doc": "<p>Adds a cookie to currently active browser context.</p>\n<p><code>name</code> Name of the cookie.</p>\n<p><code>value</code> Given value for the cookie.</p>\n<p><code>url</code> Given url for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</p>\n<p><code>domain</code> Given domain for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</p>\n<p><code>path</code> Given path for the cookie. Defaults to None. Either <code>url</code> or <code>domain</code> / <code>path</code> pair must be set.</p>\n<p><code>expires</code> Given expiry for the cookie. Can be of date format or unix time. Supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<ul>\n<li>example: 2027-09-28 16:21:35</li>\n</ul>\n<p><code>httpOnly</code> Sets the httpOnly token.</p>\n<p><code>secure</code> Sets the secure token.</p>\n<p><code>samesite</code> Sets the samesite mode.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>                                     # Using url argument.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   domain=example.com                path=/foo/bar                     # Using domain and url arguments.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>   expiry=2027-09-28 16:21:35        # Expiry as timestamp.\n<a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a>   foo   bar   <a href=\"http://address.com/path/to/site\">http://address.com/path/to/site</a>   expiry=1822137695                 # Expiry as epoch seconds.\n</pre>",
                "shortdoc": "Adds a cookie to currently active browser context.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\cookie.py",
                "lineno": 90
            },
            {
                "name": "Add Style Tag",
                "args": [
                    {
                        "name": "content",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content: str"
                    }
                ],
                "doc": "<p>Adds a &lt;style type=\"text/css\"&gt; tag with the content.</p>\n<p><code>content</code> Raw CSS content to be injected into frame.</p>",
                "shortdoc": "Adds a <style type=\"text/css\"> tag with the content.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\evaluation.py",
                "lineno": 86
            },
            {
                "name": "Check Checkbox",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Checks the checkbox or selects radio button found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the checkbox. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Does nothing if the element is already checked/selected.</p>",
                "shortdoc": "Checks the checkbox or selects radio button found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 481
            },
            {
                "name": "Clear Text",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Clears the text field found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>See <a href=\"#Type%20Text\" class=\"name\">Type Text</a> for emulating typing text character by character. See <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> for direct filling of the full text at once.</p>",
                "shortdoc": "Clears the text field found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 104
            },
            {
                "name": "Click",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "button",
                        "types": [
                            "MouseButton"
                        ],
                        "defaultValue": "left",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "button: MouseButton = left"
                    },
                    {
                        "name": "clickCount",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clickCount: int = 1"
                    },
                    {
                        "name": "delay",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay: timedelta | None = None"
                    },
                    {
                        "name": "position_x",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "position_x: float | None = None"
                    },
                    {
                        "name": "position_y",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "position_y: float | None = None"
                    },
                    {
                        "name": "force",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "force: bool = False"
                    },
                    {
                        "name": "noWaitAfter",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "noWaitAfter: bool = False"
                    },
                    {
                        "name": "modifiers",
                        "types": [
                            "KeyboardModifier"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*modifiers: KeyboardModifier"
                    }
                ],
                "doc": "<p>Simulates mouse click on the element found by <code>selector</code>.</p>\n<p>This keyword clicks an element matching <code>selector</code> by performing the following steps:</p>\n<ul>\n<li>Find an element matches selector. If there is none, wait until a matching element is attached to the DOM.</li>\n<li>Wait for actionability checks on the matched element, unless <code>force</code> option is set. If the element is detached during the checks, the whole action is retried.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use <a href=\"#MouseButton\" class=\"name\">Mouse Button</a> to click in the center of the element, or the specified position.</li>\n<li>Wait for initiated navigation to either succeed or fail, unless <code>noWaitAfter</code> option is set.</li>\n</ul>\n<p><code>selector</code> Selector element to click. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>button</code> Defaults to <code>left</code> if invalid.</p>\n<p><code>clickCount</code> Defaults to 1.</p>\n<p><code>delay</code> Time to wait between mouse-down and mouse-up. Defaults to 0.</p>\n<p><code>position_x</code> &amp; <code>position_y</code> A point to click relative to the top-left corner of element bounding-box. Only positive values within the bounding-box are allowed. If not specified, clicks to some visible point of the element.</p>\n<p><code>force</code> Set to True to skip Playwright's <a href=\"https://playwright.dev/docs/actionability\">Actionability checks</a>.</p>\n<p><code>noWaitAfter</code> Actions that initiate navigation, are waiting for these navigation to happen and for pages to start loading. You can opt out of waiting via setting this flag. You would only need this option in the exceptional cases such as navigating to inaccessible pages. Defaults to <code>False</code>.</p>\n<p><code>*modifiers</code> Modifier keys to press. Ensures that only these modifiers are pressed during the click, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</p>",
                "shortdoc": "Simulates mouse click on the element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 255
            },
            {
                "name": "Close Browser",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Closes the current browser. Activated browser is set to first active browser. Closes all context and pages belonging to this browser. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p><code>browser</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; If value is not <code>CURRENT</code> it should be a string referencing the id of the browser to be closed. If <code>ALL</code> is provided <span class=\"name\">Close All Browsers</span> is executed.</p>",
                "shortdoc": "Closes the current browser. Activated browser is set to first active browser. Closes all context and pages belonging to this browser. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 101
            },
            {
                "name": "Close Context",
                "args": [
                    {
                        "name": "context",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "context: str = CURRENT"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Closes a Context. Activated context is set to first active context. Closes pages belonging to this context. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<p><code>context</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; Close context with specified id. If <code>ALL</code> is passed, all contexts of the specified browser are closed. Defaults to CURRENT.</p>\n<p><code>browser</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; Close context in specified browser. If value is not \"CURRENT\" it should be a string referencing the id of the browser where to close context.</p>",
                "shortdoc": "Closes a Context. Activated context is set to first active context. Closes pages belonging to this context. See `Browser, Context and Page` for more information about Context and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 125
            },
            {
                "name": "Close Page",
                "args": [
                    {
                        "name": "page",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "page: str = CURRENT"
                    },
                    {
                        "name": "context",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "context: str = CURRENT"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Closes the <code>page</code> in <code>context</code> in <code>browser</code>. Defaults to current for all three. Activated page is set to first active page. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<p><code>page</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; Id of the page to close. If value is not \"CURRENT\" it should be a string referencing the id of the context where to close page. If <code>ALL</code> is passed, all pages of the given context are closed. Defaults to CURRENT.</p>\n<p><code>context</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; Id of the context that belongs to the page to be closed. If <code>ALL</code> is passed, the requested pages of all contexts are closed. Defaults to CURRENT.</p>\n<p><code>browser</code> &lt; <code>CURRENT</code> | <code>ALL</code> | str &gt; Id of the browser that belongs to the page to be closed. If <code>ALL</code> is passed, the requested pages depending of the context of all browsers are closed. Defaults to CURRENT.</p>\n<p>Returns a list of dictionaries containing id, errors and console messages from the page.</p>",
                "shortdoc": "Closes the ``page`` in ``context`` in ``browser``. Defaults to current for all three. Activated page is set to first active page. See `Browser, Context and Page` for more information about Page and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 175
            },
            {
                "name": "Connect To Browser",
                "args": [
                    {
                        "name": "wsEndpoint",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "wsEndpoint: str"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "SupportedBrowsers"
                        ],
                        "defaultValue": "chromium",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SupportedBrowsers = chromium"
                    }
                ],
                "doc": "<p>Connect to a playwright Browser. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Returns a stable identifier for the connected browser.</p>\n<p><code>wsEndpoint</code> Address to connect to.</p>\n<p><code>browser</code> Opens the specified browser. Defaults to chromium.</p>",
                "shortdoc": "Connect to a playwright Browser. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 248
            },
            {
                "name": "Delete All Cookies",
                "args": [],
                "doc": "<p>Deletes all cookies from the currently active browser context.</p>",
                "shortdoc": "Deletes all cookies from the currently active browser context.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\cookie.py",
                "lineno": 151
            },
            {
                "name": "Deselect Options",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Deselects all options from select element found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the select tag. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>",
                "shortdoc": "Deselects all options from select element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 539
            },
            {
                "name": "Download",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    }
                ],
                "doc": "<p>Download given url content.</p>\n<p>Keyword returns dictionary which contains downloaded file path and suggested filename as keys (saveAs and suggestedFilename). See <a href=\"#Wait%20For%20Download\" class=\"name\">Wait For Download</a> for more details. Keyword requires that current active page has loaded valid html webpage.</p>",
                "shortdoc": "Download given url content.",
                "tags": [
                    "Page Content"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\evaluation.py",
                "lineno": 96
            },
            {
                "name": "Drag And Drop",
                "args": [
                    {
                        "name": "selector_from",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector_from: str"
                    },
                    {
                        "name": "selector_to",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector_to: str"
                    },
                    {
                        "name": "steps",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "steps: int = 1"
                    }
                ],
                "doc": "<p>Executes a Drag&amp;Drop operation from the element selected by <code>selector_from</code> to the element selected by <code>selector_to</code>. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>First it moves the mouse to the start-point, then presses the left mouse button, then moves to the end-point in specified number of steps, then releases the mouse button.</p>\n<p>Start- and end-point are defined by the center of the elements boundingbox.</p>\n<p><code>selector_from</code> identifies the element, which center is the start-point.</p>\n<p><code>selector_to</code> identifies the element, which center is the end-point.</p>\n<p><code>steps</code> defines how many intermediate mouse move events are sent.</p>",
                "shortdoc": "Executes a Drag&Drop operation from the element selected by ``selector_from`` to the element selected by ``selector_to``. See the `Finding elements` section for details about the selectors.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 659
            },
            {
                "name": "Drag And Drop By Coordinates",
                "args": [
                    {
                        "name": "from_x",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "from_x: float"
                    },
                    {
                        "name": "from_y",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "from_y: float"
                    },
                    {
                        "name": "to_x",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "to_x: float"
                    },
                    {
                        "name": "to_y",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "to_y: float"
                    },
                    {
                        "name": "steps",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "steps: int = 1"
                    }
                ],
                "doc": "<p>Executes a Drag&amp;Drop operation from a coordinate to another coordinate.</p>\n<p>First it moves the mouse to the start-point, then presses the left mouse button, then moves to the end-point in specified number of steps, then releases the mouse button.</p>\n<p>Start- and end-point are defined by <code>x</code> and <code>y</code> coordinates relative to the top left corner of the pages viewport.</p>\n<p><code>from_x</code> &amp; <code>from_y</code> identify the the start-point.</p>\n<p><code>to_x</code> &amp; <code>to_y</code> identify the the end-point.</p>\n<p><code>steps</code> defines how many intermediate mouse move events are sent.</p>",
                "shortdoc": "Executes a Drag&Drop operation from a coordinate to another coordinate.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 686
            },
            {
                "name": "Eat All Cookies",
                "args": [],
                "doc": "<p>Eat all cookies for all easter.</p>",
                "shortdoc": "Eat all cookies for all easter.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\cookie.py",
                "lineno": 158
            },
            {
                "name": "Execute JavaScript",
                "args": [
                    {
                        "name": "function",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "function: str"
                    },
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str = "
                    }
                ],
                "doc": "<p>Executes given javascript on the page.</p>\n<p><code>function</code> A valid javascript function or a javascript function body. For example <code>() =&gt; true</code> and <code>true</code> will behave similarly.</p>\n<p><code>selector</code> Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example <code>(element) =&gt; document.activeElement === element</code> See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><a href=\"https://github.com/MarketSquare/robotframework-browser/tree/master/atest/test/06_Examples/js_evaluation.robot\">Usage examples.</a></p>",
                "shortdoc": "Executes given javascript on the page.",
                "tags": [
                    "Getter",
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\evaluation.py",
                "lineno": 28
            },
            {
                "name": "Fill Secret",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "secret",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret: str"
                    }
                ],
                "doc": "<p>Fills the given secret from <code>variable_name</code> into the text field found by <code>selector</code>.</p>\n<p>This keyword does not log secret in Robot Framework logs, when keywords resolves the <code>secret</code> variable internally. When <code>secret</code> variable is prefixed with <span class=\"name\">$</span>, without the curly braces, library will resolve the corresponding Robot Framework variable. If <code>secret</code> variable is prefixed with <span class=\"name\">%</span>, library will resolve corresponding environment variable. Example <span class=\"name\">$Password</span><span class=\"name\"> will resolve to <code>${Password}</code> Robot Framework variable. Also <code>%ENV_PWD</span><span class=\"name\">will resolve to </span>`%{ENV_PWD}</code> environment variable. Using normal Robt Framework variables or plain text will also work, but then library can not prevent Robot Framework leaking the secrets in the output files. Also library will log a warning if library can not resolve the secret internally.</p>\n<p>If <code>enable_playwright_debug</code> is enabled in the library import, secret will be always visible as plain text in the playwright debug logs, regardless of the Robot Framework log level.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>See <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> for other details.</p>",
                "shortdoc": "Fills the given secret from ``variable_name`` into the text field found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 177
            },
            {
                "name": "Fill Text",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "txt",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "txt: str"
                    }
                ],
                "doc": "<p>Clears and fills the given <code>text</code> into the text field found by <code>selector</code>.</p>\n<p>This method waits for an element matching the <code>selector</code> to appear, waits for actionability checks, focuses the element, fills it and triggers an input event after filling.</p>\n<p>If the element matching selector is not an &lt;input&gt;, &lt;textarea&gt; or [contenteditable] element, this method throws an error. Note that you can pass an empty string as <code>text</code> to clear the input field.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>txt</code> Text for the text field.</p>\n<p>See <a href=\"#Type%20Text\" class=\"name\">Type Text</a> for emulating typing text character by character.</p>",
                "shortdoc": "Clears and fills the given ``text`` into the text field found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 82
            },
            {
                "name": "Focus",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Moves focus on to the element found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the element. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>If there's no element matching selector, the method waits until a matching element appears in the DOM. Timeouts after 10 seconds.</p>",
                "shortdoc": "Moves focus on to the element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 378
            },
            {
                "name": "Get Attribute",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the HTML <code>attribute</code> of the element found by <code>selector</code>.</p>\n<p>Optionally asserts that the attribute value matches the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>attribute</code> Requested attribute name.</p>\n<p>When a attribute is selected that is not present and no assertion operator is set, the keyword fails. If an assertion operator is set and the attribute is not present, the returned value is <code>None</code>. This can be used to assert check the presents or the absents of an attribute.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>Example Element:</p>\n<pre>\n&lt;button class=\"login button active\" id=\"enabled_button\" something&gt;Login&lt;/button&gt;\n</pre>\n<p>Example Code:</p>\n<pre>\nGet Attribute   id=enabled_button    disabled                   # FAIL =&gt; \"Attribute 'disabled' not found!\"\nGet Attribute   id=enabled_button    disabled     ==    None     # PASS =&gt; returns: None\nGet Attribute   id=enabled_button    something    evaluate    value is not None    # PASS =&gt;  returns: True\nGet Attribute   id=enabled_button    disabled     evaluate    value is None        # PASS =&gt;  returns: True\n</pre>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>",
                "shortdoc": "Returns the HTML ``attribute`` of the element found by ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 219
            },
            {
                "name": "Get Attribute Names",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*assertion_expected"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns all HTML attribute names of an element as a list.</p>\n<p>Optionally asserts that these match the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<p>Available assertions:</p>\n<ul>\n<li><code>==</code> and <code>!=</code> can work with multiple values</li>\n<li><code>contains</code> / <code>*=</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns all HTML attribute names of an element as a list.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 275
            },
            {
                "name": "Get BoundingBox",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "key",
                        "types": [
                            "BoundingBoxFields"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: BoundingBoxFields = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets elements size and location as an object <code>{x: float, y: float, width: float, height: float}</code>.</p>\n<p><code>selector</code> Selector from which shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>key</code> Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the BoundingBox as Dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does <b>not</b> need a <code>validate</code> combined with a cast of <code>value</code>.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>Example use:</p>\n<pre>\n${bounding_box}=    Get BoundingBox    id=element                 # unfiltered\nLog                 ${bounding_box}                               # {'x': 559.09375, 'y': 75.5, 'width': 188.796875, 'height': 18}\n${x}=               Get BoundingBox    id=element    x            # filtered\nLog                 X: ${x}                                       # X: 559.09375\n# Assertions:\nGet BoundingBox     id=element         width         &gt;    180\nGet BoundingBox     id=element         ALL           validate    value['x'] &gt; value['y']*2\n</pre>",
                "shortdoc": "Gets elements size and location as an object ``{x: float, y: float, width: float, height: float}``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 683
            },
            {
                "name": "Get Browser Catalog",
                "args": [
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns all browsers, open contexts in them and open pages in these contexts. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about these concepts.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>The data is parsed into a python list containing data representing the open Objects.</p>\n<p>On the root level the data contains a list of open browsers.</p>\n<p>Data can be manipulated also with <code>assertion_operator</code> for example to find a specific id based on index or page title with <code>then</code> operator.</p>\n<p>Return value can also be asserted against expected value.</p>\n<p>Sample:</p>\n<pre>\n[\n  {\n    \"type\": \"chromium\",\n    \"id\": \"browser=96207191-8147-44e7-b9ac-5e04f2709c1d\",\n    \"contexts\": [\n      {\n        \"type\": \"context\",\n        \"id\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n        \"activePage\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n        \"pages\": [\n          {\n            \"type\": \"page\",\n            \"title\": \"Robocorp\",\n            \"url\": \"<a href=\"https://robocorp.com/\">https://robocorp.com/</a>\",\n            \"id\": \"page=7ac15782-22d2-48b4-8591-ff17663fa737\",\n            \"timestamp\": 1598607713.858\n          },\n          {\n            \"type\": \"page\",\n            \"title\": \"Home - Reaktor\",\n            \"url\": \"<a href=\"https://www.reaktor.com/\">https://www.reaktor.com/</a>\",\n            \"id\": \"page=f90c97b8-eaaf-47f2-98b2-ccefd3450f12\",\n            \"timestamp\": 1598607714.702\n          }\n        ]\n      }\n    ],\n    \"activeContext\": \"context=525d8e5b-3c4e-4baa-bfd4-dfdbc6e86089\",\n    \"activeBrowser\": false\n  },\n  {\n    \"type\": \"firefox\",\n    \"id\": \"browser=ad99abac-17a9-472b-ac7f-d6352630834e\",\n    \"contexts\": [\n      {\n        \"type\": \"context\",\n        \"id\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n        \"activePage\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n        \"pages\": [\n          {\n            \"type\": \"page\",\n            \"title\": \"Software-Qualit\u00e4tssicherung und Softwaretest\",\n            \"url\": \"<a href=\"https://www.imbus.de/\">https://www.imbus.de/</a>\",\n            \"id\": \"page=8baf2991-5eaf-444d-a318-8045f914e96a\",\n            \"timestamp\": 1598607716.828\n          }\n        ]\n      }\n    ],\n    \"activeContext\": \"context=bc64f1ba-5e76-46dd-9735-4bd344afb9c0\",\n    \"activeBrowser\": true\n  }\n]\n</pre>",
                "shortdoc": "Returns all browsers, open contexts in them and open pages in these contexts. See `Browser, Context and Page` for more information about these concepts.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 627
            },
            {
                "name": "Get Browser Ids",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SelectionType = ALL"
                    }
                ],
                "doc": "<p>Returns a list of ids from open browsers. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p><code>browser</code> Defaults to <code>ALL</code></p>\n<ul>\n<li><code>ALL</code> / <code>ANY</code> Returns all ids as a list.</li>\n<li><code>ACTIVE</code> / <code>CURRENT</code> Returns the id of the currently active browser as list.</li>\n</ul>\n<p>The ACTIVE browser is a synonym for the CURRENT Browser.</p>",
                "shortdoc": "Returns a list of ids from open browsers. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 781
            },
            {
                "name": "Get Checkbox State",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "expected_state",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "Unchecked",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expected_state: bool | str = Unchecked"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the state of the checkbox found by <code>selector</code>.</p>\n<p><code>selector</code> Selector which shall be examined. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Optionally asserts that the state matches the specified assertion.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<ul>\n<li><code>==</code> and <code>!=</code> and equivalent are allowed on boolean values</li>\n<li>other operators are not accepted.</li>\n</ul>\n<p><code>expected_state</code> boolean value of expected state. Strings are interpreted as booleans. All strings are <code>${True}</code> except of the following <span class=\"name\">FALSE, NO, OFF, 0, UNCHECKED, NONE, ${EMPTY}</span>`. (case-insensitive). Defaults to unchecked</p>\n<ul>\n<li><code>checked</code> =&gt; <code>True</code></li>\n<li><code>unchecked</code> =&gt; <code>False</code></li>\n</ul>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns the state of the checkbox found by ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 469
            },
            {
                "name": "Get Classes",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*assertion_expected"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns all classes of an element as a list.</p>\n<p>Optionally asserts that the value matches the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<p>Available assertions:</p>\n<ul>\n<li><code>==</code> and <code>!=</code> can work with multiple values</li>\n<li><code>contains</code> / <code>*=</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>",
                "shortdoc": "Returns all classes of an element as a list.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 309
            },
            {
                "name": "Get Client Size",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str | None = None"
                    },
                    {
                        "name": "key",
                        "types": [
                            "SizeFields"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: SizeFields = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets elements or pages client size (<code>clientHeight</code>, <code>clientWidth</code>) as object {width: float, height: float}.</p>\n<p><code>selector</code> Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (<code>document.scrollingElement</code>). See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>key</code> Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> or <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a> for examples.</p>",
                "shortdoc": "Gets elements or pages client size (``clientHeight``, ``clientWidth``) as object {width: float, height: float}.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 841
            },
            {
                "name": "Get Context Ids",
                "args": [
                    {
                        "name": "context",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "context: SelectionType = ALL"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SelectionType = ALL"
                    }
                ],
                "doc": "<p>Returns a list of context ids based on the browser selection. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<p><code>ALL</code> and <code>ANY</code> are synonyms. <code>ACTIVE</code> and <code>CURRENT</code> are also synonyms.</p>\n<p><code>context</code> Defaults to <code>ALL</code></p>\n<ul>\n<li><code>ALL</code> Returns all context ids as a list.</li>\n<li><code>ACTIVE</code> Returns the id of the active context as a list.</li>\n</ul>\n<p><code>browser</code> Defaults to <code>ALL</code></p>\n<ul>\n<li><code>ALL</code> context ids from all open browsers shall be fetched.</li>\n<li><code>ACTIVE</code> only context ids from the active browser shall be fetched.</li>\n</ul>\n<p>The ACTIVE context of the ACTIVE Browser is the <code>Current</code> Context.</p>",
                "shortdoc": "Returns a list of context ids based on the browser selection. See `Browser, Context and Page` for more information about Context and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 801
            },
            {
                "name": "Get Cookie",
                "args": [
                    {
                        "name": "cookie",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "cookie: str"
                    },
                    {
                        "name": "return_type",
                        "types": [
                            "CookieType"
                        ],
                        "defaultValue": "dictionary",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "return_type: CookieType = dictionary"
                    }
                ],
                "doc": "<p>Returns information of cookie with <code>name</code> as a Robot Framework dot dictionary or a string.</p>\n<p><code>cookie</code> Name of the cookie to be retrieved.</p>\n<p>If <code>return_type</code> is <code>dictionary</code> or <code>dict</code> then keyword returns a of Robot Framework <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items\">dot dictionary</a> The dictionary contains all possible key value pairs of the cookie. If <code>return_type</code> is <code>string</code> or <code>str</code>, then keyword returns the cookie as a string in format: <code>name1=value1</code>. The return value contains only <code>name</code> and <code>value</code> keys of the cookie.</p>\n<p>If no cookie is found with <code>name</code> keyword fails. The cookie dictionary contains details about the cookie. Keys available in the dictionary are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<td><b>Value</b></td>\n<td><b>Explanation</b></td>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie, mandatory.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie, mandatory.</td>\n</tr>\n<tr>\n<td>url</td>\n<td>Define the scope of the cookie, what URLs the cookies should be sent to.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>Specifies which hosts are allowed to receive the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path that must exist in the requested URL, for example <span class=\"name\">/</span>.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Lifetime of a cookie. Returned as datatime object.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>sameSite</td>\n<td>Attribute lets servers require that a cookie shouldn't be sent with cross-origin requests.</td>\n</tr>\n</table>\n<p>See <a href=\"https://playwright.dev/docs/api/class-browsercontext#browsercontextaddcookiescookies\">playwright documentation</a> for details about each attribute.</p>\n<p>Example:</p>\n<pre>\n${cookie}=        Get Cookie              Foobar\nShould Be Equal   ${cookie.value}         Tidii\nShould Be Equal   ${cookie.expiry.year}   ${2020}\n</pre>",
                "shortdoc": "Returns information of cookie with ``name`` as a Robot Framework dot dictionary or a string.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\cookie.py",
                "lineno": 174
            },
            {
                "name": "Get Cookies",
                "args": [
                    {
                        "name": "return_type",
                        "types": [
                            "CookieType"
                        ],
                        "defaultValue": "dictionary",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "return_type: CookieType = dictionary"
                    }
                ],
                "doc": "<p>Returns cookies from the current active browser context.</p>\n<p>If <code>return_type</code> is <code>dictionary</code> or <code>dict</code> then keyword returns list of Robot Framework <a href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#accessing-list-and-dictionary-items\">dot dictionaries</a> The dictionary contains all possible key value pairs of the cookie. See <a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a> keyword documentation about the dictionary keys and values.</p>\n<p>If <code>return_type</code> is <code>string</code> or <code>str</code>, then keyword returns the cookie as a string in format: <code>name1=value1; name2=value2; name3=value3</code>. The return value contains only <code>name</code> and <code>value</code> keys of the cookie.</p>",
                "shortdoc": "Returns cookies from the current active browser context.",
                "tags": [
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\cookie.py",
                "lineno": 29
            },
            {
                "name": "Get Device",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    }
                ],
                "doc": "<p>Get a single device decriptor with name exactly matching name.</p>\n<p><code>name</code> Given name of the requested device. See Playwright's <a href=\"https://github.com/Microsoft/playwright/blob/master/src/server/deviceDescriptors.ts\">deviceDescriptors.ts</a> for a formatted list.</p>\n<p>Allows a concise syntax to set website testing values to exact matches of specific mobile devices.</p>\n<p>Use by passing to a context. After creating a context with devicedescriptor, before using ensure your active page is on that context. Usage:</p>\n<pre>\n${device}=          Get Device       iPhone X\nNew Context         &amp;{device}\nNew Page\nGet Viewport Size   # returns { \"width\": 375, \"height\": 812 }\n</pre>",
                "shortdoc": "Get a single device decriptor with name exactly matching name.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\device_descriptors.py",
                "lineno": 37
            },
            {
                "name": "Get Devices",
                "args": [],
                "doc": "<p>Returns a dict of all playwright device descriptors.</p>\n<p>See Playwright's <a href=\"https://github.com/Microsoft/playwright/blob/master/src/server/deviceDescriptors.ts\">deviceDescriptors.ts</a> for a formatted list.</p>",
                "shortdoc": "Returns a dict of all playwright device descriptors.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\device_descriptors.py",
                "lineno": 25
            },
            {
                "name": "Get Element",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Returns a reference to a Playwright element handle.</p>\n<p>The reference can be used in subsequent selectors.</p>\n<p><code>selector</code> Selector from which shall be retrieved . See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>",
                "shortdoc": "Returns a reference to a Playwright element handle.",
                "tags": [
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 601
            },
            {
                "name": "Get Element Count",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "expected_value",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expected_value: int | str = 0"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the count of elements found with <code>selector</code>.</p>\n<p>Optionally asserts that the count matches the specified assertion.</p>\n<p><code>selector</code> Selector which shall be counted. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<p><code>expected_value</code> Expected value for the counting</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns the count of elements found with ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 516
            },
            {
                "name": "Get Element State",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "state",
                        "types": [
                            "ElementStateKey"
                        ],
                        "defaultValue": "visible",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "state: ElementStateKey = visible"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: bool = True"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Get the given state from the element found by <code>selector</code>.</p>\n<p>If the selector does satisfy the expected state it will return <code>True</code> otherwise <code>False</code>.</p>\n<p><code>selector</code> Selector of the corresponding object. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>state</code> Defaults to visible. Possible states are:</p>\n<ul>\n<li><code>attached</code> : to be present in DOM.</li>\n<li><code>visible</code> : to have non-empty bounding box and no visibility:hidden.</li>\n<li><code>disabled</code> : to be <code>disabled</code>. Can be used on &lt;button&gt;, &lt;fieldset&gt;, &lt;input&gt;, &lt;optgroup&gt;, &lt;option&gt;, &lt;select&gt; and &lt;textarea&gt;.</li>\n<li><code>readonly</code> : to be <code>readOnly</code>. Can be used on &lt;input&gt; and &lt;textarea&gt;.</li>\n<li><code>selected</code> : to be <code>selected</code>. Can be used on &lt;option&gt;.</li>\n<li><code>focused</code> : to be the <code>activeElement</code>.</li>\n<li><code>checked</code> : to be <code>checked</code> . Can be used on &lt;input&gt;.</li>\n</ul>\n<p>Note that element must be attached to DOM to be able to fetch the state of <code>readonly</code> , <code>selectec</code> and <code>checked</code>. The other states are false if the requested element is not attached.</p>\n<p>Note that element without any content or with display:none has an empty bounding box and is not considered visible.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Get the given state from the element found by ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 887
            },
            {
                "name": "Get Elements",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Returns a reference to playwright element handle for all matched elements by <code>selector</code>.</p>\n<p><code>selector</code> Selector from which shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>",
                "shortdoc": "Returns a reference to playwright element handle for all matched elements by ``selector``.",
                "tags": [
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 614
            },
            {
                "name": "Get Page Ids",
                "args": [
                    {
                        "name": "page",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "page: SelectionType = ALL"
                    },
                    {
                        "name": "context",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "context: SelectionType = ALL"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "SelectionType"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SelectionType = ALL"
                    }
                ],
                "doc": "<p>Returns a list of page ids based on the context and browser selection. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<p><code>ALL</code> and <code>ANY</code> are synonyms. <code>ACTIVE</code> and <code>CURRENT</code> are also synonyms.</p>\n<p><code>page</code></p>\n<ul>\n<li><code>ALL</code> Returns all page ids as a list.</li>\n<li><code>ACTIVE</code> Returns the id of the active page as a list.</li>\n</ul>\n<p><code>context</code></p>\n<ul>\n<li><code>ALL</code> page ids from all contexts shall be fetched.</li>\n<li><code>ACTIVE</code> only page ids from the active context shall be fetched.</li>\n</ul>\n<p><code>browser</code></p>\n<ul>\n<li><code>ALL</code> page ids from all open browsers shall be fetched.</li>\n<li><code>ACTIVE</code> only page ids from the active browser shall be fetched.</li>\n</ul>\n<p>Example:</p>\n<pre>\nTest Case\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://www.imbus.de\">http://www.imbus.de</a>\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://www.reaktor.com\">http://www.reaktor.com</a>\n    ${current_page}=   Get Page IDs    ACTIVE    ACTIVE    ACTIVE\n    Log                Current page ID is: ${current_page}[0]\n    ${all_pages}=      Get Page IDs    CURRENT   CURRENT   ALL\n    Log Many           These are all Page IDs    @{all_pages}\n</pre>\n<p>The ACTIVE page of the ACTIVE context of the ACTIVE Browser is the <code>Current</code> Page.</p>",
                "shortdoc": "Returns a list of page ids based on the context and browser selection. See `Browser, Context and Page` for more information about Page and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 846
            },
            {
                "name": "Get Page Source",
                "args": [
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets pages HTML source as a string.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>Optionally does a string assertion.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>",
                "shortdoc": "Gets pages HTML source as a string.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 100
            },
            {
                "name": "Get Property",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "property",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "property: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the <code>property</code> of the element found by <code>selector</code>.</p>\n<p>Optionally asserts that the property value matches the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>property</code> Requested property name.</p>\n<p>If <code>assertion_operator</code> is set and property is not found, <code>value</code> is <code>None</code> and Keyword does not fail. See <a href=\"#Get%20Attribute\" class=\"name\">Get Attribute</a> for examples.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns the ``property`` of the element found by ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 173
            },
            {
                "name": "Get Scroll Position",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str | None = None"
                    },
                    {
                        "name": "key",
                        "types": [
                            "AreaFields"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: AreaFields = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets elements or pages current scroll position as object <code>{top: float, left: float, bottom: float, right: float}</code>.</p>\n<p>It describes the rectangle which is visible of the scrollable content of that element. all values are measured from position {top: 0, left: 0}.</p>\n<p><code>top</code> uses js function scrollTop, <code>left</code> uses scrollLeft and <code>bottom</code> and <code>right</code> are calculated with the client size.</p>\n<p><code>selector</code> Optional selector from which shall be retrieved. If no selector is given the client size of the page itself is used (<code>document.scrollingElement</code>). See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>key</code> Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll position as dictionary, otherwise it will just return the single value selected by the key.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> or <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a> for examples.</p>",
                "shortdoc": "Gets elements or pages current scroll position as object ``{top: float, left: float, bottom: float, right: float}``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 786
            },
            {
                "name": "Get Scroll Size",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str | None = None"
                    },
                    {
                        "name": "key",
                        "types": [
                            "SizeFields"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: SizeFields = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets elements or pages scrollable size as object <code>{width: float, height: float}</code>.</p>\n<p><code>selector</code> Optional selector from which shall be retrieved. If no selector is given the scroll size of the page itself is used. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>key</code> Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the scroll size as dictionary, otherwise it will just return the single value selected by the key.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>See <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a> for more similar examples.</p>\n<p>Example use:</p>\n<pre>\n${height}=         Get Scroll Size    height                          # filtered page by height\nLog                Width: ${height}                                   # Height: 58425\n${scroll_size}=    Get Scroll Size    id=keyword-shortcuts-container  # unfiltered element\nLog                ${scroll_size}                                     # {'width': 253, 'height': 3036}\n</pre>",
                "shortdoc": "Gets elements or pages scrollable size as object ``{width: float, height: float}``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 734
            },
            {
                "name": "Get Select Options",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns attributes of options of a <code>select</code> element as a list of dictionaries. Returned dictionaries have the following keys and their values \"index\", \"value\", \"label\" and \"selected\".</p>\n<p>Optionally asserts that these match the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Get%20Select%20Options\" class=\"name\">Get Select Options</a>     //select[2]    validate  [v[\"label\"] for v in value] == [\"Email\", \"Mobile\"]\n<a href=\"#Get%20Select%20Options\" class=\"name\">Get Select Options</a>   select#names     validate  any(v[\"label\"] == \"Mikko\" for v in value)\n</pre>",
                "shortdoc": "Returns attributes of options of a ``select`` element as a list of dictionaries. Returned dictionaries have the following keys and their values \"index\", \"value\", \"label\" and \"selected\".",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 361
            },
            {
                "name": "Get Selected Options",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "option_attribute",
                        "types": [
                            "SelectAttribute"
                        ],
                        "defaultValue": "label",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "option_attribute: SelectAttribute = label"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*assertion_expected"
                    }
                ],
                "doc": "<p>Returns the specified attribute of selected options of the <code>select</code> element.</p>\n<p>Optionally asserts that these match the specified assertion.</p>\n<p><code>selector</code> Selector from which the info is to be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>option_attribute</code> Which attribute shall be returned/verified. Defaults to label.</p>\n<p><code>assertion_operator</code> See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details. Defaults to None.</p>\n<ul>\n<li><code>==</code> and <code>!=</code> can work with multiple values</li>\n<li><code>contains</code> / <code>*=</code> only accepts one single expected value</li>\n</ul>\n<p>Other operators are not allowed.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>      label                    //select[2]    Email      Mobile\n${selected_list}         <a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   //select[2]                                         # getter\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   //select[2]              label          <span class=\"name\">==</span>       Mobile             Mail   #assertion content\n<a href=\"#Select%20Options%20By\" class=\"name\">Select Options By</a>      label                    select#names   2          4\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             index          <span class=\"name\">==</span>       2                  4      #assertion index\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             label          *=         Mikko                     #assertion contain\n<a href=\"#Get%20Selected%20Options\" class=\"name\">Get Selected Options</a>   select#names             label          validate   len(value) == 3           #assertion length\n</pre>",
                "shortdoc": "Returns the specified attribute of selected options of the ``select`` element.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 408
            },
            {
                "name": "Get Style",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: str = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Gets the computed style properties of the element selected by <code>selector</code>.</p>\n<p>Optionally matches with any sequence assertion operator.</p>\n<p><code>selector</code> Selector from which the style shall be retrieved. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>key</code> Key of the requested CSS property. Retrieves \"ALL\" styles by default.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Gets the computed style properties of the element selected by ``selector``.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 637
            },
            {
                "name": "Get Text",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns text attribute of the element found by <code>selector</code>. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Optionally asserts that the text matches the specified assertion.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns text attribute of the element found by ``selector``. See the `Finding elements` section for details about the selectors.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 148
            },
            {
                "name": "Get Textfield Value",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p><b>DEPRECATED!!</b> Use keyword <a href=\"#Get%20Text\" class=\"name\">Get Text</a> instead.</p>",
                "shortdoc": "*DEPRECATED!!* Use keyword `Get Text` instead.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 343
            },
            {
                "name": "Get Title",
                "args": [
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the title of the current page.</p>\n<p>Optionally asserts that it matches the specified assertion.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns the title of the current page.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 124
            },
            {
                "name": "Get Url",
                "args": [
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the current URL.</p>\n<p>Optionally asserts that it matches the specified assertion.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p><code>message</code> overrides the default error message.</p>",
                "shortdoc": "Returns the current URL.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 45
            },
            {
                "name": "Get Viewport Size",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "SizeFields"
                        ],
                        "defaultValue": "ALL",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: SizeFields = ALL"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Returns the current viewport dimensions.</p>\n<p>Optionally asserts that the count matches the specified assertion.</p>\n<p><code>key</code> Optionally filters the returned values. If keys is set to <code>ALL</code> (default) it will return the viewport size as dictionary, otherwise it will just return the single value selected by the key. Note: If a single value is retrieved, an assertion does <b>not</b> need a <code>validate</code> combined with a cast of <code>value</code>.</p>\n<p><code>message</code> overrides the default error message.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>\n<p>Example:</p>\n<pre>\nGet Viewport Size    ALL    ==    {'width':1280, 'height':720}\nGet Viewport Size    width    &gt;=    1200\n</pre>",
                "shortdoc": "Returns the current viewport dimensions.",
                "tags": [
                    "Assertion",
                    "BrowserControl",
                    "Getter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\getters.py",
                "lineno": 551
            },
            {
                "name": "Go Back",
                "args": [],
                "doc": "<p>Navigates to the previous page in history.</p>",
                "shortdoc": "Navigates to the previous page in history.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 40
            },
            {
                "name": "Go Forward",
                "args": [],
                "doc": "<p>Navigates to the next page in history.</p>",
                "shortdoc": "Navigates to the next page in history.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 33
            },
            {
                "name": "Go To",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Navigates to the given <code>url</code>.</p>\n<p><code>url</code> &lt;str&gt; URL to be navigated to. <code>timeout</code> &lt;str&gt; time to wait page to load. If not defined will use the the library default timeout.</p>",
                "shortdoc": "Navigates to the given ``url``.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 47
            },
            {
                "name": "Handle Future Dialogs",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "DialogAction"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "action: DialogAction"
                    },
                    {
                        "name": "prompt_input",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "prompt_input: str = "
                    }
                ],
                "doc": "<p>Handle next dialog on page with <code>action</code>.</p>\n<p>Dialog can be any of alert, beforeunload, confirm or prompt. Handling dialogue must be called before the action, like example click, that triggers the dialogue.</p>\n<p>If a handler is not set dialogs are dismissed by default.</p>\n<p><code>action</code> How to handle the alert.</p>\n<p><code>prompt_input</code> The value to enter into prompt. Only valid if <code>action</code> equals accept. Defaults to empty string.</p>\n<p>Example:</p>\n<pre>\nHandle Future Dialogs    action=accept\nClick                    \\#alerts\n</pre>",
                "shortdoc": "Handle next dialog on page with ``action``.",
                "tags": [
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 582
            },
            {
                "name": "Highlight Elements",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "duration",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:05",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "duration: timedelta = 0:00:05"
                    },
                    {
                        "name": "width",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "2px",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width: str = 2px"
                    },
                    {
                        "name": "style",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "dotted",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "style: str = dotted"
                    },
                    {
                        "name": "color",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "blue",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "color: str = blue"
                    }
                ],
                "doc": "<p>Adds a highlight to elements matched by the <code>selector</code>. Provides a style adjustment.</p>\n<p><code>selector</code> Selectors which shall be highlighted. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>duration</code> Sets for how long the selector shall be highlighted. Defaults to <code>5s</code> =&gt; 5 seconds.</p>\n<p><code>width</code> Sets the width of the higlight border. Defaults to 2px.</p>\n<p><code>style</code> Sets the style of the border. Defaults to dotted.</p>\n<p><code>color</code> Sets the color of the border. Valid colors i.e. are: <code>red</code>, <code>blue</code>, <code>yellow</code>, <code>pink</code>, <code>black</code></p>",
                "shortdoc": "Adds a highlight to elements matched by the ``selector``. Provides a style adjustment.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\evaluation.py",
                "lineno": 51
            },
            {
                "name": "Hover",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "position_x",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "position_x: float | None = None"
                    },
                    {
                        "name": "position_y",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "position_y: float | None = None"
                    },
                    {
                        "name": "force",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "force: bool = False"
                    },
                    {
                        "name": "modifiers",
                        "types": [
                            "KeyboardModifier"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*modifiers: KeyboardModifier"
                    }
                ],
                "doc": "<p>Moves the virtual mouse and scrolls to the element found by <code>selector</code>.</p>\n<p>This method hovers over an element matching <code>selector</code> by performing the following steps:</p>\n<ul>\n<li>Find an element match matching <code>selector</code>. If there is none, wait until a matching element is attached to the DOM.</li>\n<li>Wait for actionability checks on the matched element, unless <code>force</code> option is set. If the element is detached during the checks, the whole action is retried.</li>\n<li>Scroll the element into view if needed.</li>\n<li>Use <a href=\"#Mouse%20Move\" class=\"name\">Mouse Move</a> to hover over the center of the element, or the specified <code>position</code>.</li>\n</ul>\n<p><code>selector</code> Selector element to hover. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>position_x</code> &amp; <code>position_y</code> A point to hover relative to the top-left corner of element bounding box. If not specified, hovers over some visible point of the element. Only positive values within the bounding-box are allowed.</p>\n<p><code>force</code> Set to True to skip Playwright's <a href=\"https://playwright.dev/docs/actionability\">Actionability checks</a>.</p>\n<p><code>*modifiers</code> Modifier keys to press. Ensures that only these modifiers are pressed during the hover, and then restores current modifiers back. If not specified, currently pressed modifiers are used.</p>",
                "shortdoc": "Moves the virtual mouse and scrolls to the element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 332
            },
            {
                "name": "Http",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "method",
                        "types": [
                            "RequestMethod"
                        ],
                        "defaultValue": "GET",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "method: RequestMethod = GET"
                    },
                    {
                        "name": "body",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "body: str | None = None"
                    },
                    {
                        "name": "headers",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers: dict | None = None"
                    }
                ],
                "doc": "<p>Performs an HTTP request in the current browser context</p>\n<p>Accepts the following arguments:</p>\n<ul>\n<li><code>url</code> The request url, e.g. <code>/api/foo</code>.</li>\n<li><code>method</code> The HTTP method for the request. Defaults to GET.</li>\n<li><code>body</code> The request body. GET requests cannot have a body. If the body can be parsed as JSON, the <code>Content-Type</code> header for the request will be automatically set to <code>application/json</code>. Defaults to None.</li>\n<li><code>headers</code> A dictionary of additional request headers. Defaults to None.</li>\n</ul>\n<p>The response is a Python dictionary with following attributes:</p>\n<ul>\n<li><code>status</code> &lt;int&gt; The status code of the response.</li>\n<li><code>statusText</code> &lt;str&gt; Status text corresponding to <code>status</code>, e.g OK or INTERNAL SERVER ERROR.</li>\n<li><code>body</code> &lt;dict&gt; | &lt;str&gt; The response body. If the body can be parsed as a JSON obejct, it will be returned as Python dictionary, otherwise it is returned as a string.</li>\n<li><code>headers</code> &lt;dict&gt; A dictionary containing all response headers.</li>\n<li><code>ok</code> &lt;bool&gt; Whether the request was successfull, i.e. the <code>status</code> is range 200-299.</li>\n</ul>\n<p>Here's an example of using Robot Framework dictionary variables and extended variable syntax to do assertions on the response object:</p>\n<pre>\n&amp;{res}=             HTTP                       /api/endpoint\nShould Be Equal     ${res.status}              200\nShould Be Equal     ${res.body.some_field}     some value\n</pre>",
                "shortdoc": "Performs an HTTP request in the current browser context",
                "tags": [
                    "HTTP"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\network.py",
                "lineno": 60
            },
            {
                "name": "Keyboard Input",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "KeyboardInputAction"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "action: KeyboardInputAction"
                    },
                    {
                        "name": "input",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "input: str"
                    },
                    {
                        "name": "delay",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay=0"
                    }
                ],
                "doc": "<p>Input text into page with virtual keyboard.</p>\n<p><code>action</code></p>\n<ul>\n<li><code>insertText</code> Dispatches only input event, does not emit the keydown, keyup or keypress events.</li>\n</ul>\n<ul>\n<li><code>type</code> Sends a keydown, keypress/input, and keyup event for each character in the text.</li>\n</ul>\n<p><code>input</code> The inputstring to be typed. No special keys possible.</p>\n<p>Note: To press a special key, like Control or ArrowDown, use keyboard.press. Modifier keys DO NOT effect these methods. For testing modifier effects use single key presses with <code>Keyboard Key  press</code></p>",
                "shortdoc": "Input text into page with virtual keyboard.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 796
            },
            {
                "name": "Keyboard Key",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "KeyAction"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "action: KeyAction"
                    },
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<p>Press a keyboard key on the virtual keyboard or set a key up or down.</p>\n<p><code>action</code> Determine whether the key should be released, hold or pressed. <code>down</code> or <code>up</code> are useful for combinations i.e. with Shift.</p>\n<p><code>key</code> The key to be pressed. An example of valid keys are:</p>\n<p><code>F1</code> - <code>F12</code>, <code>Digit0</code> - <code>Digit9</code>, <code>KeyA</code> - <code>KeyZ</code>, <code>Backquote</code>, <code>Minus</code>, <code>Equal</code>, <code>Backslash</code>, <code>Backspace</code>, <code>Tab</code>, <code>Delete</code>, <code>Escape</code>, <code>ArrowDown</code>, <code>End</code>, <code>Enter</code>, <code>Home</code>, <code>Insert</code>, <code>PageDown</code>, <code>PageUp</code>, <code>ArrowRight</code>, <code>ArrowUp</code> , etc.</p>\n<p>Useful keys for <code>down</code> and <code>up</code> for example are:</p>\n<p><code>Shift</code>, <code>Control</code>, <code>Alt</code>, <code>Meta</code>, <code>ShiftLeft</code></p>\n<p>Example excecution:</p>\n<pre>\nKeyboard Key    press    S\nKeyboard Key    down     Shift\nKeyboard Key    press    ArrowLeft\nKeyboard Key    press    Delete\nKeyboard Key    up       Shift\n</pre>\n<p>Note: Capital letters don't need to be written by the help of Shift. You can type them in directly.</p>",
                "shortdoc": "Press a keyboard key on the virtual keyboard or set a key up or down.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 762
            },
            {
                "name": "LocalStorage Clear",
                "args": [],
                "doc": "<p>Remove all saved data from the local storage.</p>",
                "shortdoc": "Remove all saved data from the local storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 89
            },
            {
                "name": "LocalStorage Get Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Get saved data from the local storage.</p>\n<p><code>key</code> Named key of the item in the storage.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>",
                "shortdoc": "Get saved data from the local storage.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 29
            },
            {
                "name": "LocalStorage Remove Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<p>Remove saved data with key from the local storage.</p>\n<p><code>key</code> Name of the item which shall be deleted.</p>",
                "shortdoc": "Remove saved data with key from the local storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 74
            },
            {
                "name": "LocalStorage Set Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Save data to the local storage.</p>\n<p><code>key</code> The name of the key under which it should be saved.</p>\n<p><code>value</code> The value which shall be saved as a string.</p>",
                "shortdoc": "Save data to the local storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 57
            },
            {
                "name": "Mouse Button",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "MouseButtonAction"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "action: MouseButtonAction"
                    },
                    {
                        "name": "x",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "x: float | None = None"
                    },
                    {
                        "name": "y",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "y: float | None = None"
                    },
                    {
                        "name": "button",
                        "types": [
                            "MouseButton"
                        ],
                        "defaultValue": "left",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "button: MouseButton = left"
                    },
                    {
                        "name": "clickCount",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clickCount: int = 1"
                    },
                    {
                        "name": "delay",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay: int = 0"
                    }
                ],
                "doc": "<p>Clicks, presses or releases a mouse button.</p>\n<p><code>action</code> Determines if it is a mouseclick, holding down a key or releasing it.</p>\n<p><code>x</code> and <code>y</code> Coordinates to move before.</p>\n<p><code>button</code> Defaults to <code>left</code>.</p>\n<p><code>clickCount</code> Determine how often shall be clicked. Defaults to 1.</p>\n<p><code>delay</code> Delay in ms between the mousedown and mouseup event. Can only be set if the action is click.</p>\n<p>Moving the mouse between holding down and releasing it, is possible with <a href=\"#Mouse%20Move\" class=\"name\">Mouse Move</a>.</p>",
                "shortdoc": "Clicks, presses or releases a mouse button.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 611
            },
            {
                "name": "Mouse Move",
                "args": [
                    {
                        "name": "x",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "x: float"
                    },
                    {
                        "name": "y",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "y: float"
                    },
                    {
                        "name": "steps",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "steps: int = 1"
                    }
                ],
                "doc": "<p>Instead of selectors command mouse with coordinates. The Click commands will leave the virtual mouse on the specified coordinates.</p>\n<p><code>x</code> <code>y</code> are absolute coordinates starting at the top left of the page.</p>\n<p><code>steps</code> Number of intermediate steps for the mouse event.</p>",
                "shortdoc": "Instead of selectors command mouse with coordinates. The Click commands will leave the virtual mouse on the specified coordinates.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 746
            },
            {
                "name": "Mouse Move Relative To",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "x",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "x: float = 0.0"
                    },
                    {
                        "name": "y",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "y: float = 0.0"
                    },
                    {
                        "name": "steps",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "steps: int = 1"
                    }
                ],
                "doc": "<p>Moves the mouse cursor relative to the selected element.</p>\n<p><code>x</code> <code>y</code> are relative coordinates to the center of the elements bounding box.</p>\n<p><code>steps</code> Number of intermediate steps for the mouse event. This is sometime needed for websites to recognize the movement.</p>",
                "shortdoc": "Moves the mouse cursor relative to the selected element.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 717
            },
            {
                "name": "New Browser",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "SupportedBrowsers"
                        ],
                        "defaultValue": "chromium",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SupportedBrowsers = chromium"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: bool = True"
                    },
                    {
                        "name": "executablePath",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "executablePath: str | None = None"
                    },
                    {
                        "name": "args",
                        "types": [
                            "List[str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "args: List[str] | None = None"
                    },
                    {
                        "name": "ignoreDefaultArgs",
                        "types": [
                            "List[str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignoreDefaultArgs: List[str] | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "Proxy",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: Proxy | None = None"
                    },
                    {
                        "name": "downloadsPath",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "downloadsPath: str | None = None"
                    },
                    {
                        "name": "handleSIGINT",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "handleSIGINT: bool = True"
                    },
                    {
                        "name": "handleSIGTERM",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "handleSIGTERM: bool = True"
                    },
                    {
                        "name": "handleSIGHUP",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "handleSIGHUP: bool = True"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:30",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta = 0:00:30"
                    },
                    {
                        "name": "env",
                        "types": [
                            "Dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "env: Dict | None = None"
                    },
                    {
                        "name": "devtools",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "devtools: bool = False"
                    },
                    {
                        "name": "slowMo",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:00",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "slowMo: timedelta = 0:00:00"
                    },
                    {
                        "name": "channel",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "channel: str | None = None"
                    }
                ],
                "doc": "<p>Create a new playwright Browser with specified options. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Returns a stable identifier for the created browser.</p>\n<p><code>browser</code> Opens the specified browser. Defaults to chromium.</p>\n<p><code>headless</code> Set to False if you want a GUI. Defaults to False.</p>\n<p><code>executablePath</code> Path to a browser executable to run instead of the bundled one. If executablePath is a relative path, then it is resolved relative to current working directory. Note that Playwright only works with the bundled Chromium, Firefox or WebKit, use at your own risk. Defaults to None.</p>\n<p><code>args</code> Additional arguments to pass to the browser instance. The list of Chromium flags can be found <a href=\"http://peter.sh/experiments/chromium-command-line-switches/\">here</a>. Defaults to None.</p>\n<p><code>ignoreDefaultArgs</code> If an array is given, then filters out the given default arguments. Defaults to None.</p>\n<p><code>proxy</code> Network proxy settings.</p>\n<ul>\n<li>server &lt;string&gt; Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example <code>http://myproxy.com:3128</code> or <code>socks5://myproxy.com:3128</code>. Short form <code>myproxy.com:3128</code> is considered an HTTP proxy.</li>\n<li>bypass &lt;string&gt; Optional coma-separated domains to bypass proxy, for example <code>\".com, chromium.org, .domain.com\"</code>.</li>\n<li>username &lt;string&gt; Optional username to use if HTTP proxy requires authentication.</li>\n<li>password &lt;string&gt; Optional password to use if HTTP proxy requires authentication.</li>\n</ul>\n<p><code>downloadsPath</code> If specified, accepted downloads are downloaded into this folder. Otherwise, temporary folder is created and is deleted when browser is closed.</p>\n<p><code>handleSIGINT</code> Close the browser process on Ctrl-C. Defaults to True.</p>\n<p><code>handleSIGTERM</code> Close the browser process on SIGTERM. Defaults to True.</p>\n<p><code>handleSIGHUP</code> Close the browser process on SIGHUP. Defaults to True.</p>\n<p><code>timeout</code> Maximum time in milliseconds to wait for the browser instance to start. Defaults to 30000 (30 seconds). Pass 0 to disable timeout.</p>\n<p><code>env</code> &lt;Dict&lt;str, str|int|bool&gt;&gt; Specify environment variables that will be visible to the browser. Defaults to None.</p>\n<p><code>devtools</code> Chromium-only Whether to auto-open a Developer Tools panel for each tab. If this option is true, the headless option will be set false.</p>\n<p><code>slowMo</code> Slows down Playwright operations by the specified amount of milliseconds. Useful so that you can see what is going on. Defaults to no delay.</p>\n<p><code>channel</code> Allows to operate against the stock Google Chrome and Microsoft Edge browsers. For more details see: <a href=\"https://playwright.dev/docs/browsers/#google-chrome--microsoft-edge\">Playwright documentation</a>.</p>",
                "shortdoc": "Create a new playwright Browser with specified options. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 268
            },
            {
                "name": "New Context",
                "args": [
                    {
                        "name": "acceptDownloads",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "acceptDownloads: bool = False"
                    },
                    {
                        "name": "ignoreHTTPSErrors",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignoreHTTPSErrors: bool = False"
                    },
                    {
                        "name": "bypassCSP",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bypassCSP: bool = False"
                    },
                    {
                        "name": "viewport",
                        "types": [
                            "ViewportDimensions",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "viewport: ViewportDimensions | None = None"
                    },
                    {
                        "name": "userAgent",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "userAgent: str | None = None"
                    },
                    {
                        "name": "deviceScaleFactor",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "1.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "deviceScaleFactor: float = 1.0"
                    },
                    {
                        "name": "isMobile",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "isMobile: bool = False"
                    },
                    {
                        "name": "hasTouch",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "hasTouch: bool = False"
                    },
                    {
                        "name": "javaScriptEnabled",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "javaScriptEnabled: bool = True"
                    },
                    {
                        "name": "timezoneId",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timezoneId: str | None = None"
                    },
                    {
                        "name": "geolocation",
                        "types": [
                            "GeoLocation",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "geolocation: GeoLocation | None = None"
                    },
                    {
                        "name": "locale",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locale: str | None = None"
                    },
                    {
                        "name": "permissions",
                        "types": [
                            "List[str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "permissions: List[str] | None = None"
                    },
                    {
                        "name": "extraHTTPHeaders",
                        "types": [
                            "Dict[str, str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "extraHTTPHeaders: Dict[str, str] | None = None"
                    },
                    {
                        "name": "offline",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "offline: bool = False"
                    },
                    {
                        "name": "httpCredentials",
                        "types": [
                            "HttpCredentials",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "httpCredentials: HttpCredentials | None = None"
                    },
                    {
                        "name": "colorScheme",
                        "types": [
                            "ColorScheme",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "colorScheme: ColorScheme | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "Proxy",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: Proxy | None = None"
                    },
                    {
                        "name": "videosPath",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "videosPath: str | None = None"
                    },
                    {
                        "name": "videoSize",
                        "types": [
                            "ViewportDimensions",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "videoSize: ViewportDimensions | None = None"
                    },
                    {
                        "name": "defaultBrowserType",
                        "types": [
                            "SupportedBrowsers",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "defaultBrowserType: SupportedBrowsers | None = None"
                    },
                    {
                        "name": "hideRfBrowser",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "hideRfBrowser: bool = False"
                    },
                    {
                        "name": "recordVideo",
                        "types": [
                            "RecordVideo",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recordVideo: RecordVideo | None = None"
                    },
                    {
                        "name": "recordHar",
                        "types": [
                            "RecordHar",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recordHar: RecordHar | None = None"
                    }
                ],
                "doc": "<p>Create a new BrowserContext with specified options. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about BrowserContext.</p>\n<p>Returns a stable identifier for the created context that can be used in <a href=\"#Switch%20Context\" class=\"name\">Switch Context</a>.</p>\n<p><code>acceptDownloads</code> Whether to automatically downloads all the attachments. Defaults to False where all the downloads are canceled.</p>\n<p><code>ignoreHTTPSErrors</code> Whether to ignore HTTPS errors during navigation. Defaults to False.</p>\n<p><code>bypassCSP</code> Toggles bypassing page's Content-Security-Policy. Defaults to False.</p>\n<p><code>viewport</code> Sets a consistent viewport for each page. Defaults to an <code>{'width': 1280, 'height': 720}</code> viewport. Value of <code>viewport</code> can be a dict or a string representation of a dictionary.</p>\n<p><code>userAgent</code> Specific user agent to use in this context.</p>\n<p><code>deviceScaleFactor</code> Specify device scale factor (can be thought of as dpr). Defaults to 1.</p>\n<p><code>isMobile</code> Whether the meta viewport tag is taken into account and touch events are enabled. Defaults to False. Not supported in Firefox.</p>\n<p><code>hasTouch</code> Specifies if viewport supports touch events. Defaults to False.</p>\n<p><code>javaScriptEnabled</code> Whether or not to enable JavaScript in the context. Defaults to True.</p>\n<p><code>timezoneId</code> Changes the timezone of the context. See <a href=\"https://source.chromium.org/chromium/chromium/src/+/master:third_party/icu/source/data/misc/metaZones.txt\">ICU\u2019s metaZones.txt</a> for a list of supported timezone IDs.</p>\n<p><code>geolocation</code> Sets the geolocation. No location is set by default.</p>\n<ul>\n<li><code>latitude</code> &lt;number&gt; Latitude between -90 and 90.</li>\n<li><code>longitude</code> &lt;number&gt; Longitude between -180 and 180.</li>\n<li><code>accuracy</code> Optional &lt;number&gt; Non-negative accuracy value. Defaults to 0.</li>\n</ul>\n<p>Example usage: <code>{'latitude': 59.95, 'longitude': 30.31667}</code></p>\n<p><code>locale</code> Specify user locale, for example <code>en-GB</code>, <code>de-DE</code>, etc. Locale will affect <code>navigator.language</code> value, <code>Accept-Language</code> request header value as well as number and date formatting rules.</p>\n<p><code>permissions</code> A list of permissions to grant to all pages in this context. See <a href=\"https://playwright.dev/docs/api/class-browsercontext#browsercontextgrantpermissionspermissions-options\">grantPermissions</a> for more details.</p>\n<p><code>extraHTTPHeaders</code> A dictionary containing additional HTTP headers to be sent with every request. All header values must be strings.</p>\n<p><code>offline</code> Whether to emulate network being offline. Defaults to False.</p>\n<p><code>httpCredentials</code> Credentials for <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\">HTTP authentication</a>.</p>\n<ul>\n<li>example: <code>{'username': 'admin', 'password': '123456'}</code></li>\n<li><code>username</code></li>\n<li><code>password</code></li>\n</ul>\n<p><code>colorScheme</code> Emulates 'prefers-colors-scheme' media feature, supported values are 'light', 'dark', 'no-preference'. See <a href=\"https://playwright.dev/docs/api/class-page#pageemulatemediaparams\">emulateMedia(options)</a> for more details. Defaults to <code>light</code>.</p>\n<p><code>proxy</code> Network proxy settings to use with this context. Note that browser needs to be launched with the global proxy for this option to work. If all contexts override the proxy, global proxy will be never used and can be any string</p>\n<p><code>videosPath</code> is deprecated by playwright, use recordVideo instead. Enables video recording for all pages to videosPath folder. If videosPath is not existing folder, videosPath folder is created under ${OUTPUT_DIR}/browser/video/ folder. If videosPath is not specified, videos are not recorded.</p>\n<p><code>videoSize</code> is deprecated by playwright, use recordVideo instead. Specifies dimensions of the automatically recorded video. Can only be used if videosPath is set. If not specified the size will be equal to viewport. If viewport is not configured explicitly the video size defaults to 1280x720. Actual picture of the page will be scaled down if necessary to fit specified size.</p>\n<ul>\n<li>Example {\"width\": 1280, \"height\": 720}</li>\n</ul>\n<p><code>defaultBrowserType</code> If no browser is open and <a href=\"#New%20Context\" class=\"name\">New Context</a> opens a new browser with defaults, it now uses this setting. Very useful together with <a href=\"#Get%20Device\" class=\"name\">Get Device</a> keyword:</p>\n<p><code>recordVideo</code> enables video recording for all pages into a folder. If not specified videos are not recorded. Make sure to close context for videos to be saved. <code>recordVideo</code> is dictionary containing <span class=\"name\">dir</span> and <span class=\"name\">size</span> keys. If <span class=\"name\">dir</span> is not existing folder, videosPath folder is created under ${OUTPUT_DIR}/browser/video/ folder. <span class=\"name\">size</span> Optional dimensions of the recorded videos. If not specified the size will be equal to viewport. If viewport is not configured explicitly the video size defaults to 1280x720. Actual picture of each page will be scaled down if necessary to fit the specified size. <span class=\"name\">size</span> is dictionary containing <span class=\"name\">width</span> (Video frame width) and  <span class=\"name\">height</span> (Video frame height) keys.</p>\n<p><code>recordHar</code> Enables <a href=\"http://www.softwareishard.com/blog/har-12-spec/\">HAR</a> recording for all pages into to a file. Must be path to file, example ${OUTPUT_DIR}/har.file. If not specified, the HAR is not recorded. Make sure to await context to close for the to be saved.</p>\n<p><span class=\"name\">omitContent</span>: Optional setting to control whether to omit request content from the HAR. Default is False <span class=\"name\">path</span>: Path on the filesystem to write the HAR file to.</p>\n<p>The ${OUTPUTDIR}/browser/ is removed at the first suite startup.</p>\n<p>Example:</p>\n<pre>\nTest an iPhone\n    ${device}=    <a href=\"#Get%20Device\" class=\"name\">Get Device</a>    iPhone X\n    <a href=\"#New%20Context\" class=\"name\">New Context</a>    &amp;{device}        # unpacking here with &amp;\n    <a href=\"#New%20Page\" class=\"name\">New Page</a>    <a href=\"http://example.com\">http://example.com</a>\n</pre>\n<p>A BrowserContext is the Playwright object that controls a single browser profile. Within a context caches and cookies are shared. See <a href=\"https://playwright.dev/docs/api/class-browser#browsernewcontextoptions\">Playwright browser.newContext</a> for a list of supported options.</p>\n<p>If there's no open Browser this keyword will open one. Does not create pages.</p>",
                "shortdoc": "Create a new BrowserContext with specified options. See `Browser, Context and Page` for more information about BrowserContext.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\utils\\deprecated.py",
                "lineno": 366
            },
            {
                "name": "New Page",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    }
                ],
                "doc": "<p>Open a new Page. A Page is the Playwright equivalent to a tab. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page concept. Returns a stable identifier for the created page.</p>\n<p>When a <a href=\"#New%20Page\" class=\"name\">New Page</a> is called without an open browser, <a href=\"#New%20Browser\" class=\"name\">New Browser</a> and <a href=\"#New%20Context\" class=\"name\">New Context</a> are executed with default values first.</p>\n<p><code>url</code> If specified it will open the new page to the specified URL.</p>",
                "shortdoc": "Open a new Page. A Page is the Playwright equivalent to a tab. See `Browser, Context and Page` for more information about Page concept. Returns a stable identifier for the created page.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 578
            },
            {
                "name": "Open Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "SupportedBrowsers"
                        ],
                        "defaultValue": "chromium",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: SupportedBrowsers = chromium"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: bool = False"
                    },
                    {
                        "name": "pause_on_failure",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pause_on_failure: bool = True"
                    }
                ],
                "doc": "<p>Opens a new browser instance. Use this keyword for quick experiments or debugging sessions. Use <a href=\"#New%20Page\" class=\"name\">New Page</a> directly instead of <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> for production and automated execution. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p>Creates a new browser, context and page with specified settings. Only supports some of the settings Create _ Keywords do</p>\n<p><code>url</code> Navigates to URL if provided. Defaults to None.</p>\n<p><code>browser</code> Specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-sensitive.</p>\n<table border=\"1\">\n<tr>\n<th>Value</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>firefox</td>\n<td><a href=\"https://www.mozilla.org/en-US/firefox/new\">Firefox</a></td>\n</tr>\n<tr>\n<td>chromium</td>\n<td><a href=\"https://www.chromium.org/Home\">Chromium</a></td>\n</tr>\n<tr>\n<td>webkit</td>\n<td><a href=\"https://webkit.org/\">webkit</a></td>\n</tr>\n</table>\n<p><code>headless</code> If set to False, a GUI is provided otherwise it is hidden. Defaults to False.</p>\n<p><code>pause_on_failure</code> Stop execution when failure detected and leave browser open. Defaults to True.</p>",
                "shortdoc": "Opens a new browser instance. Use this keyword for quick experiments or debugging sessions. Use `New Page` directly instead of `Open Browser` for production and automated execution. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 63
            },
            {
                "name": "Press Keys",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*keys: str"
                    }
                ],
                "doc": "<p>Types the given key combination into element found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Supports values like \"a, b\" which will be automatically typed. . Also supports identifiers for keys like <code>ArrowLeft</code> or <code>Backspace</code>. Using + to chain combine modifiers with a single keypress <code>Control+Shift+T</code> is supported.</p>\n<p>See playwright's documentation for a more comprehensive list of supported input keys. <a href=\"https://playwright.dev/docs/api/class-page#pagepressselector-key-options\">Playwright docs for press.</a></p>\n<p>Example:</p>\n<pre>\n# Keyword       Selector                    *Keys\nPress Keys      //*[@id=\"username_field\"]    h    e   l   o   ArrowLeft   l\n</pre>",
                "shortdoc": "Types the given key combination into element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 229
            },
            {
                "name": "Promise To",
                "args": [
                    {
                        "name": "kw",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "kw: str"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<p>Wrap a Browser library keyword and make it a promise. Returns that promise and executes the keyword on background.</p>\n<p><code>kw</code> Keyword that will work async on background.</p>\n<p>Example:</p>\n<pre>\n${promise}=     Promise To            Wait For Response     matcher=     timeout=3\nClick           \\#delayed_request\n${body}=        Wait For              ${promise}\n</pre>",
                "shortdoc": "Wrap a Browser library keyword and make it a promise. Returns that promise and executes the keyword on background.",
                "tags": [
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 35
            },
            {
                "name": "Promise To Upload File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "PathLike"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: PathLike"
                    }
                ],
                "doc": "<p>Returns a promise that resolves when file from <code>path</code> has been uploaded. Fails if the upload has not happened during timeout.</p>\n<p>Upload file from <code>path</code> into next file chooser dialog on page.</p>\n<p><code>path</code> Path to file to be uploaded.</p>\n<p>Example use:</p>\n<pre>\n${promise}=  Promise To Upload File    ${CURDIR}/test_upload_file\nClick          \\#file_chooser\n${upload_result}=  Wait For  ${promise}\n</pre>",
                "shortdoc": "Returns a promise that resolves when file from ``path`` has been uploaded. Fails if the upload has not happened during timeout.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 140
            },
            {
                "name": "Promise To Wait For Download",
                "args": [
                    {
                        "name": "saveAs",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "saveAs: str = "
                    }
                ],
                "doc": "<p>Returns a promise that waits for next download event on page.</p>\n<p>To enable downloads context's <code>acceptDownloads</code> needs to be true.</p>\n<p>With default filepath downloaded files are deleted when Context the download happened in is closed.</p>\n<p><code>saveAs</code> defines path where the file is saved. File will also temporarily be saved in playwright context's default download location.</p>\n<p>Waited promise returns a dictionary which contains saveAs and suggestedFilename as keys. The saveAs contains where the file is downloaded and suggestedFilename contains the name suggested name for the download. The suggestedFilename is typically computed by the browser from the Content-Disposition response header or the download attribute. See the spec on <a href=\"https://html.spec.whatwg.org/#downloading-resources\">whatwg</a>. Different browsers can use different logic for computing it.</p>\n<p>Example usage:</p>\n<pre>\nNew Context          acceptDownloads=True\nNew Page             ${LOGIN_URL}\n${dl_promise}        Promise To Wait For Download    /path/to/download/folder\nClick                \\#file_download\n${file_obj}=         Wait For  ${dl_promise}\nFile Should Exist    ${file_obj}[saveAs]\nShould Be True       ${file_obj.suggestedFilename}\n</pre>",
                "shortdoc": "Returns a promise that waits for next download event on page.",
                "tags": [
                    "BrowserControl",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 63
            },
            {
                "name": "Register Keyword To Run On Failure",
                "args": [
                    {
                        "name": "keyword",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword: str | None"
                    },
                    {
                        "name": "args",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args: str"
                    }
                ],
                "doc": "<p>Sets the keyword to execute, when a Browser keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a Browser keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p><code>args</code> are the arguments to the keyword if any.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Take%20Screenshot\" class=\"name\">Take Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NONE</code> or any other robot falsy name, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<pre>\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    Take Screenshot\n${previous kw}=    <a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    NONE\n<a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a>    ${previous kw}\n</pre>",
                "shortdoc": "Sets the keyword to execute, when a Browser keyword fails.",
                "tags": [
                    "Config"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\runonfailure.py",
                "lineno": 30
            },
            {
                "name": "Reload",
                "args": [],
                "doc": "<p>Reloads current active page.</p>",
                "shortdoc": "Reloads current active page.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 269
            },
            {
                "name": "Scroll By",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str | None = None"
                    },
                    {
                        "name": "vertical",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "height",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vertical: str = height"
                    },
                    {
                        "name": "horizontal",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "horizontal: str = 0"
                    },
                    {
                        "name": "behavior",
                        "types": [
                            "ScrollBehavior"
                        ],
                        "defaultValue": "auto",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "behavior: ScrollBehavior = auto"
                    }
                ],
                "doc": "<p>Scrolls an element or the page relative from current position by the given values.</p>\n<p><code>selector</code> Selector of the element. If the selector is <code>${None}</code> or <code>${Empty}</code> the page itself is scrolled. To ensure an element is in view use <a href=\"#Hover\" class=\"name\">Hover</a> instead. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>vertical</code> defines how far and in which direction to scroll vertically. It can be a positive or negative number. Positive scrolls down, like <code>50</code>, negative scrolls up, like <code>-50</code>. It can be a percentage value of the absolute scrollable size, like <code>9.95%</code> or negative like <code>-10%</code>. It can be the string <code>height</code> to defining to scroll exactly one visible height down or up with <code>-height</code>. <i>Be aware that some pages do lazy loading and load more content once you scroll down.</i> The percentage of the current scrollable height is used and may change.</p>\n<p><code>horizontal</code> defines where to scroll horizontally. Works same as vertical but defines positive values for right and negative values for left. <code>width</code> defines to scroll exactly one visible range to the right.</p>\n<p><code>behavior</code> defines whether the scroll happens directly or it scrolls smoothly.</p>",
                "shortdoc": "Scrolls an element or the page relative from current position by the given values.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 436
            },
            {
                "name": "Scroll To",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str | None = None"
                    },
                    {
                        "name": "vertical",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "top",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vertical: str = top"
                    },
                    {
                        "name": "horizontal",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "left",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "horizontal: str = left"
                    },
                    {
                        "name": "behavior",
                        "types": [
                            "ScrollBehavior"
                        ],
                        "defaultValue": "auto",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "behavior: ScrollBehavior = auto"
                    }
                ],
                "doc": "<p>Scrolls an element or the page to an absolute position based on given coordinates.</p>\n<p><code>selector</code> Selector of the element. If the selector is <code>${None}</code> or <code>${Empty}</code> the page itself is scrolled. To ensure an element is in view use <a href=\"#Hover\" class=\"name\">Hover</a> instead. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>vertical</code> defines where to scroll vertically. It can be a positive number, like <code>300</code>. It can be a percentage value of the absolute scrollable size, like <code>50%</code>. It can be a string defining that top or the bottom of the scroll area. &lt; <code>top</code> | <code>bottom</code> &gt; <i>Be aware that some pages do lazy loading and load more content once you scroll down.</i> Bottom defines the current known bottom coordinate.</p>\n<p><code>horizontal</code> defines where to scroll horizontally. Works same as vertical but defines &lt; <code>left</code> | <code>right</code> &gt; as start and end.</p>\n<p><code>behavior</code> defines whether the scroll happens directly or it scrolls smoothly.</p>",
                "shortdoc": "Scrolls an element or the page to an absolute position based on given coordinates.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 392
            },
            {
                "name": "Select Options By",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "SelectAttribute"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: SelectAttribute"
                    },
                    {
                        "name": "values",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*values"
                    }
                ],
                "doc": "<p>Selects options from select element found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the select tag. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Matches based on the chosen attribute with list of <code>values</code>. Possible attributes to match options by: <code>attribute</code></p>\n<p>If no values to select are passed will deselect options in element.</p>",
                "shortdoc": "Selects options from select element found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 509
            },
            {
                "name": "SessionStorage Clear",
                "args": [],
                "doc": "<p>Remove all saved data from the session storage.</p>",
                "shortdoc": "Remove all saved data from the session storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 163
            },
            {
                "name": "SessionStorage Get Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    },
                    {
                        "name": "assertion_operator",
                        "types": [
                            "AssertionOperator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_operator: AssertionOperator | None = None"
                    },
                    {
                        "name": "assertion_expected",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion_expected: Any | None = None"
                    }
                ],
                "doc": "<p>Get saved data from from session storage.</p>\n<p><code>key</code> Named key of the item in the storage.</p>\n<p>See <a href=\"#Assertions\" class=\"name\">Assertions</a> for further details for the assertion arguments. Defaults to None.</p>",
                "shortdoc": "Get saved data from from session storage.",
                "tags": [
                    "Assertion",
                    "Getter",
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 103
            },
            {
                "name": "SessionStorage Remove Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<p>Remove saved data with key from the session storage.</p>\n<p><code>key</code> Name of the item which shall be deleted.</p>",
                "shortdoc": "Remove saved data with key from the session storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 148
            },
            {
                "name": "SessionStorage Set Item",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Save data to session storage.</p>\n<p><code>key</code> The name of the key under which it should be saved.</p>\n<p><code>value</code> The value which shall be saved as a string.</p>",
                "shortdoc": "Save data to session storage.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\webapp_state.py",
                "lineno": 131
            },
            {
                "name": "Set Browser Timeout",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "timeout: timedelta"
                    }
                ],
                "doc": "<p>Sets the timeout used by most input and getter keywords.</p>\n<p><code>timeout</code> Timeout of it is for current playwright context.</p>\n<p>Returns the previous value of the timeout.</p>",
                "shortdoc": "Sets the timeout used by most input and getter keywords.",
                "tags": [
                    "Config",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 184
            },
            {
                "name": "Set Geolocation",
                "args": [
                    {
                        "name": "latitude",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "latitude: float"
                    },
                    {
                        "name": "longitude",
                        "types": [
                            "float"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "longitude: float"
                    },
                    {
                        "name": "accuracy",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "accuracy: float | None = None"
                    }
                ],
                "doc": "<p>Updated the correct Context's geolocation.</p>\n<p>Latitude can be between -90 and 90 and longitude can be between -180 and 180.</p>",
                "shortdoc": "Updated the correct Context's geolocation.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 252
            },
            {
                "name": "Set Offline",
                "args": [
                    {
                        "name": "offline",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "offline: bool = True"
                    }
                ],
                "doc": "<p>Toggles current Context's offline emulation.</p>\n<p><code>offline</code> Toggles the offline mode. Set to False to switch back to online mode. Defaults to True.</p>",
                "shortdoc": "Toggles current Context's offline emulation.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 241
            },
            {
                "name": "Set Retry Assertions For",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "timeout: timedelta"
                    }
                ],
                "doc": "<p>Sets the timeout used in retrying assertions when they fail.</p>\n<p><code>timeout</code></p>\n<p>Returns the previous value of the retry_assertions_until.</p>",
                "shortdoc": "Sets the timeout used in retrying assertions when they fail.",
                "tags": [
                    "Config",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 205
            },
            {
                "name": "Set Viewport Size",
                "args": [
                    {
                        "name": "width",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "width: int"
                    },
                    {
                        "name": "height",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "height: int"
                    }
                ],
                "doc": "<p>Sets current Pages viewport size to specified dimensions.</p>\n<p>In the case of multiple pages in a single browser, each page can have its own viewport size. However, <a href=\"#New%20Context\" class=\"name\">New Context</a> allows to set viewport size (and more) for all later opened pages in the context at once.</p>\n<p><a href=\"#Set%20Viewport%20Size\" class=\"name\">Set Viewport Size</a> will resize the page. A lot of websites don't expect phones to change size, so you should set the viewport size before navigating to the page with <a href=\"#New%20Context\" class=\"name\">New Context</a> before opening the page itself.</p>\n<p><code>width</code> Sets the width size.</p>\n<p><code>height</code> Sets the heigth size.</p>",
                "shortdoc": "Sets current Pages viewport size to specified dimensions.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 217
            },
            {
                "name": "Switch Browser",
                "args": [
                    {
                        "name": "id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "id: str"
                    }
                ],
                "doc": "<p>Switches the currently active Browser to another open Browser. Returns a stable identifier for the previous browser. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Browser and related concepts.</p>\n<p><code>id</code> Id of the browser to be changed to. Starting at 0.</p>",
                "shortdoc": "Switches the currently active Browser to another open Browser. Returns a stable identifier for the previous browser. See `Browser, Context and Page` for more information about Browser and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 715
            },
            {
                "name": "Switch Context",
                "args": [
                    {
                        "name": "id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "id: str"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Switches the active BrowserContext to another open context. Returns a stable identifier for the previous context. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Context and related concepts.</p>\n<p><code>id</code> Id of the context to be changed to. Randomly generated UUID.</p>\n<p><code>browser</code> &lt; <code>CURRENT</code> | str&gt; Switch context in specified browser. If value is not \"CURRENT\" it should be an the id of the browser where to switch context.</p>",
                "shortdoc": "Switches the active BrowserContext to another open context. Returns a stable identifier for the previous context. See `Browser, Context and Page` for more information about Context and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 728
            },
            {
                "name": "Switch Page",
                "args": [
                    {
                        "name": "id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "id: str"
                    },
                    {
                        "name": "context",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "context: str = CURRENT"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Switches the active browser page to another open page by <code>id</code> or <code>NEW</code>. Returns a stable identifier <code>id</code> for the previous page. See <a href=\"#Browser%2C%20Context%20and%20Page\" class=\"name\">Browser, Context and Page</a> for more information about Page and related concepts.</p>\n<p><code>id</code> &lt; <code>CURRENT</code> | <code>NEW </code> | str&gt; Id of the page to be changed to or</p>\n<p><code>NEW</code> for a page opened after the current page. This may timeout if no new pages exists before library timeout. See <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a> for how to change the timeout.</p>\n<p>With <code>CURRENT</code> you can get the <code>id</code> of the \"CURRENT\" page</p>\n<p><code>context</code> &lt; <code>CURRENT</code> | str&gt; Switch page in specified context. If value is not \"CURRENT\" it should be the id of the context where to switch page.</p>\n<p><code>browser</code> &lt; <code>CURRENT</code> | str&gt; Switch page in specified browser. If value is not \"CURRENT\" it should be the id of the browser where to switch page.</p>",
                "shortdoc": "Switches the active browser page to another open page by ``id`` or ``NEW``. Returns a stable identifier ``id`` for the previous page. See `Browser, Context and Page` for more information about Page and related concepts.",
                "tags": [
                    "BrowserControl",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\playwright_state.py",
                "lineno": 745
            },
            {
                "name": "Take Screenshot",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "robotframework-browser-screenshot-{index}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = robotframework-browser-screenshot-{index}"
                    },
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str = "
                    },
                    {
                        "name": "fullPage",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fullPage: bool = False"
                    },
                    {
                        "name": "fileType",
                        "types": [
                            "ScreenshotFileTypes"
                        ],
                        "defaultValue": "png",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fileType: ScreenshotFileTypes = png"
                    },
                    {
                        "name": "quality",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "quality: str = "
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Takes a screenshot of the current window and saves it.</p>\n<p><code>filename</code> Filename into which to save. The file will be saved into the robot framework ${OUTPUTDIR}/browser/screenshot directory by default, but it can overwritten by providing custom path or filename. String <code>{index}</code> in filename will be replaced with a rolling number. Use this to not override filenames. If filename equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. The image is saved temporally to the disk and warning is displayed if removing the temporary file fails. If the filename is an absolute path, then filename is considered as an absolute path.</p>\n<p>The ${OUTPUTDIR}/browser/ is removed at the first suite startup.</p>\n<p><code>selector</code> Take a screenshot of the element matched by selector. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors. If not provided take a screenshot of current viewport.</p>\n<p><code>fullPage</code> When True, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Defaults to False.</p>\n<p><code>fileType</code> &lt;\"png\"|\"jpeg\"&gt; Specify screenshot type, defaults to png.</p>\n<p><code>quality</code> The quality of the image, between 0-100. Not applicable to png images.</p>\n<p><code>timeout</code> Maximum time in milliseconds, defaults to 30 seconds, pass 0 to disable timeout. The default value can be changed by using the <a href=\"#Set%20Browser%20Timeout\" class=\"name\">Set Browser Timeout</a> keyword.</p>",
                "shortdoc": "Takes a screenshot of the current window and saves it.",
                "tags": [
                    "PageContent"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\browser_control.py",
                "lineno": 81
            },
            {
                "name": "Type Secret",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "secret",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret: str"
                    },
                    {
                        "name": "delay",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:00",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay: timedelta = 0:00:00"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given secret from <code>variable_name</code> into the text field found by <code>selector</code>.</p>\n<p>This keyword does not log secret in Robot Framework logs. If <code>enable_playwright_debug</code> is enabled in the library import, secret will be always visible as plain text in the playwright debug logs, regardless of the Robot Framework log level.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>secret</code> Environment variable name with % prefix or a local variable with $ prefix that has the secret text value. Variable names can be used with and without curly braces.</p>\n<p>Example: <code>$Password</code> and <code>${Password}</code> resolve the robot framework variable. <code>%ENV_PWD</code> and <code>%{ENV_PWD}</code> resolve to the environment variable <code>ENV_PWD</code>.</p>\n<p><code>delay</code> Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to <code>0 ms</code>. Example: <code>50 ms</code></p>\n<p><code>clear</code> Set to false, if the field shall not be cleared before typing. Defaults to true.</p>\n<p>See <a href=\"#Type%20Text\" class=\"name\">Type Text</a> for details.</p>",
                "shortdoc": "Types the given secret from ``variable_name`` into the text field found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 119
            },
            {
                "name": "Type Text",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "txt",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "txt: str"
                    },
                    {
                        "name": "delay",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": "0:00:00",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay: timedelta = 0:00:00"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given <code>txt</code> into the text field found by <code>selector</code>.</p>\n<p>Sends a <code>keydown</code>, <code>keypress/input</code>, and <code>keyup</code> event for each character in the text.</p>\n<p><code>selector</code> Selector of the text field. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>txt</code> Text for the text field.</p>\n<p><code>delay</code> Delay between the single key strokes. It may be either a number or a Robot Framework time string. Time strings are fully explained in an appendix of Robot Framework User Guide. Defaults to <code>0 ms</code>. Example: <code>50 ms</code></p>\n<p><code>clear</code> Set to false, if the field shall not be cleared before typing. Defaults to true.</p>\n<p>See <a href=\"#Fill%20Text\" class=\"name\">Fill Text</a> for direct filling of the full text at once.</p>",
                "shortdoc": "Types the given ``txt`` into the text field found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 51
            },
            {
                "name": "Uncheck Checkbox",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    }
                ],
                "doc": "<p>Unchecks the checkbox found by <code>selector</code>.</p>\n<p><code>selector</code> Selector of the checkbox. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p>Does nothing if the element is not checked/selected.</p>",
                "shortdoc": "Unchecks the checkbox found by ``selector``.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\interaction.py",
                "lineno": 494
            },
            {
                "name": "Upload File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "PathLike"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: PathLike"
                    }
                ],
                "doc": "<p><b>DEPRECATED!!</b> Use keyword <a href=\"#Promise%20To%20Upload%20File\" class=\"name\">Promise To Upload File</a> instead. Upload file from <code>path</code> into next file chooser dialog on page.</p>\n<p><code>path</code> Path to file to be uploaded.</p>\n<p>Example use:</p>\n<pre>\nUpload File    ${CURDIR}/test_upload_file\nClick          \\#file_chooser\n</pre>",
                "shortdoc": "*DEPRECATED!!* Use keyword `Promise To Upload File` instead. Upload file from ``path`` into next file chooser dialog on page.",
                "tags": [
                    "PageContent",
                    "Setter"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 161
            },
            {
                "name": "Wait For",
                "args": [
                    {
                        "name": "promises",
                        "types": [
                            "Future"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*promises: Future"
                    }
                ],
                "doc": "<p>Waits for promises to finish and returns results from them. Returns one result if one promise waited. Otherwise returns an array of results. If one fails, then this keyword will fail.</p>\n<p><code>promises</code> <b>Work in progress</b></p>\n<p>Example:</p>\n<pre>\n${promise}=     Promise To            Wait For Response     matcher=     timeout=3\nClick           \\#delayed_request\n${body}=        Wait For              ${promise}\n</pre>",
                "shortdoc": "Waits for promises to finish and returns results from them. Returns one result if one promise waited. Otherwise returns an array of results. If one fails, then this keyword will fail.",
                "tags": [
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 113
            },
            {
                "name": "Wait For All Promises",
                "args": [],
                "doc": "<p>Waits for all promises to finish. If one fails, then this keyword will fail.</p>",
                "shortdoc": "Waits for all promises to finish. If one fails, then this keyword will fail.",
                "tags": [
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 132
            },
            {
                "name": "Wait For Download",
                "args": [
                    {
                        "name": "saveAs",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "saveAs: str = "
                    }
                ],
                "doc": "<p><b>DEPRECATED!!</b> Use keyword <a href=\"#Promise%20To%20Wait%20For%20Download\" class=\"name\">Promise To Wait For Download</a> instead.</p>",
                "shortdoc": "*DEPRECATED!!* Use keyword `Promise To Wait For Download` instead.",
                "tags": [
                    "BrowserControl",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\promises.py",
                "lineno": 93
            },
            {
                "name": "Wait For Elements State",
                "args": [
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "selector: str"
                    },
                    {
                        "name": "state",
                        "types": [
                            "ElementState"
                        ],
                        "defaultValue": "visible",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "state: ElementState = visible"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits for the element found by <code>selector</code> to satisfy state option.</p>\n<p>State options could be either appear/disappear from dom, or become visible/hidden. If at the moment of calling the keyword, the selector already satisfies the condition, the keyword will return immediately.</p>\n<p>If the selector doesn't satisfy the condition within the timeout the keyword will FAIL.</p>\n<p><code>selector</code> Selector of the corresponding object. See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>state</code> See <a href=\"#ElementState\" class=\"name\">ElementState</a> for explaination.</p>\n<p>Note that element without any content or with display:none has an empty bounding box and is not considered visible.</p>\n<p><code>timeout</code> uses default timeout of 10 seconds if not set.</p>\n<p><code>message</code> overrides the default error message. The <code>message</code> argument accepts <span class=\"name\">{selector}</span>, <span class=\"name\">{function}</span>, and <span class=\"name\">{timeout}</span> <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format</a> options. The <span class=\"name\">{function}</span> formatter is same <code>state</code> argument value.</p>",
                "shortdoc": "Waits for the element found by ``selector`` to satisfy state option.",
                "tags": [
                    "PageContent",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\waiter.py",
                "lineno": 27
            },
            {
                "name": "Wait For Function",
                "args": [
                    {
                        "name": "function",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "function: str"
                    },
                    {
                        "name": "selector",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "selector: str = "
                    },
                    {
                        "name": "polling",
                        "types": [
                            "str",
                            "timedelta"
                        ],
                        "defaultValue": "raf",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "polling: str | timedelta = raf"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Polls JavaScript expression or function in browser until it returns a (JavaScript) truthy value.</p>\n<p><code>function</code> A valid javascript function or a javascript function body. For example <code>() =&gt; true</code> and <code>true</code> will behave similarly.</p>\n<p><code>selector</code> Selector to resolve and pass to the JavaScript function. This will be the first argument the function receives. If given a selector a function is necessary, with an argument to capture the elementhandle. For example <code>(element) =&gt; document.activeElement === element</code> See the <a href=\"#Finding%20elements\" class=\"name\">Finding elements</a> section for details about the selectors.</p>\n<p><code>polling</code> Default polling value of \"raf\" polls in a callback for <code>requestAnimationFrame</code>. Any other value for polling will be parsed as a robot framework time for interval between polls.</p>\n<p><code>timeout</code> Uses default timeout of 10 seconds if not set.</p>\n<p><code>message</code> overrides the default error message. The <code>message</code> argument accepts <span class=\"name\">{selector}</span>, <span class=\"name\">{function}</span>, and <span class=\"name\">{timeout}</span> <a href=\"https://docs.python.org/3/library/stdtypes.html#str.format\">format</a> options.</p>\n<p>Example usage:</p>\n<pre>\n${promise}    Promise To      Wait For Function    element =&gt; element.style.width==\"100%\"    selector=\\#progress_bar    timeout=4s\nClick         \\#progress_bar\nWait For      ${promise}\n</pre>",
                "shortdoc": "Polls JavaScript expression or function in browser until it returns a (JavaScript) truthy value.",
                "tags": [
                    "PageContent",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\waiter.py",
                "lineno": 116
            },
            {
                "name": "Wait For Navigation",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "regex",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "regex: bool = False"
                    },
                    {
                        "name": "wait_until",
                        "types": [
                            "PageLoadStates"
                        ],
                        "defaultValue": "load",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wait_until: PageLoadStates = load"
                    }
                ],
                "doc": "<p>Waits until page has navigated to given <code>url</code>.</p>\n<p><code>url</code>  expected navigation target address either the exact match or a JavaScript-like regex wrapped in <code>/</code> symbols.</p>\n<p><code>timeout</code> Timeout in milliseconds. Uses default timeout of 10 seconds if not set.</p>\n<p><code>waitUntil</code> &lt;\"load\"|\"domcontentloaded\"|\"networkidle\"&gt; When to consider operation succeeded, defaults to load. Events can be either: 'domcontentloaded' - consider operation to be finished when the DOMContentLoaded event is fired. 'load' - consider operation to be finished when the load event is fired. 'networkidle' - consider operation to be finished when there are no network connections for at least 500 ms.</p>",
                "shortdoc": "Waits until page has navigated to given ``url``.",
                "tags": [
                    "HTTP",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\network.py",
                "lineno": 177
            },
            {
                "name": "Wait For Request",
                "args": [
                    {
                        "name": "matcher",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "matcher: str = "
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Waits for request matching matcher to be made.</p>\n<p><code>matcher</code> Request URL string, JavaScript regex or JavaScript function to match request by. By default (with empty string) matches first available request.</p>\n<p><code>timeout</code> Timeout in seconds. Uses default timeout if not set.</p>",
                "shortdoc": "Waits for request matching matcher to be made.",
                "tags": [
                    "HTTP",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\network.py",
                "lineno": 126
            },
            {
                "name": "Wait For Response",
                "args": [
                    {
                        "name": "matcher",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "matcher: str = "
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Waits for response matching matcher and returns python dict with contents.</p>\n<p><code>matcher</code> Request URL string, JavaScript regex or JavaScript function to match request by. By default (with empty string) matches first available request.</p>\n<p><code>timeout</code> Timeout in seconds. Uses default timeout if not set.</p>\n<p>The response is a Python dictionary with following attributes:</p>\n<ul>\n<li><code>status</code> &lt;int&gt; The status code of the response.</li>\n<li><code>statusText</code> &lt;str&gt; Status text corresponding to <code>status</code>, e.g OK or INTERNAL SERVER ERROR.</li>\n<li><code>body</code> &lt;dict | str&gt; The response body. If the body can be parsed as a JSON obejct, it will be returned as Python dictionary, otherwise it is returned as a string.</li>\n<li><code>headers</code> &lt;dict&gt; A dictionary containing all response headers.</li>\n<li><code>ok</code> &lt;bool&gt; Whether the request was successfull, i.e. the <code>status</code> is range 200-299.</li>\n<li><code>request</code> &lt;dict&gt; containing <code>method</code> &lt;str&gt;, <code>headers</code> &lt;dict&gt; and <code>postData</code> &lt;dict&gt; | &lt;str&gt;</li>\n</ul>",
                "shortdoc": "Waits for response matching matcher and returns python dict with contents.",
                "tags": [
                    "HTTP",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\network.py",
                "lineno": 140
            },
            {
                "name": "Wait Until Network Is Idle",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Waits until there has been at least one instance of 500 ms of no network traffic on the page after loading.</p>\n<p>Doesn't wait for network traffic that wasn't initiated within 500ms of page load.</p>\n<p><code>timeout</code> Timeout in milliseconds. Uses default timeout of 10 seconds if not set.</p>",
                "shortdoc": "Waits until there has been at least one instance of 500 ms of no network traffic on the page after loading.",
                "tags": [
                    "HTTP",
                    "Wait"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\Browser\\keywords\\network.py",
                "lineno": 162
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "AreaFields",
                    "type": "Enum",
                    "doc": "<p>Enumeration that defines which coordinates of an area should be selected.</p>\n<p>Used by <a href=\"#Get%20Scroll%20Position\" class=\"name\">Get Scroll Position</a>.</p>\n<p><code>ALL</code> defines that all fields are selected and a dictionary with all information is returned.</p>",
                    "members": [
                        {
                            "name": "top",
                            "value": "1"
                        },
                        {
                            "name": "left",
                            "value": "2"
                        },
                        {
                            "name": "bottom",
                            "value": "3"
                        },
                        {
                            "name": "right",
                            "value": "4"
                        },
                        {
                            "name": "ALL",
                            "value": "5"
                        }
                    ]
                },
                {
                    "name": "AssertionOperator",
                    "type": "Enum",
                    "doc": "<p>Currently supported assertion operators are:</p>\n<table border=\"1\">\n<tr>\n<th>Operator</th>\n<th>Alternative Operators</th>\n<th>Description</th>\n<th>Validate Equivalent</th>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td><code>equal</code>, <code>should be</code></td>\n<td>Checks if returned value is equal to expected value.</td>\n<td><code>value == expected</code></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td><code>inequal</code>, <code>should not be</code></td>\n<td>Checks if returned value is not equal to expected value.</td>\n<td><code>value != expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td><code>greater than</code></td>\n<td>Checks if returned value is greater than expected value.</td>\n<td><code>value &gt; expected</code></td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td></td>\n<td>Checks if returned value is greater than or equal to expected value.</td>\n<td><code>value &gt;= expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td><code>less than</code></td>\n<td>Checks if returned value is less than expected value.</td>\n<td><code>value &lt; expected</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td></td>\n<td>Checks if returned value is less than or equal to expected value.</td>\n<td><code>value &lt;= expected</code></td>\n</tr>\n<tr>\n<td><code>*=</code></td>\n<td><code>contains</code></td>\n<td>Checks if returned value contains expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>not contains</code></td>\n<td>Checks if returned value does not contain expected value as substring.</td>\n<td><code>expected in value</code></td>\n</tr>\n<tr>\n<td><code>^=</code></td>\n<td><code>should start with</code>, <code>starts</code></td>\n<td>Checks if returned value starts with expected value.</td>\n<td><code>re.search(f\"^{expected}\", value)</code></td>\n</tr>\n<tr>\n<td><code>$=</code></td>\n<td><code>should end with</code>, <code>ends</code></td>\n<td>Checks if returned value ends with expected value.</td>\n<td><code>re.search(f\"{expected}$\", value)</code></td>\n</tr>\n<tr>\n<td><code>matches</code></td>\n<td></td>\n<td>Checks if given RegEx matches minimum once in returned value.</td>\n<td><code>re.search(expected, value)</code></td>\n</tr>\n<tr>\n<td><code>validate</code></td>\n<td></td>\n<td>Checks if given Python expression evaluates to <code>True</code>.</td>\n<td></td>\n</tr>\n<tr>\n<td><code>evaluate</code></td>\n<td><code>then</code></td>\n<td>When using this operator, the keyword does return the evaluated Python expression.</td>\n<td></td>\n</tr>\n</table>",
                    "members": [
                        {
                            "name": "equal",
                            "value": "=="
                        },
                        {
                            "name": "==",
                            "value": "=="
                        },
                        {
                            "name": "should be",
                            "value": "=="
                        },
                        {
                            "name": "inequal",
                            "value": "!="
                        },
                        {
                            "name": "!=",
                            "value": "!="
                        },
                        {
                            "name": "should not be",
                            "value": "!="
                        },
                        {
                            "name": "less than",
                            "value": "<"
                        },
                        {
                            "name": "<",
                            "value": "<"
                        },
                        {
                            "name": "greater than",
                            "value": ">"
                        },
                        {
                            "name": ">",
                            "value": ">"
                        },
                        {
                            "name": "<=",
                            "value": "<="
                        },
                        {
                            "name": ">=",
                            "value": ">="
                        },
                        {
                            "name": "contains",
                            "value": "*="
                        },
                        {
                            "name": "not contains",
                            "value": "not contains"
                        },
                        {
                            "name": "*=",
                            "value": "*="
                        },
                        {
                            "name": "starts",
                            "value": "^="
                        },
                        {
                            "name": "^=",
                            "value": "^="
                        },
                        {
                            "name": "should start with",
                            "value": "^="
                        },
                        {
                            "name": "ends",
                            "value": "$="
                        },
                        {
                            "name": "should end with",
                            "value": "$="
                        },
                        {
                            "name": "$=",
                            "value": "$="
                        },
                        {
                            "name": "matches",
                            "value": "$"
                        },
                        {
                            "name": "validate",
                            "value": "validate"
                        },
                        {
                            "name": "then",
                            "value": "then"
                        },
                        {
                            "name": "evaluate",
                            "value": "then"
                        }
                    ]
                },
                {
                    "name": "AutoClosingLevel",
                    "type": "Enum",
                    "doc": "<p>Controls when contexts and pages are closed during the test execution.</p>\n<p>If automatic closing level is <span class=\"name\">TEST</span>, contexts and pages that are created during a single test are automatically closed when the test ends. Contexts and pages that are created during suite setup are closed when the suite teardown ends.</p>\n<p>If automatic closing level is <span class=\"name\">SUITE</span>, all contexts and pages that are created during the test suite are closed when the suite teardown ends.</p>\n<p>If automatic closing level is <span class=\"name\">MANUAL</span>, nothing is closed automatically during the test execution is ongoing.</p>\n<p>All browsers are automatically closed, always and regardless of the automatic closing level at the end of the test execution. This will also close all remaining pages and contexts.</p>\n<p>Automatic closing can be configured or switched off with the auto_closing_level library import parameter.</p>\n<p>See: <a href=\"#Importing\" class=\"name\">Importing</a></p>",
                    "members": [
                        {
                            "name": "SUITE",
                            "value": "1"
                        },
                        {
                            "name": "TEST",
                            "value": "2"
                        },
                        {
                            "name": "MANUAL",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "BoundingBoxFields",
                    "type": "Enum",
                    "doc": "<p>Enumeration that defines which location information of an element should be selected.</p>\n<p>Used by <a href=\"#Get%20BoundingBox\" class=\"name\">Get BoundingBox</a>.</p>\n<p><code>x</code> / <code>y</code> defines the position of the top left corner of an element.</p>\n<p><code>width</code> / <code>height</code> defines the size of an elements bounding box.</p>\n<p><code>ALL</code> defines that all fields are selected and a dictionary with all information is returned.</p>",
                    "members": [
                        {
                            "name": "width",
                            "value": "1"
                        },
                        {
                            "name": "height",
                            "value": "2"
                        },
                        {
                            "name": "x",
                            "value": "3"
                        },
                        {
                            "name": "y",
                            "value": "4"
                        },
                        {
                            "name": "ALL",
                            "value": "5"
                        }
                    ]
                },
                {
                    "name": "ColorScheme",
                    "type": "Enum",
                    "doc": "<p>Emulates 'prefers-colors-scheme' media feature.</p>\n<p>See <a href=\"https://playwright.dev/docs/api/class-page?_highlight=emulatemedia#pageemulatemediaparams\">emulateMedia(options)</a> for more details.</p>\n<p>Used by <a href=\"#New%20Context\" class=\"name\">New Context</a>.</p>",
                    "members": [
                        {
                            "name": "dark",
                            "value": "1"
                        },
                        {
                            "name": "light",
                            "value": "2"
                        },
                        {
                            "name": "no-preference",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "CookieSameSite",
                    "type": "Enum",
                    "doc": "<p>An enumeration.</p>",
                    "members": [
                        {
                            "name": "Strict",
                            "value": "Strict"
                        },
                        {
                            "name": "Lax",
                            "value": "Lax"
                        },
                        {
                            "name": "None",
                            "value": "None"
                        }
                    ]
                },
                {
                    "name": "CookieType",
                    "type": "Enum",
                    "doc": "<p>Enum that defines the Cookie type.</p>",
                    "members": [
                        {
                            "name": "dictionary",
                            "value": "1"
                        },
                        {
                            "name": "dict",
                            "value": "1"
                        },
                        {
                            "name": "string",
                            "value": "2"
                        },
                        {
                            "name": "str",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "DialogAction",
                    "type": "Enum",
                    "doc": "<p>Enum that defines how to handle a dialog.</p>",
                    "members": [
                        {
                            "name": "accept",
                            "value": "1"
                        },
                        {
                            "name": "dismiss",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "ElementState",
                    "type": "Enum",
                    "doc": "<p>Enum that defines the state an element can have.</p>\n<p>The following <code>states</code> are possible:</p>\n<table border=\"1\">\n<tr>\n<th>State</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><code>attached</code></td>\n<td>to be present in DOM.</td>\n</tr>\n<tr>\n<td><code>detached</code></td>\n<td>to not be present in DOM.</td>\n</tr>\n<tr>\n<td><code>visible</code></td>\n<td>to have non or empty bounding box and no visibility:hidden.</td>\n</tr>\n<tr>\n<td><code>hidden</code></td>\n<td>to be detached from DOM, or have an empty bounding box or visibility:hidden.</td>\n</tr>\n<tr>\n<td><code>enabled</code></td>\n<td>to not be <code>disabled</code>.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>to be <code>disabled</code>. Can be used on &lt;button&gt;, &lt;fieldset&gt;, &lt;input&gt;, &lt;optgroup&gt;, &lt;option&gt;, &lt;select&gt; and &lt;textarea&gt;.</td>\n</tr>\n<tr>\n<td><code>editable</code></td>\n<td>to not be <code>readOnly</code>.</td>\n</tr>\n<tr>\n<td><code>readonly</code></td>\n<td>to be <code>readOnly</code>. Can be used on &lt;input&gt; and &lt;textarea&gt;.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td>to be <code>selected</code>. Can be used on &lt;option&gt;.</td>\n</tr>\n<tr>\n<td><code>deselected</code></td>\n<td>to not be <code>selected</code>.</td>\n</tr>\n<tr>\n<td><code>focused</code></td>\n<td>to be the <code>activeElement</code>.</td>\n</tr>\n<tr>\n<td><code>defocused</code></td>\n<td>to not be the <code>activeElement</code>.</td>\n</tr>\n<tr>\n<td><code>checked</code></td>\n<td>to be <code>checked</code>. Can be used on &lt;input&gt;.</td>\n</tr>\n<tr>\n<td><code>unchecked</code></td>\n<td>to not be <code>checked</code>.</td>\n</tr>\n</table>\n<p>Used by: <a href=\"#Wait%20For%20Elements%20State\" class=\"name\">Wait For Elements State</a></p>",
                    "members": [
                        {
                            "name": "attached",
                            "value": "1"
                        },
                        {
                            "name": "detached",
                            "value": "2"
                        },
                        {
                            "name": "visible",
                            "value": "3"
                        },
                        {
                            "name": "hidden",
                            "value": "4"
                        },
                        {
                            "name": "enabled",
                            "value": "5"
                        },
                        {
                            "name": "disabled",
                            "value": "6"
                        },
                        {
                            "name": "editable",
                            "value": "7"
                        },
                        {
                            "name": "readonly",
                            "value": "8"
                        },
                        {
                            "name": "selected",
                            "value": "9"
                        },
                        {
                            "name": "deselected",
                            "value": "10"
                        },
                        {
                            "name": "focused",
                            "value": "11"
                        },
                        {
                            "name": "defocused",
                            "value": "12"
                        },
                        {
                            "name": "checked",
                            "value": "13"
                        },
                        {
                            "name": "unchecked",
                            "value": "14"
                        }
                    ]
                },
                {
                    "name": "ElementStateKey",
                    "type": "Enum",
                    "doc": "<p>Enum that defines the state an element can have directly.</p>\n<p>See <a href=\"#ElementState\" class=\"name\">ElementState</a> for explaination.</p>\n<p>Used by: <a href=\"#Get%20Element%20State\" class=\"name\">Get Element State</a></p>",
                    "members": [
                        {
                            "name": "attached",
                            "value": "1"
                        },
                        {
                            "name": "visible",
                            "value": "2"
                        },
                        {
                            "name": "disabled",
                            "value": "3"
                        },
                        {
                            "name": "readonly",
                            "value": "4"
                        },
                        {
                            "name": "selected",
                            "value": "5"
                        },
                        {
                            "name": "focused",
                            "value": "6"
                        },
                        {
                            "name": "checked",
                            "value": "7"
                        }
                    ]
                },
                {
                    "name": "KeyAction",
                    "type": "Enum",
                    "doc": "<p>Enum that defines which <a href=\"#Keyboard%20Key\" class=\"name\">Keyboard Key</a> action to perform.</p>",
                    "members": [
                        {
                            "name": "down",
                            "value": "1"
                        },
                        {
                            "name": "up",
                            "value": "2"
                        },
                        {
                            "name": "press",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "KeyboardInputAction",
                    "type": "Enum",
                    "doc": "<p>Enum that defines how <a href=\"#Keyboard%20Input\" class=\"name\">Keyboard Input</a> adds the text into the page.</p>\n<p><code>insertText</code> is mostly similar to pasting of text.</p>\n<p><code>type</code> is similar to typing by pressing keys on the keyboard.</p>",
                    "members": [
                        {
                            "name": "insertText",
                            "value": "1"
                        },
                        {
                            "name": "type",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "KeyboardModifier",
                    "type": "Enum",
                    "doc": "<p>Modifier keys to press while doing other actions.</p>\n<p>Modifiers that are pressed during the <a href=\"#Hover\" class=\"name\">Hover</a> or <a href=\"#Click\" class=\"name\">Click</a>.</p>",
                    "members": [
                        {
                            "name": "Alt",
                            "value": "1"
                        },
                        {
                            "name": "Control",
                            "value": "2"
                        },
                        {
                            "name": "Meta",
                            "value": "3"
                        },
                        {
                            "name": "Shift",
                            "value": "4"
                        }
                    ]
                },
                {
                    "name": "MouseButton",
                    "type": "Enum",
                    "doc": "<p>Enum that defines which mouse button to use.</p>\n<p>Used by: <a href=\"#Click\" class=\"name\">Click</a> and <a href=\"#MouseButton\" class=\"name\">Mouse Button</a>.</p>",
                    "members": [
                        {
                            "name": "left",
                            "value": "1"
                        },
                        {
                            "name": "middle",
                            "value": "2"
                        },
                        {
                            "name": "right",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "MouseButtonAction",
                    "type": "Enum",
                    "doc": "<p>Enum that defines which <a href=\"#MouseButton\" class=\"name\">Mouse Button</a> action to perform.</p>",
                    "members": [
                        {
                            "name": "click",
                            "value": "1"
                        },
                        {
                            "name": "down",
                            "value": "2"
                        },
                        {
                            "name": "up",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "PageLoadStates",
                    "type": "Enum",
                    "doc": "<p>Enum that defines available page load states.</p>",
                    "members": [
                        {
                            "name": "load",
                            "value": "1"
                        },
                        {
                            "name": "domcontentloaded",
                            "value": "2"
                        },
                        {
                            "name": "networkidle",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "RequestMethod",
                    "type": "Enum",
                    "doc": "<p>Enum that defines the request type.</p>\n<p>Used by: <a href=\"#Http\" class=\"name\">HTTP</a> .</p>",
                    "members": [
                        {
                            "name": "HEAD",
                            "value": "1"
                        },
                        {
                            "name": "GET",
                            "value": "2"
                        },
                        {
                            "name": "POST",
                            "value": "3"
                        },
                        {
                            "name": "PUT",
                            "value": "4"
                        },
                        {
                            "name": "PATCH",
                            "value": "5"
                        },
                        {
                            "name": "DELETE",
                            "value": "6"
                        }
                    ]
                },
                {
                    "name": "ScreenshotFileTypes",
                    "type": "Enum",
                    "doc": "<p>Enum that defines available file types for screenshots.</p>",
                    "members": [
                        {
                            "name": "png",
                            "value": "1"
                        },
                        {
                            "name": "jpeg",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "ScrollBehavior",
                    "type": "Enum",
                    "doc": "<p>Enum that controls the behavior of scrolling.</p>\n<p><code>smooth</code></p>",
                    "members": [
                        {
                            "name": "auto",
                            "value": "1"
                        },
                        {
                            "name": "smooth",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "SelectAttribute",
                    "type": "Enum",
                    "doc": "<p>Enum that defines the attribute of an &lt;option&gt; element in a &lt;select&gt;-list.</p>\n<p>This defines by what attribute an option is selected/chosen.</p>\n<pre>\n&lt;select class=\"my_drop_down\"&gt;\n  &lt;option value=\"0: Object\"&gt;None&lt;/option&gt;\n  &lt;option value=\"1: Object\"&gt;Some&lt;/option&gt;\n  &lt;option value=\"2: Object\"&gt;Other&lt;/option&gt;\n&lt;/select&gt;\n</pre>\n<p><code>value</code> of the first option would be <code>0: Object</code>.</p>\n<p><code>label</code> / <code>text</code> both defines the innerText which would be <code>None</code> for first element.</p>\n<p><code>index</code> 0 indexed number of an option. Would be <code>0</code> for the first element.</p>",
                    "members": [
                        {
                            "name": "value",
                            "value": "1"
                        },
                        {
                            "name": "label",
                            "value": "2"
                        },
                        {
                            "name": "text",
                            "value": "2"
                        },
                        {
                            "name": "index",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "SelectionType",
                    "type": "Enum",
                    "doc": "<p>Enum that defines if the current id or all ids shall be returned.</p>\n<p><code>ACTIVE</code> / <code>CURRENT</code> defines to return only the id of the currently active instance of a Browser/Context/Page.</p>\n<p><code>ALL</code> / <code>ANY</code> defines to return ids of all instances.</p>\n<p>Used by: <a href=\"#Get%20Browser%20Ids\" class=\"name\">Get Browser IDs</a> <a href=\"#Get%20Context%20Ids\" class=\"name\">Get Context IDs</a> and <a href=\"#Get%20Page%20Ids\" class=\"name\">Get Page IDs</a>.</p>",
                    "members": [
                        {
                            "name": "ACTIVE",
                            "value": "1"
                        },
                        {
                            "name": "CURRENT",
                            "value": "1"
                        },
                        {
                            "name": "ALL",
                            "value": "2"
                        },
                        {
                            "name": "ANY",
                            "value": "2"
                        }
                    ]
                },
                {
                    "name": "SizeFields",
                    "type": "Enum",
                    "doc": "<p>Enum that defines how the returned size is filtered.</p>\n<p><code>ALL</code> defines that the size is returned as a dictionary. <code>{'width': &lt;float&gt;, 'height': &lt;float&gt;}.</code></p>\n<p><code>width</code> / <code>height</code> will return a single float value of the chosen dimension.</p>\n<p>Used by: <a href=\"#Get%20Viewport%20Size\" class=\"name\">Get Viewport Size</a>, <a href=\"#Get%20Scroll%20Size\" class=\"name\">Get Scroll Size</a> and <a href=\"#Get%20Client%20Size\" class=\"name\">Get Client Size</a>.</p>",
                    "members": [
                        {
                            "name": "width",
                            "value": "1"
                        },
                        {
                            "name": "height",
                            "value": "2"
                        },
                        {
                            "name": "ALL",
                            "value": "3"
                        }
                    ]
                },
                {
                    "name": "SupportedBrowsers",
                    "type": "Enum",
                    "doc": "<p>Defines which browser shall be started.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Browser with this engine</th>\n</tr>\n<tr>\n<td><code>chromium</code></td>\n<td>Google Chrome, Microsoft Edge (since 2020), Opera</td>\n</tr>\n<tr>\n<td><code>firefox</code></td>\n<td>Mozilla Firefox</td>\n</tr>\n<tr>\n<td><code>webkit</code></td>\n<td>Apple Safari, Mail, AppStore on MacOS and iOS</td>\n</tr>\n</table>\n<p>Since <a href=\"https://github.com/microsoft/playwright\">Playwright</a> comes with a pack of builtin binaries for all browsers, no additional drivers e.g. geckodriver are needed.</p>\n<p>All these browsers that cover more than 85% of the world wide used browsers, can be tested on Windows, Linux and MacOS. Theres is not need for dedicated machines anymore.</p>",
                    "members": [
                        {
                            "name": "chromium",
                            "value": "1"
                        },
                        {
                            "name": "firefox",
                            "value": "2"
                        },
                        {
                            "name": "webkit",
                            "value": "3"
                        }
                    ]
                }
            ],
            "typedDicts": [
                {
                    "name": "GeoLocation",
                    "type": "TypedDict",
                    "doc": "<p>Defines the geolocation.</p>\n<ul>\n<li><code>latitude</code> Latitude between -90 and 90.</li>\n<li><code>longitude</code> Longitude between -180 and 180.</li>\n<li><code>accuracy</code> <b>Optional</b> Non-negative accuracy value. Defaults to 0.</li>\n</ul>\n<p>Example usage: <code>{'latitude': 59.95, 'longitude': 30.31667}</code></p>",
                    "items": [
                        {
                            "key": "longitude",
                            "type": "float",
                            "required": true
                        },
                        {
                            "key": "latitude",
                            "type": "float",
                            "required": true
                        },
                        {
                            "key": "accuracy",
                            "type": "float",
                            "required": false
                        }
                    ]
                },
                {
                    "name": "HttpCredentials",
                    "type": "TypedDict",
                    "doc": "<p>Sets the credentials for http basic-auth.</p>\n<p>Can be defined as robot dictionary or as string literal.</p>\n<p>Example as literal:</p>\n<pre>\n<a href=\"#New%20Context\" class=\"name\">New Context</a>    httpCredentials={'username': 'admin', 'password': '123456'}\n</pre>\n<p>Example as robot variable</p>\n<pre>\n<b>***</b> <b>Variables</b> <b>***</b>\n&amp;{credentials}=    username=admin    password=123456\n\n<b>***</b> <b>Keywords</b> <b>***</b>\nOpen Context\n   <a href=\"#New%20Context\" class=\"name\">New Context</a>    httpCredentials=${credentials}\n</pre>",
                    "items": [
                        {
                            "key": "username",
                            "type": "str",
                            "required": true
                        },
                        {
                            "key": "password",
                            "type": "str",
                            "required": true
                        }
                    ]
                },
                {
                    "name": "Proxy",
                    "type": "TypedDict",
                    "doc": "<p>Network proxy settings.</p>\n<p><code>server</code> Proxy to be used for all requests. HTTP and SOCKS proxies are supported, for example <a href=\"http://myproxy.com:3128\">http://myproxy.com:3128</a> or <a href=\"socks5://myproxy.com:3128\">socks5://myproxy.com:3128</a>. Short form myproxy.com:3128 is considered an HTTP proxy.</p>\n<p><code>bypass</code> <b>Optional</b> coma-separated domains to bypass proxy, for example \".com, chromium.org, .domain.com\".</p>\n<p><code>username</code> <b>Optional</b> username to use if HTTP proxy requires authentication.</p>\n<p><code>password</code> <b>Optional</b> password to use if HTTP proxy requires authentication.</p>",
                    "items": [
                        {
                            "key": "server",
                            "type": "str",
                            "required": true
                        },
                        {
                            "key": "bypass",
                            "type": "str",
                            "required": false
                        },
                        {
                            "key": "Username",
                            "type": "str",
                            "required": false
                        },
                        {
                            "key": "password",
                            "type": "str",
                            "required": false
                        }
                    ]
                },
                {
                    "name": "RecordHar",
                    "type": "TypedDict",
                    "doc": "<p>Enables HAR recording for all pages into to a file.</p>\n<p>If not specified, the HAR is not recorded. Make sure to await context to close for the <a href=\"http://www.softwareishard.com/blog/har-12-spec/\">HAR</a> to be saved.</p>\n<p><span class=\"name\">omitContent</span>: Optional setting to control whether to omit request content from the HAR. Default is False</p>\n<p><span class=\"name\">path</span>: Path on the filesystem to write the HAR file to.</p>\n<p>Example:</p>\n<pre>\n${har} =    Create Dictionary     path=/path/to/har.file    omitContent=True\nNew Context    recordHar=${har}\n</pre>",
                    "items": [
                        {
                            "key": "omitContent",
                            "type": "bool",
                            "required": false
                        },
                        {
                            "key": "path",
                            "type": "str",
                            "required": false
                        }
                    ]
                },
                {
                    "name": "RecordVideo",
                    "type": "TypedDict",
                    "doc": "<p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</p>",
                    "items": [
                        {
                            "key": "dir",
                            "type": "str",
                            "required": false
                        },
                        {
                            "key": "size",
                            "type": "ViewportDimensions",
                            "required": false
                        }
                    ]
                },
                {
                    "name": "ViewportDimensions",
                    "type": "TypedDict",
                    "doc": "<p>dict() -&gt; new empty dictionary dict(mapping) -&gt; new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -&gt; new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs in the keyword argument list.  For example:  dict(one=1, two=2)</p>",
                    "items": [
                        {
                            "key": "width",
                            "type": "int",
                            "required": true
                        },
                        {
                            "key": "height",
                            "type": "int",
                            "required": true
                        }
                    ]
                }
            ]
        }
    },
    "RPA.Browser.Selenium": {
        "name": "RPA.Browser.Selenium",
        "doc": "<p>Browser is a web testing library for Robot Framework, based on the popular SeleniumLibrary.</p>\n<p>It uses the Selenium WebDriver modules internally to control a web browser. See <a href=\"http://seleniumhq.org\">http://seleniumhq.org</a> for more information about Selenium in general.</p>\n<h2 id=\"Locating elements\">Locating elements</h2>\n<p>All keywords in the browser library that need to interact with an element on a web page take an argument typically named <code>locator</code> that specifies how to find the element. Most often the locator is given as a string using the locator syntax described below, but <a href=\"#Using%20WebElements\" class=\"name\">using WebElements</a> is possible too.</p>\n<h3 id=\"Locator syntax\">Locator syntax</h3>\n<p>Finding elements can be done using different strategies such as the element id, XPath expressions, or CSS selectors. The strategy can either be explicitly specified with a prefix or the strategy can be implicit.</p>\n<h4 id=\"Default locator strategy\">Default locator strategy</h4>\n<p>By default, locators are considered to use the keyword specific default locator strategy. All keywords support finding elements based on <code>id</code> and <code>name</code> attributes, but some keywords support additional attributes or other values that make sense in their context. For example, <a href=\"#Click%20Link\" class=\"name\">Click Link</a> supports the <code>href</code> attribute and the link text and addition to the normal <code>id</code> and <code>name</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>example</td>\n<td># Match based on <code>id</code> or <code>name</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Match also based on link text and <code>href</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>example</td>\n<td># Match based on <code>id</code>, <code>name</code> or <code>value</code>.</td>\n</tr>\n</table>\n<p>If a locator accidentally starts with a prefix recognized as <a href=\"#Explicit%20locator%20strategy\" class=\"name\">explicit locator strategy</a> or <a href=\"#Implicit%20XPath%20strategy\" class=\"name\">implicit XPath strategy</a>, it is possible to use the explicit <code>default</code> prefix to enable the default strategy.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>name:foo</td>\n<td># Find element with name <code>foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default:name:foo</td>\n<td># Use default strategy with value <code>name:foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//foo</td>\n<td># Find element using XPath <code>//foo</code>.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>default: //foo</td>\n<td># Use default strategy with value <code>//foo</code>.</td>\n</tr>\n</table>\n<h4 id=\"Explicit locator strategy\">Explicit locator strategy</h4>\n<p>The explicit locator strategy is specified with a prefix using either syntax <code>strategy:value</code> or <code>strategy=value</code>. The former syntax is preferred because the latter is identical to Robot Framework's <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax\">named argument syntax</a> and that can cause problems. Spaces around the separator are ignored, so <code>id:foo</code>, <code>id: foo</code> and <code>id : foo</code> are all equivalent.</p>\n<p>Locator strategies that are supported by default are listed in the table below. In addition to them, it is possible to register <a href=\"#Custom%20locators\" class=\"name\">custom locators</a>.</p>\n<table border=\"1\">\n<tr>\n<th>Strategy</th>\n<th>Match based on</th>\n<th>Example</th>\n</tr>\n<tr>\n<td>id</td>\n<td>Element <code>id</code>.</td>\n<td><code>id:example</code></td>\n</tr>\n<tr>\n<td>name</td>\n<td><code>name</code> attribute.</td>\n<td><code>name:example</code></td>\n</tr>\n<tr>\n<td>identifier</td>\n<td>Either <code>id</code> or <code>name</code>.</td>\n<td><code>identifier:example</code></td>\n</tr>\n<tr>\n<td>class</td>\n<td>Element <code>class</code>.</td>\n<td><code>class:example</code></td>\n</tr>\n<tr>\n<td>tag</td>\n<td>Tag name.</td>\n<td><code>tag:div</code></td>\n</tr>\n<tr>\n<td>xpath</td>\n<td>XPath expression.</td>\n<td><code>xpath://div[@id=\"example\"]</code></td>\n</tr>\n<tr>\n<td>css</td>\n<td>CSS selector.</td>\n<td><code>css:div#example</code></td>\n</tr>\n<tr>\n<td>dom</td>\n<td>DOM expression.</td>\n<td><code>dom:document.images[5]</code></td>\n</tr>\n<tr>\n<td>link</td>\n<td>Exact text a link has.</td>\n<td><code>link:The example</code></td>\n</tr>\n<tr>\n<td>partial link</td>\n<td>Partial link text.</td>\n<td><code>partial link:he ex</code></td>\n</tr>\n<tr>\n<td>sizzle</td>\n<td>Sizzle selector deprecated.</td>\n<td><code>sizzle:div.example</code></td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>jQuery expression.</td>\n<td><code>jquery:div.example</code></td>\n</tr>\n<tr>\n<td>default</td>\n<td>Keyword specific default behavior.</td>\n<td><code>default:example</code></td>\n</tr>\n</table>\n<p>See the <a href=\"#Default%20locator%20strategy\" class=\"name\">Default locator strategy</a> section below for more information about how the default strategy works. Using the explicit <code>default</code> prefix is only necessary if the locator value itself accidentally matches some of the explicit strategies.</p>\n<p>Different locator strategies have different pros and cons. Using ids, either explicitly like <code>id:foo</code> or by using the <a href=\"#Default%20locator%20strategy\" class=\"name\">default locator strategy</a> simply like <code>foo</code>, is recommended when possible, because the syntax is simple and locating elements by id is fast for browsers. If an element does not have an id or the id is not stable, other solutions need to be used. If an element has a unique tag name or class, using <code>tag</code>, <code>class</code> or <code>css</code> strategy like <code>tag:h1</code>, <code>class:example</code> or <code>css:h1.example</code> is often an easy solution. In more complex cases using XPath expressions is typically the best approach. They are very powerful but a downside is that they can also get complex.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>id:foo</td>\n<td># Element with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>css:div#foo h1</td>\n<td># h1 element under div with id 'foo'.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //div[@id=\"foo\"]//h1</td>\n<td># Same as the above using XPath, not CSS.</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>xpath: //*[contains(text(), \"example\")]</td>\n<td># Element containing text 'example'.</td>\n</tr>\n</table>\n<p><b>NOTE:</b></p>\n<ul>\n<li>Using the <code>sizzle</code> strategy or its alias <code>jquery</code> requires that the system under test contains the jQuery library.</li>\n</ul>\n<h4 id=\"Implicit XPath strategy\">Implicit XPath strategy</h4>\n<p>If the locator starts with <code>//</code> or <code>(//</code>, the locator is considered to be an XPath expression. In other words, using <code>//div</code> is equivalent to using explicit <code>xpath://div</code>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>//div[@id=\"foo\"]//h1</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>(//div)[2]</td>\n</tr>\n</table>\n<h4 id=\"Chaining locators\">Chaining locators</h4>\n<p>It's possible to chain multiple locators together as a single locator. Each chained locator must start with a locator strategy. Chained locators must be separated with a single space, two greater than characters, and followed with a space. It's also possible to mix different locator strategies, such as css or xpath. Also, a list can also be used to specify multiple locators, for instance when the chaining separator would conflict with the actual locator, or when an existing web element is used as a base.</p>\n<p>Although all locators support chaining, some locator strategies don't chain properly with previous values. This is because some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context and not for the element found by the previous locator. Locator strategies that support chaining are the ones that are based on the Selenium API, such as <span class=\"name\">xpath</span> or <span class=\"name\">css</span>, but for example chaining is not supported by <span class=\"name\">sizzle</span> or <span class=\"name\">jquery</span>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>css:.bar &gt;&gt; <a href=\"xpath://a\">xpath://a</a></td>\n<td># To find a link which is present inside an element with class \"bar\"</td>\n</tr>\n</table>\n<p>List examples:</p>\n<table border=\"1\">\n<tr>\n<td>${locator_list} =</td>\n<td><span class=\"name\">Create List</span></td>\n<td>css:div#div_id</td>\n<td><a href=\"xpath://*[text(\">xpath://*[text(</a>), \" &gt;&gt; \"]</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>${locator_list}</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${element} =</td>\n<td>Get WebElement</td>\n<td><a href=\"xpath://*[text(\">xpath://*[text(</a>), \" &gt;&gt; \"]</td>\n<td></td>\n</tr>\n<tr>\n<td>${locator_list} =</td>\n<td><span class=\"name\">Create List</span></td>\n<td>css:div#div_id</td>\n<td>${element}</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>${locator_list}</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<h3 id=\"Using WebElements\">Using WebElements</h3>\n<p>In addition to specifying a locator as a string, it is possible to use Selenium's WebElement objects. This requires first getting a WebElement, for example, by using the <a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a> keyword.</p>\n<table border=\"1\">\n<tr>\n<td>${elem} =</td>\n<td><a href=\"#Get%20WebElement\" class=\"name\">Get WebElement</a></td>\n<td>id:example</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>${elem}</td>\n<td></td>\n</tr>\n</table>\n<h3 id=\"Custom locators\">Custom locators</h3>\n<p>If more complex lookups are required than what is provided through the default locators, custom lookup strategies can be created. Using custom locators is a two part process. First, create a keyword that returns a WebElement that should be acted on:</p>\n<table border=\"1\">\n<tr>\n<td>Custom Locator Strategy</td>\n<td>[Arguments]</td>\n<td>${browser}</td>\n<td>${locator}</td>\n<td>${tag}</td>\n<td>${constraints}</td>\n</tr>\n<tr>\n<td></td>\n<td>${element}=</td>\n<td>Execute Javascript</td>\n<td>return window.document.getElementById('${locator}');</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>[Return]</td>\n<td>${element}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>This keyword is a reimplementation of the basic functionality of the <code>id</code> locator where <code>${browser}</code> is a reference to a WebDriver instance and <code>${locator}</code> is the name of the locator strategy. To use this locator, it must first be registered by using the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a></td>\n<td>custom</td>\n<td>Custom Locator Strategy</td>\n</tr>\n</table>\n<p>The first argument of <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> specifies the name of the strategy and it must be unique. After registering the strategy, the usage is the same as with other locators:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Element\" class=\"name\">Click Element</a></td>\n<td>custom:example</td>\n</tr>\n</table>\n<p>See the <a href=\"#Add%20Location%20Strategy\" class=\"name\">Add Location Strategy</a> keyword for more details.</p>\n<h2 id=\"Browser and Window\">Browser and Window</h2>\n<p>There is different conceptual meaning when this library talks about windows or browsers. This chapter explains those differences.</p>\n<h3 id=\"Browser\">Browser</h3>\n<p>When <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> keyword is called, it will create a new Selenium WebDriver instance by using the <a href=\"https://www.seleniumhq.org/docs/03_webdriver.jsp\">Selenium WebDriver</a> API. In this library's terms, a new browser is created. It is possible to start multiple independent browsers (Selenium Webdriver instances) at the same time, by calling <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> or <a href=\"#Create%20Webdriver\" class=\"name\">Create WebDriver</a> multiple times. These browsers are usually independent of each other and do not share data like cookies, sessions or profiles. Typically when the browser starts, it creates a single window which is shown to the user.</p>\n<h3 id=\"Window\">Window</h3>\n<p>Windows are the part of a browser that loads the web site and presents it to the user. All content of the site is the content of the window. Windows are children of a browser. In this context a browser is a synonym for WebDriver instance. One browser may have multiple windows. Windows can appear as tabs, as separate windows or pop-ups with different position and size. Windows belonging to the same browser typically share the sessions detail, like cookies. If there is a need to separate sessions detail, example login with two different users, two browsers (Selenium WebDriver instances) must be created. New windows can be opened example by the application under test or by example <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> keyword:</p>\n<pre>\n<a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a>    window.open()    # Opens a new window with location about:blank\n</pre>\n<p>The example below opens multiple browsers and windows, to demonstrate how the different keywords can be used to interact with browsers, and windows attached to these browsers.</p>\n<p>Structure:</p>\n<pre>\nBrowserA\n           Window 1  (location=https://robotframework.org/)\n           Window 2  (location=https://robocon.io/)\n           Window 3  (location=https://github.com/robotframework/)\n\nBrowserB\n           Window 1  (location=https://github.com/)\n</pre>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://robotframework.org\">https://robotframework.org</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserA</td>\n<td># BrowserA with first window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA second window is opened.</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td></td>\n<td># Switched to second window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://robocon.io\">https://robocon.io</a></td>\n<td></td>\n<td></td>\n<td># Second window navigates to robocon site.</td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a></td>\n<td>window.open()</td>\n<td></td>\n<td></td>\n<td># In BrowserA third window is opened.</td>\n</tr>\n<tr>\n<td>${handle}</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>locator=NEW</td>\n<td></td>\n<td># Switched to third window in BrowserA</td>\n</tr>\n<tr>\n<td><a href=\"#Go%20To\" class=\"name\">Go To</a></td>\n<td><a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a></td>\n<td></td>\n<td></td>\n<td># Third windows goes to robot framework github site.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://github.com\">https://github.com</a></td>\n<td>${BROWSER}</td>\n<td>alias=BrowserB</td>\n<td># BrowserB with first windows is opened.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} is: <a href=\"https://www.github.com\">https://www.github.com</a></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td>browser=BrowserA</td>\n<td></td>\n<td># BrowserA second windows is selected.</td>\n</tr>\n<tr>\n<td>${location}</td>\n<td><a href=\"#Get%20Location\" class=\"name\">Get Location</a></td>\n<td></td>\n<td></td>\n<td># ${location} = <a href=\"https://robocon.io/\">https://robocon.io/</a></td>\n</tr>\n<tr>\n<td>@{locations 1}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td></td>\n<td></td>\n<td># By default, lists locations under the currectly active browser (BrowserA).</td>\n</tr>\n<tr>\n<td>@{locations 2}</td>\n<td><a href=\"#Get%20Locations\" class=\"name\">Get Locations</a></td>\n<td>browser=ALL</td>\n<td></td>\n<td># By using browser=ALL argument keyword list all locations from all browsers.</td>\n</tr>\n</table>\n<p>The above example, @{locations 1} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a> and <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>'. The @{locations 2} contains the following items: <a href=\"https://robotframework.org/\">https://robotframework.org/</a>, <a href=\"https://robocon.io/\">https://robocon.io/</a>, <a href=\"https://github.com/robotframework/\">https://github.com/robotframework/</a>' and '<a href=\"https://github.com/\">https://github.com/</a>.</p>\n<h2 id=\"Timeouts, waits, and delays\">Timeouts, waits, and delays</h2>\n<p>This section discusses different ways how to wait for elements to appear on web pages and to slow down execution speed otherwise. It also explains the <a href=\"#Time%20format\" class=\"name\">time format</a> that can be used when setting various timeouts, waits, and delays.</p>\n<h3 id=\"Timeout\">Timeout</h3>\n<p>This library contains various keywords that have an optional <code>timeout</code> argument that specifies how long these keywords should wait for certain events or actions. These keywords include, for example, <code>Wait ...</code> keywords and keywords related to alerts. Additionally <a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async Javascript</a>. Although it does not have <code>timeout</code>, argument, uses a timeout to define how long asynchronous JavaScript can run.</p>\n<p>The default timeout these keywords use can be set globally either by using the <a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a> keyword or with the <code>timeout</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported timeout syntax.</p>\n<h3 id=\"Implicit wait\">Implicit wait</h3>\n<p>Implicit wait specifies the maximum time how long Selenium waits when searching for elements. It can be set by using the <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> keyword or with the <code>implicit_wait</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. See <a href=\"https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp\">Selenium documentation</a> for more information about this functionality.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Selenium speed\">Selenium speed</h3>\n<p>Selenium execution speed can be slowed down globally by using <a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium speed</a> keyword. This functionality is designed to be used for demonstrating or debugging purposes. Using it to make sure that elements appear on a page is not a good idea. The above-explained timeouts and waits should be used instead.</p>\n<p>See <a href=\"#Time%20format\" class=\"name\">time format</a> below for supported syntax.</p>\n<h3 id=\"Time format\">Time format</h3>\n<p>All timeouts and waits can be given as numbers considered seconds (e.g. <code>0.5</code> or <code>42</code>) or in Robot Framework's time syntax (e.g. <code>1.5 seconds</code> or <code>1 min 30 s</code>). For more information about the time syntax see the <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format\">Robot Framework User Guide</a>.</p>\n<h2 id=\"Run-on-failure functionality\">Run-on-failure functionality</h2>\n<p>This library has a handy feature that it can automatically execute a keyword if any of its own keywords fails. By default, it uses the <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> keyword, but this can be changed either by using the <a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a> keyword or with the <code>run_on_failure</code> argument when <a href=\"#Importing\" class=\"name\">importing</a> the library. It is possible to use any keyword from any imported library or resource file.</p>\n<p>The run-on-failure functionality can be disabled by using a special value <code>NOTHING</code> or anything considered false (see <span class=\"name\">Boolean arguments</span>) such as <code>NONE</code>.</p>",
        "version": "5.1.3",
        "generated": "2021-10-02 08:05:59",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
        "lineno": 61,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>SeleniumLibrary can be imported with several optional arguments.</p>\n<ul>\n<li><code>timeout</code>: Default value for <span class=\"name\">timeouts</span> used with <code>Wait ...</code> keywords.</li>\n<li><code>implicit_wait</code>: Default value for <a href=\"#Implicit%20wait\" class=\"name\">implicit wait</a> used when locating elements.</li>\n<li><code>run_on_failure</code>: Default action for the <a href=\"#Run-on-failure%20functionality\" class=\"name\">run-on-failure functionality</a>.</li>\n<li><code>screenshot_root_directory</code>: Path to folder where possible screenshots are created or EMBED. See <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword for further details about EMBED. If not given, the directory where the log file is written is used.</li>\n<li><code>plugins</code>: Allows extending the SeleniumLibrary with external Python classes.</li>\n<li><code>event_firing_webdriver</code>: Class for wrapping Selenium with <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver\">EventFiringWebDriver</a></li>\n</ul>",
                "shortdoc": "SeleniumLibrary can be imported with several optional arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 381
            }
        ],
        "keywords": [
            {
                "name": "Add Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    },
                    {
                        "name": "domain",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "domain: str | None = None"
                    },
                    {
                        "name": "secure",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "secure: bool | None = None"
                    },
                    {
                        "name": "expiry",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expiry: str | None = None"
                    }
                ],
                "doc": "<p>Adds a cookie to your current session.</p>\n<p><code>name</code> and <code>value</code> are required, <code>path</code>, <code>domain</code>, <code>secure</code> and <code>expiry</code> are optional.  Expiry supports the same formats as the <a href=\"http://robotframework.org/robotframework/latest/libraries/DateTime.html\">DateTime</a> library or an epoch timestamp.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>domain=example.com</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=2027-09-28 16:21:35</td>\n<td># Expiry as timestamp.</td>\n</tr>\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n<td>expiry=1822137695</td>\n<td># Expiry as epoch seconds.</td>\n</tr>\n</table>\n<p>Prior to SeleniumLibrary 3.0 setting expiry did not work.</p>",
                "shortdoc": "Adds a cookie to your current session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 143
            },
            {
                "name": "Add Location Strategy",
                "args": [
                    {
                        "name": "strategy_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_name: str"
                    },
                    {
                        "name": "strategy_keyword",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_keyword: str"
                    },
                    {
                        "name": "persist",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "persist: bool = False"
                    }
                ],
                "doc": "<p>Adds a custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies. <a href=\"#Remove%20Location%20Strategy\" class=\"name\">Remove Location Strategy</a> can be used to remove a registered strategy.</p>\n<p>Location strategies are automatically removed after leaving the current scope by default. Setting <code>persist</code> to a true value (see <span class=\"name\">Boolean arguments</span>) will cause the location strategy to stay registered throughout the life of the test.</p>",
                "shortdoc": "Adds a custom location strategy.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1118
            },
            {
                "name": "Alert Should Be Present",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str = "
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Verifies that an alert is present and by default, accepts it.</p>\n<p>Fails if no alert is present. If <code>text</code> is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p><code>action</code> and <code>timeout</code> arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second.</p>",
                "shortdoc": "Verifies that an alert is present and by default, accepts it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 52
            },
            {
                "name": "Alert Should Not Be Present",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Verifies that no alert is present.</p>\n<p>If the alert actually exists, the <code>action</code> argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> keyword.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the <a href=\"#Time%20format\" class=\"name\">time format</a> section for information about the syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that no alert is present.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 79
            },
            {
                "name": "Assign Id To Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "id: str"
                    }
                ],
                "doc": "<p>Assigns a temporary <code>id</code> to the element specified by <code>locator</code>.</p>\n<p>This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Assign%20Id%20To%20Element\" class=\"name\">Assign ID to Element</a></td>\n<td>//ul[@class='example' and ./li[contains(., 'Stuff')]]</td>\n<td>my id</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>my id</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Assigns a temporary ``id`` to the element specified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 222
            },
            {
                "name": "Attach Chrome Browser",
                "args": [
                    {
                        "name": "port",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "port: int"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    }
                ],
                "doc": "<p>Attach to an existing instance of Chrome or Chromium.</p>\n<p>Requires that the browser was started with the command line option <code>--remote-debugging-port=&lt;port&gt;</code>, where port is any 4-digit number not being used by other applications.</p>\n<p>That port can then be used to connect using this keyword.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Attach Chrome Browser</td>\n<td>port=9222</td>\n</tr>\n</table>",
                "shortdoc": "Attach to an existing instance of Chrome or Chromium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 874
            },
            {
                "name": "Capture Element Screenshot",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "selenium-element-screenshot-{index}.png",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = selenium-element-screenshot-{index}.png"
                    }
                ],
                "doc": "<p>Captures a screenshot from the element identified by <code>locator</code> and embeds it into log file.</p>\n<p>See <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> for details about <code>filename</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>An absolute path to the created element screenshot is returned.</p>\n<p>Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element.</p>\n<p>New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>${OUTPUTDIR}/id_image_id-1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Element%20Screenshot\" class=\"name\">Capture Element Screenshot</a></td>\n<td>id:image_id</td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Captures a screenshot from the element identified by ``locator`` and embeds it into log file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 129
            },
            {
                "name": "Capture Page Screenshot",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "selenium-screenshot-{index}.png",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = selenium-screenshot-{index}.png"
                    }
                ],
                "doc": "<p>Takes a screenshot of the current page and embeds it into a log file.</p>\n<p><code>filename</code> argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when <a href=\"#Importing\" class=\"name\">importing</a> the library or by using the <a href=\"#Set%20Screenshot%20Directory\" class=\"name\">Set Screenshot Directory</a> keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>filename</code> equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem.</p>\n<p>Starting from SeleniumLibrary 1.8, if <code>filename</code> contains marker <code>{index}</code>, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>An absolute path to the created screenshot file is returned or if <code>filename</code>  equals to EMBED, word <span class=\"name\">EMBED</span> is returned.</p>\n<p>Support for EMBED is new in SeleniumLibrary 4.2</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-1.png</td>\n</tr>\n<tr>\n<td>${path} =</td>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/selenium-screenshot-2.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${path}</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_name.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_name.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>custom_with_index_{index}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/custom_with_index_1.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>formatted_index_{index:03}.png</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Exist</span></td>\n<td>${OUTPUTDIR}/formatted_index_001.png</td>\n</tr>\n<tr>\n<td><a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a></td>\n<td>EMBED</td>\n</tr>\n<tr>\n<td><span class=\"name\">File Should Not Exist</span></td>\n<td>EMBED</td>\n</tr>\n</table>",
                "shortdoc": "Takes a screenshot of the current page and embeds it into a log file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 67
            },
            {
                "name": "Checkbox Should Be Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is selected/checked.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 44
            },
            {
                "name": "Checkbox Should Not Be Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not selected/checked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is not selected/checked.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 58
            },
            {
                "name": "Choose File",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "file_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "file_path: str"
                    }
                ],
                "doc": "<p>Inputs the <code>file_path</code> into the file input field <code>locator</code>.</p>\n<p>This keyword is most often used to input files into upload forms. The keyword does not check <code>file_path</code> is the file or folder available on the machine where tests are executed. If the <code>file_path</code> points at a file and when using Selenium Grid, Selenium will <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE\">magically</a>, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser.</p>\n<p>That <code>file_path</code> is not checked, is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Choose%20File\" class=\"name\">Choose File</a></td>\n<td>my_upload_field</td>\n<td>${CURDIR}/trades.csv</td>\n</tr>\n</table>",
                "shortdoc": "Inputs the ``file_path`` into the file input field ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 216
            },
            {
                "name": "Clear All Highlights",
                "args": [],
                "doc": "<p>Remove all highlighting made by <code>Highlight Elements</code>.</p>",
                "shortdoc": "Remove all highlighting made by ``Highlight Elements``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1834
            },
            {
                "name": "Clear Element Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Clears the value of the text-input-element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Clears the value of the text-input-element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 524
            },
            {
                "name": "Click Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks the button identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks the button identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 547
            },
            {
                "name": "Click Button When Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    }
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 986
            },
            {
                "name": "Click Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    },
                    {
                        "name": "action_chain",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action_chain: bool = False"
                    }
                ],
                "doc": "<p>Click the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>modifier</code> argument can be used to pass <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys\">Selenium Keys</a> when clicking the element. The <span class=\"name\">+</span> can be used as a separator for different Selenium Keys. The <span class=\"name\">CTRL</span> is internally translated to the <span class=\"name\">CONTROL</span> key. The <code>modifier</code> is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT\">ALT key</a> . If <code>modifier</code> does not match to Selenium Keys, keyword fails.</p>\n<p>If <code>action_chain</code> argument is true, see <span class=\"name\">Boolean arguments</span> for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the &lt;web_element&gt;.click() function. If both <code>action_chain</code> and <code>modifier</code> are defined, the click will be performed using <code>modifier</code> and <code>action_chain</code> will be ignored.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td></td>\n<td># Would click element without any modifiers.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL</td>\n<td># Would click element with CTLR key pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n<td># Would click element with CTLR and ALT keys pressed down.</td>\n</tr>\n<tr>\n<td>Click Element</td>\n<td>id:button</td>\n<td>action_chain=True</td>\n<td># Clicks the button using an Selenium  ActionChains</td>\n</tr>\n</table>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.2 The <code>action_chain</code> argument is new in SeleniumLibrary 4.1</p>",
                "shortdoc": "Click the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 617
            },
            {
                "name": "Click Element At Coordinates",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "xoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "xoffset: int"
                    },
                    {
                        "name": "yoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "yoffset: int"
                    }
                ],
                "doc": "<p>Click the element <code>locator</code> at <code>xoffset/yoffset</code>.</p>\n<p>The Cursor is moved and the center of the element and x/y coordinates are calculated from that point.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Click the element ``locator`` at ``xoffset/yoffset``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 689
            },
            {
                "name": "Click Element If Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Click element if it is visible</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element If Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click element if it is visible",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1006
            },
            {
                "name": "Click Element When Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    },
                    {
                        "name": "action_chain",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action_chain: bool = False"
                    }
                ],
                "doc": "<p>Click element identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p><code>action_chain</code> store action in Selenium ActionChain queue</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Element When Visible</td>\n<td>q</td>\n<td></td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>id:button</td>\n<td>CTRL+ALT</td>\n</tr>\n<tr>\n<td>Click Element When Visible</td>\n<td>action_chain=True</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Click element identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 965
            },
            {
                "name": "Click Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks an image identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 571
            },
            {
                "name": "Click Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: bool | str = False"
                    }
                ],
                "doc": "<p>Clicks a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See the <a href=\"#Click%20Element\" class=\"name\">Click Element</a> keyword for details about the <code>modifier</code> argument.</p>\n<p>The <code>modifier</code> argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Clicks a link identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 596
            },
            {
                "name": "Close All Browsers",
                "args": [],
                "doc": "<p>Closes all open browsers and resets the browser cache.</p>\n<p>After this keyword, new indexes returned from <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword are reset to 1.</p>\n<p>This keyword should be used in test or suite teardown to make sure all browsers are closed.</p>",
                "shortdoc": "Closes all open browsers and resets the browser cache.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 40
            },
            {
                "name": "Close Browser",
                "args": [],
                "doc": "<p>Closes the current browser.</p>",
                "shortdoc": "Closes the current browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 53
            },
            {
                "name": "Close Window",
                "args": [],
                "doc": "<p>Closes currently opened and selected browser window/tab.</p>",
                "shortdoc": "Closes currently opened and selected browser window/tab.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 125
            },
            {
                "name": "Cover Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Will cover elements identified by <code>locator</code> with a blue div without breaking page layout.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.3.0</p>\n<p>Example: |<a href=\"#Cover%20Element\" class=\"name\">Cover Element</a> | css:div#container |</p>",
                "shortdoc": "Will cover elements identified by ``locator`` with a blue div without breaking page layout.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 474
            },
            {
                "name": "Create Webdriver",
                "args": [
                    {
                        "name": "driver_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "driver_name: str"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "kwargs={}"
                    },
                    {
                        "name": "init_kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**init_kwargs"
                    }
                ],
                "doc": "<p>Creates an instance of Selenium WebDriver.</p>\n<p>Like <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a>, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> is not adequate.</p>\n<p><code>driver_name</code> must be a WebDriver implementation name like Firefox, Chrome, Ie, Opera, Safari, PhantomJS, or Remote.</p>\n<p>The initialized WebDriver can be configured either with a Python dictionary <code>kwargs</code> or by using keyword arguments <code>**init_kwargs</code>. These arguments are passed directly to WebDriver without any processing. See <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/api.html\">Selenium API documentation</a> for details about the supported arguments.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td># Use proxy with Firefox</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${proxy}=</td>\n<td><span class=\"name\">Evaluate</span></td>\n<td>selenium.webdriver.Proxy()</td>\n<td>modules=selenium, selenium.webdriver</td>\n</tr>\n<tr>\n<td>${proxy.http_proxy}=</td>\n<td><span class=\"name\">Set Variable</span></td>\n<td>localhost:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>Firefox</td>\n<td>proxy=${proxy}</td>\n<td></td>\n</tr>\n<tr>\n<td># Use proxy with PhantomJS</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${service args}=</td>\n<td><span class=\"name\">Create List</span></td>\n<td>--proxy=192.168.132.104:8888</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a></td>\n<td>PhantomJS</td>\n<td>service_args=${service args}</td>\n<td></td>\n</tr>\n</table>\n<p>Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> keyword is used. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for an example.</p>",
                "shortdoc": "Creates an instance of Selenium WebDriver.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 347
            },
            {
                "name": "Current Frame Should Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that the current frame contains <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Current Frame Contains</span>.</p>",
                "shortdoc": "Verifies that the current frame contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 53
            },
            {
                "name": "Current Frame Should Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that the current frame does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that the current frame does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 70
            },
            {
                "name": "Delete All Cookies",
                "args": [],
                "doc": "<p>Deletes all cookies.</p>",
                "shortdoc": "Deletes all cookies.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 57
            },
            {
                "name": "Delete Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    }
                ],
                "doc": "<p>Deletes the cookie matching <code>name</code>.</p>\n<p>If the cookie is not found, nothing happens.</p>",
                "shortdoc": "Deletes the cookie matching ``name``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 62
            },
            {
                "name": "Does Alert Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    }
                ],
                "doc": "<p>Does alert contain text.</p>\n<p><code>text</code> check if alert includes text, will raise ValueError is text does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Contain</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert contain text.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1148
            },
            {
                "name": "Does Alert Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    }
                ],
                "doc": "<p>Does alert not contain text.</p>\n<p><code>text</code> check that alert does not include text, will raise ValueError if text does exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Alert Not Contain</td>\n<td>unexpected message</td>\n</tr>\n</table>",
                "shortdoc": "Does alert not contain text.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1167
            },
            {
                "name": "Does Element Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Does element contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Element Contain</td>\n<td>id:spec</td>\n<td>specification complete</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Does element contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1217
            },
            {
                "name": "Does Frame Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Does frame contain expected text</p>\n<p><code>locator</code> locator of the frame to check</p>\n<p><code>text</code> does frame contain this text</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Frame Contain</td>\n<td>id:myframe</td>\n<td>secret</td>\n</tr>\n</table>",
                "shortdoc": "Does frame contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1201
            },
            {
                "name": "Does Location Contain",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does current URL contain expected</p>\n<p><code>expected</code> URL should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://robocorp.com\">https://robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Location Contain</td>\n<td>robocorp</td>\n</tr>\n</table>",
                "shortdoc": "Does current URL contain expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1309
            },
            {
                "name": "Does Page Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Does page contain expected text</p>\n<p><code>text</code> page should contain this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain</td>\n<td>Gmail</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1324
            },
            {
                "name": "Does Page Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Button</td>\n<td>search-button</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected button",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1339
            },
            {
                "name": "Does Page Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected checkbox</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Checkbox</td>\n<td>random-selection</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected checkbox",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1353
            },
            {
                "name": "Does Page Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int | None = None"
                    }
                ],
                "doc": "<p>Does page contain expected element</p>\n<p><code>locator</code> element locator</p>\n<p><code>count</code> how many times element is expected to appear on page by default one or more</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>textarea</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Element</td>\n<td>button</td>\n<td>count=4</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1367
            },
            {
                "name": "Does Page Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected image</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://google.com\">https://google.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Image</td>\n<td>Google</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1385
            },
            {
                "name": "Does Page Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected link</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Link</td>\n<td>id:submit</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected link",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1400
            },
            {
                "name": "Does Page Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected list</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain List</td>\n<td>class:selections</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected list",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1414
            },
            {
                "name": "Does Page Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected radio button</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Radio Button</td>\n<td>male</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected radio button",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1428
            },
            {
                "name": "Does Page Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Does page contain expected textfield</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Page Contain Textfield</td>\n<td>id:address</td>\n</tr>\n</table>",
                "shortdoc": "Does page contain expected textfield",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1442
            },
            {
                "name": "Does Table Cell Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table cell contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Cell Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table cell contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1489
            },
            {
                "name": "Does Table Column Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table column contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>column</code> column index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table column</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Column Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Nokia</td>\n</tr>\n</table>",
                "shortdoc": "Does table column contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1511
            },
            {
                "name": "Does Table Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in table</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Contain</td>\n<td>//table</td>\n<td>February</td>\n</tr>\n</table>",
                "shortdoc": "Does table contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1581
            },
            {
                "name": "Does Table Footer Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table footer contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table footer</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Footer Contain</td>\n<td>//table</td>\n<td>Sum</td>\n</tr>\n</table>",
                "shortdoc": "Does table footer contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1549
            },
            {
                "name": "Does Table Header Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table header contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>expected</code> expected text in table header</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Header Contain</td>\n<td>//table</td>\n<td>Month</td>\n</tr>\n</table>",
                "shortdoc": "Does table header contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1565
            },
            {
                "name": "Does Table Row Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does table row contain expected text</p>\n<p><code>locator</code> element locator for the table</p>\n<p><code>row</code> row index starting from 1 (beginning) or -1 (from the end)</p>\n<p><code>expected</code> expected text in table row</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Table Row Contain</td>\n<td>//table</td>\n<td>1</td>\n<td>Company</td>\n</tr>\n</table>",
                "shortdoc": "Does table row contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1531
            },
            {
                "name": "Does Textarea Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does textarea contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textarea</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textarea Contain</td>\n<td>//textarea</td>\n<td>sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Does textarea contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1613
            },
            {
                "name": "Does Textfield Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Does textfield contain expected text</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected text in textfield</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Does Textfield Contain</td>\n<td>id:lname</td>\n<td>Last</td>\n</tr>\n</table>",
                "shortdoc": "Does textfield contain expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1629
            },
            {
                "name": "Double Click Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Double clicks the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Double clicks the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 713
            },
            {
                "name": "Drag And Drop",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "target",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target: WebElement | str"
                    }
                ],
                "doc": "<p>Drags the element identified by <code>locator</code> into the <code>target</code> element.</p>\n<p>The <code>locator</code> argument is the locator of the dragged element and the <code>target</code> is the locator of the target. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop\" class=\"name\">Drag And Drop</a></td>\n<td>css:div#element</td>\n<td>css:div.target</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified by ``locator`` into the ``target`` element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 753
            },
            {
                "name": "Drag And Drop By Offset",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "xoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "xoffset: int"
                    },
                    {
                        "name": "yoffset",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "yoffset: int"
                    }
                ],
                "doc": "<p>Drags the element identified with <code>locator</code> by <code>xoffset/yoffset</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element will be moved by <code>xoffset</code> and <code>yoffset</code>, each of which is a negative or positive number specifying the offset.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Drag%20And%20Drop%20By%20Offset\" class=\"name\">Drag And Drop By Offset</a></td>\n<td>myElem</td>\n<td>50</td>\n<td>-35</td>\n<td># Move myElem 50px right and 35px down</td>\n</tr>\n</table>",
                "shortdoc": "Drags the element identified with ``locator`` by ``xoffset/yoffset``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 775
            },
            {
                "name": "Element Attribute Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies element identified by <code>locator</code> contains expected attribute value.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example: <a href=\"#Element%20Attribute%20Value%20Should%20Be\" class=\"name\">Element Attribute Value Should Be</a> | css:img | href | value</p>\n<p>New in SeleniumLibrary 3.2.</p>",
                "shortdoc": "Verifies element identified by ``locator`` contains expected attribute value.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 414
            },
            {
                "name": "Element Should Be Disabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is disabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is disabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 241
            },
            {
                "name": "Element Should Be Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is enabled.</p>\n<p>This keyword considers also elements that are read-only to be disabled.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is enabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 254
            },
            {
                "name": "Element Should Be Focused",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies that element identified by <code>locator</code> is focused.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element identified by ``locator`` is focused.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 267
            },
            {
                "name": "Element Should Be Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is visible.</p>\n<p>Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries <code>display:none</code> is not logically visible, so using this keyword on that element would fail.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>",
                "shortdoc": "Verifies that the element identified by ``locator`` is visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 284
            },
            {
                "name": "Element Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Text%20Should%20Be\" class=\"name\">Element Text Should Be</a> if you want to match the exact text, not a substring.</p>",
                "shortdoc": "Verifies that element ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 55
            },
            {
                "name": "Element Should Not Be Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the element identified by <code>locator</code> is NOT visible.</p>\n<p>Passes if the element does not exists. See <a href=\"#Element%20Should%20Be%20Visible\" class=\"name\">Element Should Be Visible</a> for more information about visibility and supported arguments.</p>",
                "shortdoc": "Verifies that the element identified by ``locator`` is NOT visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 307
            },
            {
                "name": "Element Should Not Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that element ``locator`` does not contain text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 93
            },
            {
                "name": "Element Text Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> contains exact the text <code>expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p><code>ignore_case</code> argument is new in SeleniumLibrary 3.1.</p>\n<p>Use <a href=\"#Element%20Should%20Contain\" class=\"name\">Element Should Contain</a> if a substring match is desired.</p>",
                "shortdoc": "Verifies that element ``locator`` contains exact the text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 326
            },
            {
                "name": "Element Text Should Not Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "not_expected",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "not_expected: None | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> does not contain exact the text <code>not_expected</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>ignore_case</code> argument can be set to True to compare case insensitive, default is False.</p>\n<p>New in SeleniumLibrary 3.1.1</p>",
                "shortdoc": "Verifies that element ``locator`` does not contain exact the text ``not_expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 362
            },
            {
                "name": "Execute Async Javascript",
                "args": [
                    {
                        "name": "code",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*code: WebElement | str"
                    }
                ],
                "doc": "<p>Executes asynchronous JavaScript code with possible arguments.</p>\n<p>Similar to <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument.</p>\n<p>Scripts must complete within the script timeout or this keyword will fail. See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section for more information.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script\">arguments</a> as part of <code>code</code> argument. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute Javascript</a> for more details.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td>${CURDIR}/async_js_to_execute.js</td>\n<td></td>\n</tr>\n<tr>\n<td>${result} =</td>\n<td><a href=\"#Execute%20Async%20Javascript\" class=\"name\">Execute Async JavaScript</a></td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>var callback = arguments[arguments.length - 1];</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>function answer(){callback(\"text\");};</td>\n<td></td>\n</tr>\n<tr>\n<td>...</td>\n<td>window.setTimeout(answer, 2000);</td>\n<td></td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${result}</td>\n<td>text</td>\n</tr>\n</table>",
                "shortdoc": "Executes asynchronous JavaScript code with possible arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "lineno": 76
            },
            {
                "name": "Execute Cdp",
                "args": [
                    {
                        "name": "command",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "command"
                    },
                    {
                        "name": "parameters",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "parameters"
                    }
                ],
                "doc": "<p>Executes Chrome DevTools Protocol commands</p>\n<p>Works only with Chrome/Chromium</p>\n<p>For more information, available commands and parameters, see: <a href=\"https://chromedevtools.github.io/devtools-protocol/\">https://chromedevtools.github.io/devtools-protocol/</a></p>\n<p><code>command</code> command to execute as string</p>\n<p><code>parameters</code> parameters for command as a dictionary</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Chrome Browser</td>\n<td>about:blank</td>\n<td>headless=True</td>\n</tr>\n<tr>\n<td>&amp;{params}</td>\n<td>Create Dictionary</td>\n<td>useragent=Chrome/83.0.4103.53</td>\n</tr>\n<tr>\n<td>Execute CDP</td>\n<td>Network.setUserAgentOverride</td>\n<td>${params}</td>\n</tr>\n<tr>\n<td>Go To</td>\n<td><a href=\"https://robocorp.com\">https://robocorp.com</a></td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Executes Chrome DevTools Protocol commands",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1892
            },
            {
                "name": "Execute Javascript",
                "args": [
                    {
                        "name": "code",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*code: WebElement | str"
                    }
                ],
                "doc": "<p>Executes the given JavaScript code with possible arguments.</p>\n<p><code>code</code> may be divided into multiple cells in the test data and <code>code</code> may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from <code>code</code>.</p>\n<p>If <code>code</code> is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems.</p>\n<p>The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use <code>window</code> to refer to the window of your application and <code>document</code> to refer to the document object of the current frame or window, e.g. <code>document.getElementById('example')</code>.</p>\n<p>This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types.</p>\n<p>Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script\">arguments</a> as part of <code>code</code> argument. The JavaScript code and arguments must be separated with <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers and must be used exactly with this format. If the Javascript code is first, then the <span class=\"name\">JAVASCRIPT</span> marker is optional. The order of <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers can be swapped, but if <span class=\"name\">ARGUMENTS</span> is the first marker, then <span class=\"name\">JAVASCRIPT</span> marker is mandatory. It is only allowed to use <span class=\"name\">JAVASCRIPT</span> and <span class=\"name\">ARGUMENTS</span> markers only one time in the <code>code</code> argument.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>window.myFunc('arg1', 'arg2')</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>${CURDIR}/js_to_execute.js</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>alert(arguments[0]);</td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a></td>\n<td>ARGUMENTS</td>\n<td>123</td>\n<td>JAVASCRIPT</td>\n<td>alert(arguments[0]);</td>\n</tr>\n</table>",
                "shortdoc": "Executes the given JavaScript code with possible arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "lineno": 33
            },
            {
                "name": "Frame Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that frame identified by <code>locator</code> contains <code>text</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that frame identified by ``locator`` contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 84
            },
            {
                "name": "Get All Links",
                "args": [],
                "doc": "<p>Returns a list containing ids of all links found in current page.</p>\n<p>If a link has no id, an empty string will be in the list instead.</p>",
                "shortdoc": "Returns a list containing ids of all links found in current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 993
            },
            {
                "name": "Get Browser Aliases",
                "args": [],
                "doc": "<p>Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary <code>${aliases.key}</code> or as list <code>@{aliases}[0]</code>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserA</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"https://example.com\">https://example.com</a></td>\n<td>alias=BrowserB</td>\n<td></td>\n</tr>\n<tr>\n<td>&amp;{aliases}</td>\n<td><a href=\"#Get%20Browser%20Aliases\" class=\"name\">Get Browser Aliases</a></td>\n<td></td>\n<td># &amp;{aliases} = { BrowserA=1|BrowserB=2 }</td>\n</tr>\n<tr>\n<td><span class=\"name\">Log</span></td>\n<td>${aliases.BrowserA}</td>\n<td></td>\n<td># logs <code>1</code></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${alias}</td>\n<td>IN</td>\n<td>@{aliases}</td>\n</tr>\n<tr>\n<td></td>\n<td><span class=\"name\">Log</span></td>\n<td>${alias}</td>\n<td># logs <code>BrowserA</code> and <code>BrowserB</code></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 459
            },
            {
                "name": "Get Browser Capabilities",
                "args": [],
                "doc": "<p>Get dictionary of browser properties</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${caps}=</td>\n<td>Get Browser Capabilities</td>\n</tr>\n</table>",
                "shortdoc": "Get dictionary of browser properties",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1748
            },
            {
                "name": "Get Browser Ids",
                "args": [],
                "doc": "<p>Returns index of all active browser as list.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>@{browser_ids}=</td>\n<td>Get Browser Ids</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>FOR</td>\n<td>${id}</td>\n<td>IN</td>\n<td>@{browser_ids}</td>\n</tr>\n<tr>\n<td></td>\n<td>@{window_titles}=</td>\n<td>Get Window Titles</td>\n<td>browser=${id}</td>\n</tr>\n<tr>\n<td></td>\n<td>Log</td>\n<td>Browser ${id} has these windows: ${window_titles}</td>\n<td></td>\n</tr>\n<tr>\n<td>END</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Returns index of all active browser as list.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 442
            },
            {
                "name": "Get Cookie",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    }
                ],
                "doc": "<p>Returns information of cookie with <code>name</code> as an object.</p>\n<p>If no cookie is found with <code>name</code>, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below.</p>\n<table border=\"1\">\n<tr>\n<th>Attribute</th>\n<th>Explanation</th>\n</tr>\n<tr>\n<td>name</td>\n<td>The name of a cookie.</td>\n</tr>\n<tr>\n<td>value</td>\n<td>Value of the cookie.</td>\n</tr>\n<tr>\n<td>path</td>\n<td>Indicates a URL path, for example <code>/</code>.</td>\n</tr>\n<tr>\n<td>domain</td>\n<td>The domain, the cookie is visible to.</td>\n</tr>\n<tr>\n<td>secure</td>\n<td>When true, the cookie is only used with HTTPS connections.</td>\n</tr>\n<tr>\n<td>httpOnly</td>\n<td>When true, the cookie is not accessible via JavaScript.</td>\n</tr>\n<tr>\n<td>expiry</td>\n<td>Python datetime object indicating when the cookie expires.</td>\n</tr>\n<tr>\n<td>extra</td>\n<td>Possible attributes outside of the WebDriver specification</td>\n</tr>\n</table>\n<p>See the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a> for details about the cookie information. Notice that <code>expiry</code> is specified as a <a href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\">datetime object</a>, not as seconds since Unix Epoch like WebDriver natively does.</p>\n<p>In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the <a href=\"https://w3c.github.io/webdriver/#cookies\">WebDriver specification</a>. These other attributes are available in an <code>extra</code> attribute in the cookie object and it contains a dictionary of the other attributes. The <code>extra</code> attribute is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Add%20Cookie\" class=\"name\">Add Cookie</a></td>\n<td>foo</td>\n<td>bar</td>\n</tr>\n<tr>\n<td>${cookie} =</td>\n<td><a href=\"#Get%20Cookie\" class=\"name\">Get Cookie</a></td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.name}</td>\n<td>foo</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be Equal</span></td>\n<td>${cookie.value}</td>\n<td>bar</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${cookie.expiry.year} &gt; 2017</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns information of cookie with ``name`` as an object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 97
            },
            {
                "name": "Get Cookies",
                "args": [
                    {
                        "name": "as_dict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_dict: bool = False"
                    }
                ],
                "doc": "<p>Returns all cookies of the current page.</p>\n<p>If <code>as_dict</code> argument evaluates as false, see <span class=\"name\">Boolean arguments</span> for more details, then cookie information is returned as a single string in format <code>name1=value1; name2=value2; name3=value3</code>. When <code>as_dict</code> argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter.</p>\n<p>The <span class=\"name\">` as_dict</span>` argument is new in SeleniumLibrary 3.3</p>",
                "shortdoc": "Returns all cookies of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "lineno": 70
            },
            {
                "name": "Get Element Attribute",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    }
                ],
                "doc": "<p>Returns the value of <code>attribute</code> from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${id}=</td>\n<td><a href=\"#Get%20Element%20Attribute\" class=\"name\">Get Element Attribute</a></td>\n<td>css:h1</td>\n<td>id</td>\n</tr>\n</table>\n<p>Passing attribute name as part of the <code>locator</code> was removed in SeleniumLibrary 3.2. The explicit <code>attribute</code> argument should be used instead.</p>",
                "shortdoc": "Returns the value of ``attribute`` from the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 396
            },
            {
                "name": "Get Element Count",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the number of elements matching <code>locator</code>.</p>\n<p>If you wish to assert the number of matching elements, use <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> with <code>limit</code> argument. Keyword will always return an integer.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${count} =</td>\n<td><a href=\"#Get%20Element%20Count\" class=\"name\">Get Element Count</a></td>\n<td>name:div_name</td>\n</tr>\n<tr>\n<td><span class=\"name\">Should Be True</span></td>\n<td>${count} &gt; 2</td>\n<td></td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns the number of elements matching ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1102
            },
            {
                "name": "Get Element Size",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns width and height of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both width and height are returned as integers.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height} =</td>\n<td><a href=\"#Get%20Element%20Size\" class=\"name\">Get Element Size</a></td>\n<td>css:div#container</td>\n</tr>\n</table>",
                "shortdoc": "Returns width and height of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 459
            },
            {
                "name": "Get Element Status",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Return dictionary containing element status of:</p>\n<ul>\n<li>visible</li>\n<li>enabled</li>\n<li>disabled</li>\n<li>focused</li>\n</ul>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>&amp;{res}</td>\n<td>Get Element Status</td>\n<td>class:special</td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.visible}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.enabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.disabled}</td>\n<td></td>\n</tr>\n<tr>\n<td>Log</td>\n<td>${res.focused}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Return dictionary containing element status of:",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1691
            },
            {
                "name": "Get Horizontal Position",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the horizontal position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the left side of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Vertical%20Position\" class=\"name\">Get Vertical Position</a>.</p>",
                "shortdoc": "Returns the horizontal position of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 445
            },
            {
                "name": "Get List Items",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "values: bool = False"
                    }
                ],
                "doc": "<p>Returns all labels or values of selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Returns visible labels by default, but values can be returned by setting the <code>values</code> argument to a true value (see <span class=\"name\">Boolean arguments</span>).</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${labels} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>mylist</td>\n<td></td>\n</tr>\n<tr>\n<td>${values} =</td>\n<td><a href=\"#Get%20List%20Items\" class=\"name\">Get List Items</a></td>\n<td>css:#example select</td>\n<td>values=True</td>\n</tr>\n</table>\n<p>Support to return values is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Returns all labels or values of selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 27
            },
            {
                "name": "Get Location",
                "args": [],
                "doc": "<p>Returns the current browser window URL.</p>",
                "shortdoc": "Returns the current browser window URL.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 498
            },
            {
                "name": "Get Locations",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs URLs of all windows of the selected browser.</p>\n<p><b>Browser Scope:</b></p>\n<p>The <code>browser</code> argument specifies the browser that shall return its windows information.</p>\n<ul>\n<li><code>browser</code> can be <code>index_or_alias</code> like in <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a>.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>CURRENT</code> (default, case-insensitive) the currently active browser is selected.</li>\n</ul>\n<ul>\n<li>If <code>browser</code> is <code>ALL</code> (case-insensitive) the window information of all windows of all opened browsers are returned.</li>\n</ul>",
                "shortdoc": "Returns and logs URLs of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 166
            },
            {
                "name": "Get Selected List Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the label of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the label of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the label of selected option from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 52
            },
            {
                "name": "Get Selected List Labels",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns labels of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns labels of selected options from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 65
            },
            {
                "name": "Get Selected List Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the value of selected option from selection list <code>locator</code>.</p>\n<p>If there are multiple selected options, the value of the first option is returned.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value of selected option from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 78
            },
            {
                "name": "Get Selected List Values",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns values of selected options from selection list <code>locator</code>.</p>\n<p>Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns values of selected options from selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 91
            },
            {
                "name": "Get Selenium Implicit Wait",
                "args": [],
                "doc": "<p>Gets the implicit wait value used by Selenium.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>",
                "shortdoc": "Gets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 620
            },
            {
                "name": "Get Selenium Speed",
                "args": [],
                "doc": "<p>Gets the delay that is waited after each Selenium command.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>",
                "shortdoc": "Gets the delay that is waited after each Selenium command.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 600
            },
            {
                "name": "Get Selenium Timeout",
                "args": [],
                "doc": "<p>Gets the timeout that is used by various keywords.</p>\n<p>The value is returned as a human-readable string like <code>1 second</code>.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>",
                "shortdoc": "Gets the timeout that is used by various keywords.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 610
            },
            {
                "name": "Get Session Id",
                "args": [],
                "doc": "<p>Returns the currently active browser session id.</p>\n<p>New in SeleniumLibrary 3.2</p>",
                "shortdoc": "Returns the currently active browser session id.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 480
            },
            {
                "name": "Get Source",
                "args": [],
                "doc": "<p>Returns the entire HTML source of the current page or frame.</p>",
                "shortdoc": "Returns the entire HTML source of the current page or frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 488
            },
            {
                "name": "Get Table Cell",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Returns contents of a table cell.</p>\n<p>The table is located using the <code>locator</code> argument and its cell found using <code>row</code> and <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on.</p>\n<p>All <code>&lt;th&gt;</code> and <code>&lt;td&gt;</code> elements anywhere in the table are considered to be cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Returns contents of a table cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 26
            },
            {
                "name": "Get Testability Status",
                "args": [],
                "doc": "<p>Get SeleniumTestability plugin status</p>",
                "shortdoc": "Get SeleniumTestability plugin status",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1718
            },
            {
                "name": "Get Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the text value of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the text value of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 515
            },
            {
                "name": "Get Title",
                "args": [],
                "doc": "<p>Returns the title of the current page.</p>",
                "shortdoc": "Returns the title of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 493
            },
            {
                "name": "Get Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the value attribute of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the value attribute of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 506
            },
            {
                "name": "Get Vertical Position",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the vertical position of the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The position is returned in pixels off the top of the page, as an integer.</p>\n<p>See also <a href=\"#Get%20Horizontal%20Position\" class=\"name\">Get Horizontal Position</a>.</p>",
                "shortdoc": "Returns the vertical position of the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 533
            },
            {
                "name": "Get WebElement",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns the first WebElement matching the given <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Returns the first WebElement matching the given ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 33
            },
            {
                "name": "Get WebElements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Returns a list of WebElement objects matching the <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case.</p>",
                "shortdoc": "Returns a list of WebElement objects matching the ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 42
            },
            {
                "name": "Get Window Handles",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns all child window handles of the selected browser as a list.</p>\n<p>Can be used as a list of windows to exclude with <span class=\"name\">Select Window</span>.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>\n<p>Prior to SeleniumLibrary 3.0, this keyword was named <span class=\"name\">List Windows</span>.</p>",
                "shortdoc": "Returns all child window handles of the selected browser as a list.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 130
            },
            {
                "name": "Get Window Identifiers",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs id attributes of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs id attributes of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 142
            },
            {
                "name": "Get Window Names",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs names of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs names of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 150
            },
            {
                "name": "Get Window Position",
                "args": [],
                "doc": "<p>Returns current window position.</p>\n<p>The position is relative to the top left corner of the screen. Returned values are integers. See also <a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${x}</td>\n<td>${y}=</td>\n<td><a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a></td>\n</tr>\n</table>",
                "shortdoc": "Returns current window position.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 256
            },
            {
                "name": "Get Window Size",
                "args": [
                    {
                        "name": "inner",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "inner: bool = False"
                    }
                ],
                "doc": "<p>Returns current window width and height as integers.</p>\n<p>See also <a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a>.</p>\n<p>If <code>inner</code> parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See <span class=\"name\">Boolean arguments</span> for more details on how to set boolean arguments. The <code>inner</code> is new in SeleniumLibrary 4.0.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${width}</td>\n<td>${height}=</td>\n<td><a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a></td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Returns current window width and height as integers.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 190
            },
            {
                "name": "Get Window Titles",
                "args": [
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Returns and logs titles of all windows of the selected browser.</p>\n<p>How to select the <code>browser</code> scope of this keyword, see <a href=\"#Get%20Locations\" class=\"name\">Get Locations</a>.</p>",
                "shortdoc": "Returns and logs titles of all windows of the selected browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 158
            },
            {
                "name": "Go Back",
                "args": [],
                "doc": "<p>Simulates the user clicking the back button on their browser.</p>",
                "shortdoc": "Simulates the user clicking the back button on their browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 584
            },
            {
                "name": "Go To",
                "args": [
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    }
                ],
                "doc": "<p>Navigates the current browser window to the provided <code>url</code>.</p>",
                "shortdoc": "Navigates the current browser window to the provided ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 589
            },
            {
                "name": "Handle Alert",
                "args": [
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Handles the current alert and returns its message.</p>\n<p>By default, the alert is accepted, but this can be controlled with the <code>action</code> argument that supports the following case-insensitive values:</p>\n<ul>\n<li><code>ACCEPT</code>: Accept the alert i.e. press <code>Ok</code>. Default.</li>\n<li><code>DISMISS</code>: Dismiss the alert i.e. press <code>Cancel</code>.</li>\n<li><code>LEAVE</code>: Leave the alert open.</li>\n</ul>\n<p>The <code>timeout</code> argument specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td>Handle Alert</td>\n<td></td>\n<td></td>\n<td># Accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>action=DISMISS</td>\n<td></td>\n<td># Dismiss alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>timeout=10 s</td>\n<td></td>\n<td># Use custom timeout and accept alert.</td>\n</tr>\n<tr>\n<td>Handle Alert</td>\n<td>DISMISS</td>\n<td>1 min</td>\n<td># Use custom timeout and dismiss alert.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td></td>\n<td># Accept alert and get its message.</td>\n</tr>\n<tr>\n<td>${message} =</td>\n<td>Handle Alert</td>\n<td>LEAVE</td>\n<td># Leave alert open and get its message.</td>\n</tr>\n</table>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Handles the current alert and returns its message.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 104
            },
            {
                "name": "Highlight Elements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "width",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "2px",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width: str = 2px"
                    },
                    {
                        "name": "style",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "dotted",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "style: str = dotted"
                    },
                    {
                        "name": "color",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "blue",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "color: str = blue"
                    }
                ],
                "doc": "<p>Highlight all matching elements by locator.</p>\n<p>Highlighting is done by adding a colored outline around the elements with CSS styling.</p>\n<p><code>locator</code>  element locator <code>width</code>    highlight outline width <code>style</code>    highlight outline style <code>color</code>    highlight outline color</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Highlight Elements</td>\n<td><a href=\"xpath://h2\">xpath://h2</a></td>\n</tr>\n</table>",
                "shortdoc": "Highlight all matching elements by locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1783
            },
            {
                "name": "Input Password",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given password into the text field identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See <a href=\"#Input%20Text\" class=\"name\">Input Text</a> for <code>clear</code> argument details.</p>\n<p>Difference compared to <a href=\"#Input%20Text\" class=\"name\">Input Text</a> is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>password</td>\n</tr>\n</table>\n<p>the password is shown as a normal keyword argument. A way to avoid that is using variables like</p>\n<table border=\"1\">\n<tr>\n<td>Input Password</td>\n<td>password_field</td>\n<td>${PASSWORD}</td>\n</tr>\n</table>\n<p>Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format.</p>\n<p>The <span class=\"name\">clear</span> argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Types the given password into the text field identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 242
            },
            {
                "name": "Input Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    }
                ],
                "doc": "<p>Types the given <code>text</code> into the text field identified by <code>locator</code>.</p>\n<p>When <code>clear</code> is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use <a href=\"#Input%20Password\" class=\"name\">Input Password</a> if you do not want the given <code>text</code> to be logged.</p>\n<p>If <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a> is used and the <code>text</code> argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the <code>text</code> string as is to the element. If a file should be transferred to the hub and upload should be performed, please use <a href=\"#Choose%20File\" class=\"name\">Choose File</a> keyword.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. See the <span class=\"name\">Boolean arguments</span> section how Boolean values are handled.</p>\n<p>Disabling the file upload the Selenium Grid node and the <span class=\"name\">clear</span> argument are new in SeleniumLibrary 4.0</p>",
                "shortdoc": "Types the given ``text`` into the text field identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 272
            },
            {
                "name": "Input Text Into Alert",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    }
                ],
                "doc": "<p>Types the given <code>text</code> into an input field in an alert.</p>\n<p>The alert is accepted by default, but that behavior can be controlled by using the <code>action</code> argument same way as with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a>.</p>\n<p><code>timeout</code> specifies how long to wait for the alert to appear. If it is not given, the global default <a href=\"#Timeout\" class=\"name\">timeout</a> is used instead.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Types the given ``text`` into an input field in an alert.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "lineno": 34
            },
            {
                "name": "Input Text When Element Is Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<p>Input text into locator after it has become visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>text</code> insert text to locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Input Text When Element Is Visible</td>\n<td>//input[@id=\"freetext\"]</td>\n<td>my feedback</td>\n</tr>\n</table>",
                "shortdoc": "Input text into locator after it has become visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1020
            },
            {
                "name": "Is Alert Present",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "ACCEPT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: str = ACCEPT"
                    }
                ],
                "doc": "<p>Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.</p>\n<p>Other possible actions are DISMISS and LEAVE.</p>\n<p><code>text</code> check if alert text is matching to this, if <span class=\"name\">None</span> will check if alert is present at all</p>\n<p><code>action</code> possible action if alert is present, default ACCEPT</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Alert Present</td>\n<td>alert message</td>\n</tr>\n</table>",
                "shortdoc": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1128
            },
            {
                "name": "Is Checkbox Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Is checkbox selected</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Checkbox Selected</td>\n<td>id:taxes-paid</td>\n</tr>\n</table>",
                "shortdoc": "Is checkbox selected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1187
            },
            {
                "name": "Is Element Attribute Equal To",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "attribute",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attribute: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is element attribute equal to expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>attribute</code> element attribute to check for</p>\n<p><code>expected</code> is attribute value equal to this</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Attribute Equal To</td>\n<td>h1</td>\n<td>id</td>\n<td>main</td>\n</tr>\n</table>",
                "shortdoc": "Is element attribute equal to expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1108
            },
            {
                "name": "Is Element Disabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element disabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Disabled</td>\n<td>//input[@type=\"submit\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element disabled",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1072
            },
            {
                "name": "Is Element Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element enabled</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Enabled</td>\n<td>input.field1</td>\n</tr>\n</table>",
                "shortdoc": "Is element enabled",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1036
            },
            {
                "name": "Is Element Focused",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element focused</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Focused</td>\n<td>//input[@id=\"freetext\"]</td>\n</tr>\n</table>",
                "shortdoc": "Is element focused",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1090
            },
            {
                "name": "Is Element Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "ignore_case",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_case: bool = False"
                    }
                ],
                "doc": "<p>Is element text expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected element text</p>\n<p><code>ignore_case</code> should check be case insensitive, default <span class=\"name\">False</span></p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Element Text</td>\n<td>id:name</td>\n<td>john doe</td>\n<td>ignore_case=True</td>\n</tr>\n</table>",
                "shortdoc": "Is element text expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1241
            },
            {
                "name": "Is Element Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "missing_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok: bool = True"
                    }
                ],
                "doc": "<p>Is element visible</p>\n<p><code>locator</code> element locator <code>missing_ok</code> default True, set to False if keyword should Fail if element does not exist</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Element Visible</td>\n<td>id:confirmation</td>\n</tr>\n</table>",
                "shortdoc": "Is element visible",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1054
            },
            {
                "name": "Is List Selected",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<p>Is any option selected in the</p>\n<p><code>locator</code> element locator</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selected</td>\n<td>id:cars</td>\n</tr>\n</table>",
                "shortdoc": "Is any option selected in the",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1281
            },
            {
                "name": "Is List Selection",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*expected: str"
                    }
                ],
                "doc": "<p>Is list selected with expected values</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected selected options</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is List Selection</td>\n<td>id:cars</td>\n<td>Ford</td>\n</tr>\n</table>",
                "shortdoc": "Is list selected with expected values",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1265
            },
            {
                "name": "Is Location",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    }
                ],
                "doc": "<p>Is current URL expected url</p>\n<p><code>url</code> expected current URL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n</tr>\n<tr>\n<td>${res}</td>\n<td>Is Location</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Is current URL expected url",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1296
            },
            {
                "name": "Is Radio Button Selected",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    }
                ],
                "doc": "<p>Is any radio button selected in the button group</p>\n<p><code>group_name</code> radio button group name</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Selected</td>\n<td>group_name=gender</td>\n</tr>\n</table>",
                "shortdoc": "Is any radio button selected in the button group",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1472
            },
            {
                "name": "Is Radio Button Set To",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Is radio button group set to expected value</p>\n<p><code>group_name</code> radio button group name</p>\n<p><code>value</code> expected value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Radio Button Set To</td>\n<td>group_name=gender</td>\n<td>value=female</td>\n</tr>\n</table>",
                "shortdoc": "Is radio button group set to expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1456
            },
            {
                "name": "Is Textarea Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is textarea matching expected value</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textarea value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textarea Value</td>\n<td>//textarea</td>\n<td>Yours sincerely</td>\n</tr>\n</table>",
                "shortdoc": "Is textarea matching expected value",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1597
            },
            {
                "name": "Is Textfield Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    }
                ],
                "doc": "<p>Is textfield value expected</p>\n<p><code>locator</code> element locator</p>\n<p><code>expected</code> expected textfield value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Textfield Value</td>\n<td>id:lname</td>\n<td>Lastname</td>\n</tr>\n</table>",
                "shortdoc": "Is textfield value expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1645
            },
            {
                "name": "Is Title",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    }
                ],
                "doc": "<p>Is page title expected</p>\n<p><code>title</code> expected title value</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${res}</td>\n<td>Is Title</td>\n<td>Webpage title text</td>\n</tr>\n</table>",
                "shortdoc": "Is page title expected",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1661
            },
            {
                "name": "List Selection Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*expected: str"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has <code>expected</code> options selected.</p>\n<p>It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated.</p>\n<p>If no expected options are given, validates that the list has no selections. A more explicit alternative is using <a href=\"#List%20Should%20Have%20No%20Selections\" class=\"name\">List Should Have No Selections</a>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>gender</td>\n<td>Female</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#List%20Selection%20Should%20Be\" class=\"name\">List Selection Should Be</a></td>\n<td>interests</td>\n<td>Test Automation</td>\n<td>Python</td>\n</tr>\n</table>",
                "shortdoc": "Verifies selection list ``locator`` has ``expected`` options selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 104
            },
            {
                "name": "List Should Have No Selections",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> has no options selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` has no options selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 141
            },
            {
                "name": "Location Should Be",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current URL is exactly <code>url</code>.</p>\n<p>The <code>url</code> argument contains the exact url that should exist in browser.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL is exactly ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 503
            },
            {
                "name": "Location Should Contain",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.2.0.</p>",
                "shortdoc": "Verifies that the current URL contains ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 521
            },
            {
                "name": "Log Location",
                "args": [],
                "doc": "<p>Logs and returns the current browser window URL.</p>",
                "shortdoc": "Logs and returns the current browser window URL.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 542
            },
            {
                "name": "Log Source",
                "args": [
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "INFO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = INFO"
                    }
                ],
                "doc": "<p>Logs and returns the HTML source of the current page or frame.</p>\n<p>The <code>loglevel</code> argument defines the used log level. Valid log levels are <code>WARN</code>, <code>INFO</code> (default), <code>DEBUG</code>, <code>TRACE</code> and <code>NONE</code> (no logging).</p>",
                "shortdoc": "Logs and returns the HTML source of the current page or frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 549
            },
            {
                "name": "Log Title",
                "args": [],
                "doc": "<p>Logs and returns the title of the current page.</p>",
                "shortdoc": "Logs and returns the title of the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 561
            },
            {
                "name": "Maximize Browser Window",
                "args": [],
                "doc": "<p>Maximizes current browser window.</p>",
                "shortdoc": "Maximizes current browser window.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 185
            },
            {
                "name": "Mouse Down",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates pressing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The element is pressed without releasing the mouse button.</p>\n<p>See also the more specific keywords <a href=\"#Mouse%20Down%20On%20Image\" class=\"name\">Mouse Down On Image</a> and <a href=\"#Mouse%20Down%20On%20Link\" class=\"name\">Mouse Down On Link</a>.</p>",
                "shortdoc": "Simulates pressing the left mouse button on the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 797
            },
            {
                "name": "Mouse Down On Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates a mouse down event on an image identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>",
                "shortdoc": "Simulates a mouse down event on an image identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1052
            },
            {
                "name": "Mouse Down On Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates a mouse down event on a link identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>",
                "shortdoc": "Simulates a mouse down event on a link identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1002
            },
            {
                "name": "Mouse Out",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates moving the mouse away from the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates moving the mouse away from the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 816
            },
            {
                "name": "Mouse Over",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates hovering the mouse over the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates hovering the mouse over the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 835
            },
            {
                "name": "Mouse Up",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Simulates releasing the left mouse button on the element <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Simulates releasing the left mouse button on the element ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 849
            },
            {
                "name": "Open Available Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "use_profile",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_profile: bool = False"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: Any = AUTO"
                    },
                    {
                        "name": "maximized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "maximized: bool = False"
                    },
                    {
                        "name": "browser_selection",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser_selection: Any = AUTO"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "profile_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_name: str | None = None"
                    },
                    {
                        "name": "profile_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_path: str | None = None"
                    },
                    {
                        "name": "preferences",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "preferences: dict | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: str | None = None"
                    },
                    {
                        "name": "user_agent",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user_agent: str | None = None"
                    },
                    {
                        "name": "download",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "download: Any = AUTO"
                    }
                ],
                "doc": "<p>Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.</p>\n<p>Optionally can be given a <code>url</code> as the first argument, to open the browser directly to the given page.</p>\n<p>Returns either a generated index or a custom <code>alias</code> for the browser instance. The returned value can be used to refer to that specific browser instance in other keywords.</p>\n<p>If the browser should start in a maximized window, this can be enabled with the argument <code>maximized</code>, but is disabled by default.</p>\n<p>For certain applications it might also be required to force a certain user-agent string for Selenium, which can be overriden with the <code>user_agent</code> argument.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open Available Browser</td>\n<td><a href=\"https://www.robocorp.com\">https://www.robocorp.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${index}=</td>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>browser_selection=opera,firefox</td>\n</tr>\n<tr>\n<td>Open Available Browser</td>\n<td>${URL}</td>\n<td>headless=True</td>\n<td>alias=HeadlessBrowser</td>\n</tr>\n</table>\n<h3>Browser order</h3>\n<p>The default order of supported browsers is based on the operating system and is as follows:</p>\n<table border=\"1\">\n<tr>\n<td>Platform</td>\n<td>Default order</td>\n</tr>\n<tr>\n<td><code>Windows</code> |\u00a0Chrome, Firefox, Edge, IE, Opera</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Linux</code>   |\u00a0Chrome, Firefox, Opera</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Darwin</code>  |\u00a0Chrome, Safari, Firefox, Opera</td>\n<td></td>\n</tr>\n</table>\n<p>The order can be overriden with a custom list by using the argument <code>browser_selection</code>. The argument can be either a comma-separated string or a list object.</p>\n<h3>Webdriver download</h3>\n<p>The library can (if requested) automatically download webdrivers for all supported browsers. This can be controlled with the argument <code>download</code>.</p>\n<p>If the value is <code>False</code>, it will only attempt to start webdrivers found from the system PATH.</p>\n<p>If the value is <code>True</code>, it will download a webdriver that matches the current browser.</p>\n<p>By default the argument has the value <code>AUTO</code>, which means it first attempts to use webdrivers found in PATH and if that fails forces a webdriver download.</p>\n<h3>Opening process</h3>\n<p>1. Parse list of preferred browser order. If not given, use values from above table.</p>\n<p>2. Loop through listed browsers:</p>\n<p>a. Set the webdriver options for the browser.</p>\n<p>b. Download webdriver (if requested).</p>\n<p>c. Attempt to launch the webdriver and stop the loop if successful.</p>\n<p>3. Return index/alias if webdriver was created, or raise an exception if no browsers were successfully opened.</p>\n<h3>Headless mode</h3>\n<p>If required, the browser can also run <span class=\"name\">headless</span>, which means that it does not create a visible window. Generally a headless browser is slightly faster, but might not support all features a normal browser does.</p>\n<p>One typical use-case for headless mode is in cloud containers, where there is no display available. It also prevents manual interaction with the browser, which can be either a benefit or a drawback depending on the context.</p>\n<p>It can be explicitly enabled or disabled with the argument <code>headless</code>. By default it will be disabled, unless it detects that it is running in a Linux environment without a display, i.e. a container.</p>\n<h3>Chrome options</h3>\n<p>Some features are currently available only for Chrome/Chromium. This includes using an existing user profile. By default Selenium uses a new profile for each session, but it can use an existing one by enabling the <code>use_profile</code> argument.</p>\n<p>If a custom profile is stored somewhere outside of the default location, the path to the profiles directory and the name of the profile can be controlled with <code>profile_path</code> and <code>profile_name</code> respectively.</p>\n<p>Profile preferences can be further overriden with the <code>preferences</code> argument by giving a dictionary of key/value pairs.</p>\n<p>Chrome can additionally connect through a <code>proxy</code>, which should be given as either local or remote address.</p>",
                "shortdoc": "Attempts to open a browser on the user's device from a set of supported browsers. Automatically downloads a corresponding webdriver if none is already installed.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 451
            },
            {
                "name": "Open Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "url: str | None = None"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "firefox",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = firefox"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "remote_url",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "remote_url: bool | str = False"
                    },
                    {
                        "name": "desired_capabilities",
                        "types": [
                            "dict",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "desired_capabilities: dict | None | str = None"
                    },
                    {
                        "name": "ff_profile_dir",
                        "types": [
                            "FirefoxProfile",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ff_profile_dir: FirefoxProfile | str | None = None"
                    },
                    {
                        "name": "options",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "options: Any | None = None"
                    },
                    {
                        "name": "service_log_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_log_path: str | None = None"
                    },
                    {
                        "name": "executable_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "executable_path: str | None = None"
                    }
                ],
                "doc": "<p>Opens a new browser instance to the optional <code>url</code>.</p>\n<p>The <code>browser</code> argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names.</p>\n<table border=\"1\">\n<tr>\n<th>Browser</th>\n<th>Name(s)</th>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>firefox, ff</td>\n</tr>\n<tr>\n<td>Google Chrome</td>\n<td>googlechrome, chrome, gc</td>\n</tr>\n<tr>\n<td>Headless Firefox</td>\n<td>headlessfirefox</td>\n</tr>\n<tr>\n<td>Headless Chrome</td>\n<td>headlesschrome</td>\n</tr>\n<tr>\n<td>Internet Explorer</td>\n<td>internetexplorer, ie</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td>edge</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td>safari</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td>opera</td>\n</tr>\n<tr>\n<td>Android</td>\n<td>android</td>\n</tr>\n<tr>\n<td>Iphone</td>\n<td>iphone</td>\n</tr>\n<tr>\n<td>PhantomJS</td>\n<td>phantomjs</td>\n</tr>\n<tr>\n<td>HTMLUnit</td>\n<td>htmlunit</td>\n</tr>\n<tr>\n<td>HTMLUnit with Javascript</td>\n<td>htmlunitwithjs</td>\n</tr>\n</table>\n<p>To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the <a href=\"https://github.com/robotframework/SeleniumLibrary#browser-drivers\">project documentation</a> for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.</p>\n<p>After opening the browser, it is possible to use optional <code>url</code> to navigate the browser to the desired address.</p>\n<p>Optional <code>alias</code> is an alias given for this browser instance and it can be used for switching between browsers. When same <code>alias</code> is given with two <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The <code>alias</code> definition overrules <code>browser</code> definition. When same <code>alias</code> is used but a different <code>browser</code> is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when <a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a> is called. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a> for more information and examples.</p>\n<p>Optional <code>remote_url</code> is the URL for a <a href=\"https://github.com/SeleniumHQ/selenium/wiki/Grid2\">Selenium Grid</a>.</p>\n<p>Optional <code>desired_capabilities</code> can be used to configure, for example, logging preferences for a browser or a browser and operating system when using <a href=\"http://saucelabs.com\">Sauce Labs</a>. Desired capabilities can be given either as a Python dictionary or as a string in the format <code>key1:value1,key2:value2</code>. <a href=\"https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities\">Selenium documentation</a> lists possible capabilities that can be enabled.</p>\n<p>Optional <code>ff_profile_dir</code> is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The <code>ff_profile_dir</code> can also be an instance of the <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html\">selenium.webdriver.FirefoxProfile</a> . As a third option, it is possible to use <span class=\"name\">FirefoxProfile</span> methods and attributes to define the profile using methods and attributes in the same way as with <code>options</code> argument. Example: It is possible to use FirefoxProfile <span class=\"name\">set_preference</span> to define different profile settings. See <code>options</code> argument documentation in below how to handle backslash escaping.</p>\n<p>Optional <code>options</code> argument allows defining browser specific Selenium options. Example for Chrome, the <code>options</code> argument allows defining the following <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">methods and attributes</a> and for Firefox these <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options\">methods and attributes</a> are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If <code>browser</code> argument is <span class=\"name\">android</span> then <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> is used. Selenium options are also supported, when <code>remote_url</code> argument is used.</p>\n<p>The SeleniumLibrary <code>options</code> argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.</p>\n<p>The string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: <span class=\"name\">add_argument(\"--headless\")</span> or <span class=\"name\">add_experimental_option(\"key\", \"value\")</span>. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, <span class=\"name\">headless=True</span>. Multiple methods and attributes must be separated by a semicolon. Example: <span class=\"name\">add_argument(\"--headless\");add_argument(\"--start-maximized\")</span>.</p>\n<p>Arguments allow defining Python data types and arguments are evaluated by using Python <a href=\"https://docs.python.org/3/library/ast.html#ast.literal_eval\">ast.literal_eval</a>. Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example <span class=\"name\">True</span> or <span class=\"name\">None</span>, by not using quotes around the arguments.</p>\n<p>The string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example <span class=\"name\">add_argument ( \"--headless\" )</span> is same as <span class=\"name\">add_argument(\"--headless\")</span>. But <span class=\"name\">add_argument(\" --headless \")</span> is not same same as <span class=\"name\">add_argument ( \"--headless\" )</span>, because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python <a href=\"https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\">raw strings</a> and example write: r\"C:\\\\path\\\\to\\\\profile\".</p>\n<p>As last format, <code>options</code> argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to <span class=\"name\">${options}</span> variable in the Robot Framework data:</p>\n<pre>\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n</pre>\n<p>Then the <span class=\"name\">${options}</span> variable can be used as an argument to <code>options</code>.</p>\n<p>Example the <code>options</code> argument can be used to launch Chomium-based applications which utilize the <a href=\"https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver\">Chromium Embedded Framework</a> . To lauch Chomium-based application, use <code>options</code> to define <span class=\"name\">binary_location</span> attribute and use <span class=\"name\">add_argument</span> method to define <span class=\"name\">remote-debugging-port</span> port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test.</p>\n<p>Optional <code>service_log_path</code> argument defines the name of the file where to write the browser driver logs. If the <code>service_log_path</code>  argument contain a  marker <code>{index}</code>, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">format string syntax</a>.</p>\n<p>Optional <code>executable_path</code> argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the <a href=\"https://en.wikipedia.org/wiki/PATH_(variable)\">$PATH</a>.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>alias=Firefox</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Edge</td>\n<td>remote_url=http://127.0.0.1:4444/wd/hub</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>about:blank</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>browser=Chrome</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Alias examples:</p>\n<table border=\"1\">\n<tr>\n<td>${1_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Opens new browser because alias is new.</td>\n</tr>\n<tr>\n<td>${2_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td></td>\n<td># Opens new browser because alias is not defined.</td>\n</tr>\n<tr>\n<td>${3_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=Chrome</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>${4_index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>alias=${1_index}</td>\n<td># Switches to the browser with Chrome alias.</td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${3_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${1_index}</td>\n<td>${4_index}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Should Be Equal</td>\n<td>${2_index}</td>\n<td>${2}</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Example when using <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options\">Chrome options</a> method:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")</td>\n<td># Sting format.</td>\n</tr>\n<tr>\n<td>${options} =</td>\n<td>Get Options</td>\n<td></td>\n<td></td>\n<td># Selenium options instance.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Chrome</td>\n<td>options=${options}</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")</td>\n<td># Start Chomium-based application.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td>None</td>\n<td>Chrome</td>\n<td>options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"</td>\n<td># Windows OS path escaping.</td>\n</tr>\n</table>\n<p>Example for FirefoxProfile</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=/path/to/profile</td>\n<td># Using profile from disk.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=${FirefoxProfile_instance}</td>\n<td># Using instance of FirefoxProfile.</td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://example.com\">http://example.com</a></td>\n<td>Firefox</td>\n<td>ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")</td>\n<td># Defining profile using FirefoxProfile mehtods.</td>\n</tr>\n</table>\n<p>If the provided configuration options are not enough, it is possible to use <a href=\"#Create%20Webdriver\" class=\"name\">Create Webdriver</a> to customize browser initialization even more.</p>\n<p>Applying <code>desired_capabilities</code> argument also for local browser is new in SeleniumLibrary 3.1.</p>\n<p>Using <code>alias</code> to decide, is the new browser opened is new in SeleniumLibrary 4.0. The <code>options</code> and <code>service_log_path</code> are new in SeleniumLibrary 4.0. Support for <code>ff_profile_dir</code> accepting an instance of the <span class=\"name\">selenium.webdriver.FirefoxProfile</span> and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0.</p>\n<p>Making <code>url</code> optional is new in SeleniumLibrary 4.1.</p>\n<p>The <code>executable_path</code> argument is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Opens a new browser instance to the optional ``url``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 60
            },
            {
                "name": "Open Chrome Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "use_profile",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_profile: bool = False"
                    },
                    {
                        "name": "headless",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headless: bool = False"
                    },
                    {
                        "name": "maximized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "maximized: bool = False"
                    },
                    {
                        "name": "alias",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "alias: str | None = None"
                    },
                    {
                        "name": "profile_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_name: str | None = None"
                    },
                    {
                        "name": "profile_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "profile_path: str | None = None"
                    },
                    {
                        "name": "preferences",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "preferences: dict | None = None"
                    },
                    {
                        "name": "proxy",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxy: str | None = None"
                    },
                    {
                        "name": "user_agent",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user_agent: str | None = None"
                    }
                ],
                "doc": "<p>Open Chrome browser. See <code>Open Available Browser</code> for descriptions of arguments.</p>",
                "shortdoc": "Open Chrome browser. See ``Open Available Browser`` for descriptions of arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 843
            },
            {
                "name": "Open Context Menu",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Opens the context menu on the element identified by <code>locator</code>.</p>",
                "shortdoc": "Opens the context menu on the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 862
            },
            {
                "name": "Open Headless Chrome Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    }
                ],
                "doc": "<p>Open Chrome browser in headless mode.</p>\n<p><code>url</code> URL to open</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${idx}</td>\n<td>Open Headless Chrome Browser</td>\n<td><a href=\"https://www.google.com\">https://www.google.com</a></td>\n</tr>\n</table>",
                "shortdoc": "Open Chrome browser in headless mode.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 898
            },
            {
                "name": "Open User Browser",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "tab",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tab=True"
                    }
                ],
                "doc": "<p>Open URL with user's default browser</p>\n<p>The browser opened with this keyword is not accessible with selenium. To interact with the opened browser it is possible to use <code>Desktop</code> library keywords.</p>\n<p>The keyword <a href=\"#Attach%20Chrome%20Browser\" class=\"name\">Attach Chrome Browser</a> can be used to access already open browser with selenium keywords.</p>\n<p>Read more: <a href=\"https://robocorp.com/docs/development-guide/browser/how-to-attach-to-running-chrome-browser\">https://robocorp.com/docs/development-guide/browser/how-to-attach-to-running-chrome-browser</a></p>\n<p><code>url</code> URL to open <code>tab</code> defines is url is opened in a tab (default <span class=\"name\">True</span>) or in new window (<span class=\"name\">False</span>)</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td></td>\n</tr>\n<tr>\n<td>Open User Browser</td>\n<td><a href=\"https://www.google.com?q=rpa\">https://www.google.com?q=rpa</a></td>\n<td>tab=False</td>\n</tr>\n</table>",
                "shortdoc": "Open URL with user's default browser",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1723
            },
            {
                "name": "Page Should Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that current page contains <code>text</code>.</p>\n<p>If this keyword fails, it automatically logs the page source using the log level specified with the optional <code>loglevel</code> argument. Valid log levels are <code>DEBUG</code>, <code>INFO</code> (default), <code>WARN</code>, and <code>NONE</code>. If the log level is <code>NONE</code> or below the current active log level the source will not be logged.</p>",
                "shortdoc": "Verifies that current page contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 128
            },
            {
                "name": "Page Should Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 430
            },
            {
                "name": "Page Should Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is found from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 70
            },
            {
                "name": "Page Should Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> is found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <code>None</code> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>\n<p>Examples assumes that locator matches to two elements.</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=1</td>\n<td># Keyword fails.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=2</td>\n<td># Keyword passes.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td>limit=none</td>\n<td># None is considered one or more.</td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a></td>\n<td>div_name</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n</table>\n<p>The <code>limit</code> argument is new in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Verifies that element ``locator`` is found on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 145
            },
            {
                "name": "Page Should Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1066
            },
            {
                "name": "Page Should Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1016
            },
            {
                "name": "Page Should Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 159
            },
            {
                "name": "Page Should Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 132
            },
            {
                "name": "Page Should Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> is found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` is found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 300
            },
            {
                "name": "Page Should Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies the current page does not contain <code>text</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies the current page does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 193
            },
            {
                "name": "Page Should Not Contain Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, buttons are searched using <code>id</code>, <code>name</code>, and <code>value</code>.</p>",
                "shortdoc": "Verifies button ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 451
            },
            {
                "name": "Page Should Not Contain Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies checkbox <code>locator</code> is not found from the current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies checkbox ``locator`` is not found from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 87
            },
            {
                "name": "Page Should Not Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that element <code>locator</code> is not found on the current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies that element ``locator`` is not found on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 205
            },
            {
                "name": "Page Should Not Contain Image",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies image identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, images are searched using <code>id</code>, <code>name</code>, <code>src</code> and <code>alt</code>.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies image identified by ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1084
            },
            {
                "name": "Page Should Not Contain Link",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies link identified by <code>locator</code> is not found from current page.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, links are searched using <code>id</code>, <code>name</code>, <code>href</code> and the link text.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>",
                "shortdoc": "Verifies link identified by ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1034
            },
            {
                "name": "Page Should Not Contain List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies selection list <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies selection list ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 176
            },
            {
                "name": "Page Should Not Contain Radio Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies radio button <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using <code>id</code>, <code>name</code> and <code>value</code>.</p>",
                "shortdoc": "Verifies radio button ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 150
            },
            {
                "name": "Page Should Not Contain Textfield",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> is not found from current page.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about <code>message</code> and <code>loglevel</code> arguments.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` is not found from current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 317
            },
            {
                "name": "Press Key",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<p><b>DEPRECATED in SeleniumLibrary 4.0.</b> use <a href=\"#Press%20Keys\" class=\"name\">Press Keys</a> instead.</p>",
                "shortdoc": "*DEPRECATED in SeleniumLibrary 4.0.* use `Press Keys` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 896
            },
            {
                "name": "Press Keys",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: WebElement | None | str = None"
                    },
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*keys: str"
                    }
                ],
                "doc": "<p>Simulates the user pressing key(s) to an element or on the active browser.</p>\n<p>If <code>locator</code> evaluates as false, see <span class=\"name\">Boolean arguments</span> for more details, then the <code>keys</code> are sent to the currently active browser. Otherwise element is searched and <code>keys</code> are send to the element identified by the <code>locator</code>. In later case, keyword fails if element is not found. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>keys</code> arguments can contain one or many strings, but it can not be empty. <code>keys</code> can also be a combination of <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html\">Selenium Keys</a> and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the <span class=\"name\">+</span> character, like in <span class=\"name\">CONTROL+c</span>. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string <span class=\"name\">AALTO</span> and <span class=\"name\">ALT</span> not parsed inside of the string. But <span class=\"name\">A+ALT+O</span> would found Selenium ALT key from the <code>keys</code> argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`.</p>\n<p>If Selenium Keys are detected in the <code>keys</code> argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with <span class=\"name\">+</span> character, example <span class=\"name\">E+N+D</span>.</p>\n<p><span class=\"name\">CTRL</span> is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL\">Selenium CONTROL</a> and ESC is alias for <a href=\"https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE\">Selenium ESCAPE</a></p>\n<p>New in SeleniumLibrary 3.3</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>AAAAA</td>\n<td></td>\n<td># Sends string \"AAAAA\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>None</td>\n<td>BBBBB</td>\n<td></td>\n<td># Sends string \"BBBBB\" to currently active browser.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>E+N+D</td>\n<td></td>\n<td># Sends string \"END\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX</td>\n<td>YY</td>\n<td># Sends strings \"XXX\" and \"YY\" to element.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>XXX+YY</td>\n<td></td>\n<td># Same as above.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT+ARROW_DOWN</td>\n<td></td>\n<td># Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>ALT</td>\n<td>ARROW_DOWN</td>\n<td># Pressing \"ALT\" key and then pressing ARROW_DOWN.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>text_field</td>\n<td>CTRL+c</td>\n<td></td>\n<td># Pressing CTRL key down, sends string \"c\" and then releases CTRL key.</td>\n</tr>\n<tr>\n<td><a href=\"#Press%20Keys\" class=\"name\">Press Keys</a></td>\n<td>button</td>\n<td>RETURN</td>\n<td></td>\n<td># Pressing \"ENTER\" key to element.</td>\n</tr>\n</table>",
                "shortdoc": "Simulates the user pressing key(s) to an element or on the active browser.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 904
            },
            {
                "name": "Print To Pdf",
                "args": [
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "params",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params: dict | None = None"
                    }
                ],
                "doc": "<p>Print the current page to a PDF document using Chromium devtools.</p>\n<p>For supported parameters see: <a href=\"https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF\">https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-printToPDF</a></p>\n<p><code>output_path</code> filepath for the generated pdf. By default it is saved to the output folder with name <span class=\"name\">out.pdf</span>.</p>\n<p><code>params</code> parameters for the Chrome print method. By default uses values:</p>\n<p><code>{ \"landscape\": False, \"displayHeaderFooter\": False, \"printBackground\": True, \"preferCSSPageSize\": True, }</code></p>",
                "shortdoc": "Print the current page to a PDF document using Chromium devtools.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1846
            },
            {
                "name": "Radio Button Should Be Set To",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> is set to <code>value</code>.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group ``group_name`` is set to ``value``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 168
            },
            {
                "name": "Radio Button Should Not Be Selected",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    }
                ],
                "doc": "<p>Verifies radio button group <code>group_name</code> has no selection.</p>\n<p><code>group_name</code> is the <code>name</code> of the radio button group.</p>",
                "shortdoc": "Verifies radio button group ``group_name`` has no selection.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 183
            },
            {
                "name": "Register Keyword To Run On Failure",
                "args": [
                    {
                        "name": "keyword",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword: str | None"
                    }
                ],
                "doc": "<p>Sets the keyword to execute, when a SeleniumLibrary keyword fails.</p>\n<p><code>keyword</code> is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments.</p>\n<p>The initial keyword to use is set when <a href=\"#Importing\" class=\"name\">importing</a> the library, and the keyword that is used by default is <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a>. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution.</p>\n<p>It is possible to use string <code>NOTHING</code> or <code>NONE</code>, case-insensitively, as well as Python <code>None</code> to disable this feature altogether.</p>\n<p>This keyword returns the name of the previously registered failure keyword or Python <code>None</code> if this functionality was previously disabled. The return value can be always used to restore the original value later.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>Log Source</td>\n<td></td>\n</tr>\n<tr>\n<td>${previous kw}=</td>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>NONE</td>\n</tr>\n<tr>\n<td><a href=\"#Register%20Keyword%20To%20Run%20On%20Failure\" class=\"name\">Register Keyword To Run On Failure</a></td>\n<td>${previous kw}</td>\n<td></td>\n</tr>\n</table>\n<p>Changes in SeleniumLibrary 3.0:</p>\n<ul>\n<li>Possible to use string <code>NONE</code> or Python <code>None</code> to disable the functionality.</li>\n<li>Return Python <code>None</code> when the functionality was disabled earlier. In previous versions special value <code>No Keyword</code> was returned and it could not be used to restore the original state.</li>\n</ul>",
                "shortdoc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\runonfailure.py",
                "lineno": 23
            },
            {
                "name": "Reload Page",
                "args": [],
                "doc": "<p>Simulates user reloading page.</p>",
                "shortdoc": "Simulates user reloading page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 595
            },
            {
                "name": "Remove Location Strategy",
                "args": [
                    {
                        "name": "strategy_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "strategy_name: str"
                    }
                ],
                "doc": "<p>Removes a previously added custom location strategy.</p>\n<p>See <a href=\"#Custom%20locators\" class=\"name\">Custom locators</a> for information on how to create and use custom strategies.</p>",
                "shortdoc": "Removes a previously added custom location strategy.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 1135
            },
            {
                "name": "Screenshot",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | None = None"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = "
                    }
                ],
                "doc": "<p>Capture page and/or element screenshot.</p>\n<p><code>locator</code> if defined, take element screenshot, if not takes page screenshot</p>\n<p><code>filename</code> filename for the screenshot, by default creates file <span class=\"name\">screenshot-timestamp-element/page.png</span> if set to <span class=\"name\">None</span> then file is not saved at all</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td>filename=locator.png</td>\n<td># element screenshot, defined filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>filename=page.png</td>\n<td></td>\n<td># page screenshot, defined filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>filename=${NONE}</td>\n<td></td>\n<td># page screenshot, NO file will be created</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td></td>\n<td></td>\n<td># page screenshot, default filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td></td>\n<td># element screenshot, default filename</td>\n</tr>\n<tr>\n<td>Screenshot</td>\n<td>locator=//img[@alt=\"Google\"]</td>\n<td>filename=${CURDIR}/subdir/loc.png</td>\n<td># element screenshot, create dirs if not existing</td>\n</tr>\n</table>",
                "shortdoc": "Capture page and/or element screenshot.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 910
            },
            {
                "name": "Scroll Element Into View",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Scrolls the element identified by <code>locator</code> into view.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.2.0</p>",
                "shortdoc": "Scrolls the element identified by ``locator`` into view.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 739
            },
            {
                "name": "Select All From List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Selects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects all options from multi-selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 193
            },
            {
                "name": "Select Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Selects the checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if checkbox is already selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects the checkbox identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 104
            },
            {
                "name": "Select Frame",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Sets frame identified by <code>locator</code> as the current frame.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Works both with frames and iframes. Use <a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a> to cancel the frame selection and return to the main frame.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>top-frame</td>\n<td># Select frame with id or name 'top-frame'</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>example</td>\n<td># Click link 'example' in the selected frame</td>\n</tr>\n<tr>\n<td><a href=\"#Unselect%20Frame\" class=\"name\">Unselect Frame</a></td>\n<td></td>\n<td># Back to main frame.</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Frame\" class=\"name\">Select Frame</a></td>\n<td>//iframe[@name='xxx']</td>\n<td># Select frame using xpath</td>\n</tr>\n</table>",
                "shortdoc": "Sets frame identified by ``locator`` as the current frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 25
            },
            {
                "name": "Select From List By Index",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "indexes",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*indexes: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``indexes``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 209
            },
            {
                "name": "Select From List By Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "labels",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*labels: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``labels``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 256
            },
            {
                "name": "Select From List By Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*values: str"
                    }
                ],
                "doc": "<p>Selects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Selects options from selection list ``locator`` by ``values``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 234
            },
            {
                "name": "Select Radio Button",
                "args": [
                    {
                        "name": "group_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "group_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<p>Sets the radio button group <code>group_name</code> to <code>value</code>.</p>\n<p>The radio button to be selected is located by two arguments:</p>\n<ul>\n<li><code>group_name</code> is the name of the radio button group.</li>\n<li><code>value</code> is the <code>id</code> or <code>value</code> attribute of the actual radio button.</li>\n</ul>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>size</td>\n<td>XL</td>\n</tr>\n<tr>\n<td><a href=\"#Select%20Radio%20Button\" class=\"name\">Select Radio Button</a></td>\n<td>contact</td>\n<td>email</td>\n</tr>\n</table>",
                "shortdoc": "Sets the radio button group ``group_name`` to ``value``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 198
            },
            {
                "name": "Set Browser Implicit Wait",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>Same as <a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a> but only affects the current browser.</p>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 698
            },
            {
                "name": "Set Download Directory",
                "args": [
                    {
                        "name": "directory",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "directory: str | None = None"
                    },
                    {
                        "name": "download_pdf",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "download_pdf: bool = True"
                    }
                ],
                "doc": "<p>Set browser download directory</p>\n<p><code>directory</code>    target directory for downloads, defaults to None which means that setting is removed <code>download_pdf</code> if <span class=\"name\">True</span> then PDF is downloaded instead of shown with browser's internal viewer</p>",
                "shortdoc": "Set browser download directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 1759
            },
            {
                "name": "Set Focus To Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Sets the focus to the element identified by <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Focus</span>.</p>",
                "shortdoc": "Sets the focus to the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 727
            },
            {
                "name": "Set Screenshot Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: None | str"
                    }
                ],
                "doc": "<p>Sets the directory for captured screenshots.</p>\n<p><code>path</code> argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when <a href=\"#Importing\" class=\"name\">importing</a> the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written.</p>\n<p>If <code>path</code> equals to EMBED (case insensitive) and <a href=\"#Capture%20Page%20Screenshot\" class=\"name\">Capture Page Screenshot</a> or <a href=\"#Capture%20Element%20Screenshot\" class=\"name\">capture Element Screenshot</a> keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html.</p>\n<p>The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2.</p>",
                "shortdoc": "Sets the directory for captured screenshots.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "lineno": 32
            },
            {
                "name": "Set Selenium Implicit Wait",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the implicit wait value used by Selenium.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>This keyword sets the implicit wait for all opened browsers. Use <a href=\"#Set%20Browser%20Implicit%20Wait\" class=\"name\">Set Browser Implicit Wait</a> to set it only to the current browser.</p>\n<p>See the <a href=\"#Implicit%20wait\" class=\"name\">Implicit wait</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig wait} =</td>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>10 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Perform AJAX call that is slow</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Implicit%20Wait\" class=\"name\">Set Selenium Implicit Wait</a></td>\n<td>${orig wait}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the implicit wait value used by Selenium.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 672
            },
            {
                "name": "Set Selenium Speed",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the delay that is waited after each Selenium command.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Selenium%20speed\" class=\"name\">Selenium Speed</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Selenium%20Speed\" class=\"name\">Set Selenium Speed</a></td>\n<td>0.5 seconds</td>\n</tr>\n</table>",
                "shortdoc": "Sets the delay that is waited after each Selenium command.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 630
            },
            {
                "name": "Set Selenium Timeout",
                "args": [
                    {
                        "name": "value",
                        "types": [
                            "timedelta"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: timedelta"
                    }
                ],
                "doc": "<p>Sets the timeout that is used by various keywords.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like <code>1 second</code>. The previous value is returned and can be used to restore the original value later if needed.</p>\n<p>See the <a href=\"#Timeout\" class=\"name\">Timeout</a> section above for more information.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>${orig timeout} =</td>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>15 seconds</td>\n</tr>\n<tr>\n<td><span class=\"name\">Open page that loads slowly</span></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Selenium%20Timeout\" class=\"name\">Set Selenium Timeout</a></td>\n<td>${orig timeout}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Sets the timeout that is used by various keywords.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 650
            },
            {
                "name": "Set Window Position",
                "args": [
                    {
                        "name": "x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "x: int"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "y: int"
                    }
                ],
                "doc": "<p>Sets window position using <code>x</code> and <code>y</code> coordinates.</p>\n<p>The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Position\" class=\"name\">Get Window Position</a>.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Position\" class=\"name\">Set Window Position</a></td>\n<td>100</td>\n<td>200</td>\n</tr>\n</table>",
                "shortdoc": "Sets window position using ``x`` and ``y`` coordinates.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 269
            },
            {
                "name": "Set Window Size",
                "args": [
                    {
                        "name": "width",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "width: int"
                    },
                    {
                        "name": "height",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "height: int"
                    },
                    {
                        "name": "inner",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "inner: bool = False"
                    }
                ],
                "doc": "<p>Sets current windows size to given <code>width</code> and <code>height</code>.</p>\n<p>Values can be given using strings containing numbers or by using actual numbers. See also <a href=\"#Get%20Window%20Size\" class=\"name\">Get Window Size</a>.</p>\n<p>Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size.</p>\n<p>If <code>inner</code> parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM <i>window.innerWidth</i> and <i>window.innerHeight</i>. See <span class=\"name\">Boolean arguments</span> for more details on how to set boolean arguments.</p>\n<p>The <code>inner</code> argument is new since SeleniumLibrary 4.0.</p>\n<p>This <code>inner</code> argument does not support Frames. If a frame is selected, switch to default before running this.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Set%20Window%20Size\" class=\"name\">Set Window Size</a></td>\n<td>800</td>\n<td>600</td>\n<td>True</td>\n</tr>\n</table>",
                "shortdoc": "Sets current windows size to given ``width`` and ``height``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 212
            },
            {
                "name": "Simulate Event",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "event",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "event: str"
                    }
                ],
                "doc": "<p>Simulates <code>event</code> on the element identified by <code>locator</code>.</p>\n<p>This keyword is useful if element has <code>OnEvent</code> handler that needs to be explicitly invoked.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Prior to SeleniumLibrary 3.0 this keyword was named <span class=\"name\">Simulate</span>.</p>",
                "shortdoc": "Simulates ``event`` on the element identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "lineno": 871
            },
            {
                "name": "Submit Form",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: WebElement | None | str = None"
                    }
                ],
                "doc": "<p>Submits a form identified by <code>locator</code>.</p>\n<p>If <code>locator</code> is not given, first form on the page is submitted.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Submits a form identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 29
            },
            {
                "name": "Switch Browser",
                "args": [
                    {
                        "name": "index_or_alias",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "index_or_alias: str"
                    }
                ],
                "doc": "<p>Switches between active browsers using <code>index_or_alias</code>.</p>\n<p>Indices are returned by the <a href=\"#Open%20Browser\" class=\"name\">Open Browser</a> keyword and aliases can be given to it explicitly. Indices start from 1.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td>ff</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td>ie</td>\n<td>alias=second</td>\n</tr>\n<tr>\n<td><a href=\"#Location%20Should%20Be\" class=\"name\">Location Should Be</a></td>\n<td><a href=\"http://yahoo.com\">http://yahoo.com</a></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>1</td>\n<td># index</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>I'm feeling lucky</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>second</td>\n<td># alias</td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Page%20Should%20Contain\" class=\"name\">Page Should Contain</a></td>\n<td>More Yahoo!</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Close%20All%20Browsers\" class=\"name\">Close All Browsers</a></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Above example expects that there was no other open browsers when opening the first one because it used index <code>1</code> when switching to it later. If you are not sure about that, you can store the index into a variable as below.</p>\n<table border=\"1\">\n<tr>\n<td>${index} =</td>\n<td><a href=\"#Open%20Browser\" class=\"name\">Open Browser</a></td>\n<td><a href=\"http://google.com\">http://google.com</a></td>\n</tr>\n<tr>\n<td># Do something ...</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></td>\n<td>${index}</td>\n<td></td>\n</tr>\n</table>",
                "shortdoc": "Switches between active browsers using ``index_or_alias``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 405
            },
            {
                "name": "Switch Window",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "list",
                            "str"
                        ],
                        "defaultValue": "MAIN",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: list | str = MAIN"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: str | None = None"
                    },
                    {
                        "name": "browser",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "CURRENT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "browser: str = CURRENT"
                    }
                ],
                "doc": "<p>Switches to browser window matching <code>locator</code>.</p>\n<p>If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.</p>\n<p>Notice that alerts should be handled with <a href=\"#Handle%20Alert\" class=\"name\">Handle Alert</a> or other alert related keywords.</p>\n<p>The <code>locator</code> can be specified using different strategies somewhat similarly as when <a href=\"#Locating%20elements\" class=\"name\">locating elements</a> on pages.</p>\n<ul>\n<li>By default, the <code>locator</code> is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.</li>\n</ul>\n<ul>\n<li>The <code>locator</code> can specify an explicit strategy by using the format <code>strategy:value</code> (recommended) or <code>strategy=value</code>. Supported strategies are <code>name</code>, <code>title</code>, and <code>url</code>. These matches windows using their name, title, or URL, respectively. Additionally, <code>default</code> can be used to explicitly use the default strategy explained above.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>NEW</code> (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>MAIN</code> (default, case-insensitive), the main window is selected.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is <code>CURRENT</code> (case-insensitive), nothing is done. This effectively just returns the current window handle.</li>\n</ul>\n<ul>\n<li>If the <code>locator</code> is not a string, it is expected to be a list of window handles <i>to exclude</i>. Such a list of excluded windows can be got from <a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a> before doing an action that opens a new window.</li>\n</ul>\n<p>The <code>timeout</code> is used to specify how long keyword will poll to select the new window. The <code>timeout</code> is new in SeleniumLibrary 3.2.</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup1</td>\n<td></td>\n<td># Open new window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>example</td>\n<td></td>\n<td># Select window using default strategy</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Button\" class=\"name\">Click Button</a></td>\n<td>popup2</td>\n<td></td>\n<td># Open another window</td>\n</tr>\n<tr>\n<td>${handle} =</td>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>NEW</td>\n<td># Select latest opened window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 2</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${handle}</td>\n<td></td>\n<td># Select window using handle</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 1</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>MAIN</td>\n<td></td>\n<td># Select the main window</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Main</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>${excludes} =</td>\n<td><a href=\"#Get%20Window%20Handles\" class=\"name\">Get Window Handles</a></td>\n<td></td>\n<td># Get list of current windows</td>\n</tr>\n<tr>\n<td><a href=\"#Click%20Link\" class=\"name\">Click Link</a></td>\n<td>popup3</td>\n<td></td>\n<td># Open one more window</td>\n</tr>\n<tr>\n<td><a href=\"#Switch%20Window\" class=\"name\">Switch Window</a></td>\n<td>${excludes}</td>\n<td></td>\n<td># Select window using excludes</td>\n</tr>\n<tr>\n<td><a href=\"#Title%20Should%20Be\" class=\"name\">Title Should Be</a></td>\n<td>Pop-up 3</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>The <code>browser</code> argument allows with <code>index_or_alias</code> to implicitly switch to a specific browser when switching to a window. See <a href=\"#Switch%20Browser\" class=\"name\">Switch Browser</a></p>\n<ul>\n<li>If the <code>browser</code> is <code>CURRENT</code> (case-insensitive), no other browser is selected.</li>\n</ul>\n<p><b>NOTE:</b></p>\n<ul>\n<li>The <code>strategy:value</code> syntax is only supported by SeleniumLibrary 3.0 and newer.</li>\n<li>Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.</li>\n<li>Earlier versions supported aliases <code>None</code>, <code>null</code> and the empty string for selecting the main window, and alias <code>self</code> for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2.</li>\n</ul>",
                "shortdoc": "Switches to browser window matching ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "lineno": 33
            },
            {
                "name": "Table Cell Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table cell contains text <code>expected</code>.</p>\n<p>See <a href=\"#Get%20Table%20Cell\" class=\"name\">Get Table Cell</a> that this keyword uses internally for an explanation about accepted arguments.</p>",
                "shortdoc": "Verifies table cell contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 90
            },
            {
                "name": "Table Column Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table column contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple columns, those merged cells count as a single column.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table column contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 113
            },
            {
                "name": "Table Footer Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table footer contains text <code>expected</code>.</p>\n<p>Any <code>&lt;td&gt;</code> element inside <code>&lt;tfoot&gt;</code> element is considered to be part of the footer.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table footer contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 144
            },
            {
                "name": "Table Header Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table header contains text <code>expected</code>.</p>\n<p>Any <code>&lt;th&gt;</code> element anywhere in the table is considered to be part of the header.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table header contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 169
            },
            {
                "name": "Table Row Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies that table row contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument and its column found using <code>column</code>. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on.</p>\n<p>If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies that table row contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 194
            },
            {
                "name": "Table Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "loglevel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "TRACE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "loglevel: str = TRACE"
                    }
                ],
                "doc": "<p>Verifies table contains text <code>expected</code>.</p>\n<p>The table is located using the <code>locator</code> argument. See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>See <a href=\"#Page%20Should%20Contain%20Element\" class=\"name\">Page Should Contain Element</a> for an explanation about the <code>loglevel</code> argument.</p>",
                "shortdoc": "Verifies table contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "lineno": 225
            },
            {
                "name": "Textarea Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text area <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 382
            },
            {
                "name": "Textarea Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text area <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text area ``locator`` has exactly text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 406
            },
            {
                "name": "Textfield Should Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> contains text <code>expected</code>.</p>\n<p><code>message</code> can be used to override the default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` contains text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 334
            },
            {
                "name": "Textfield Value Should Be",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies text field <code>locator</code> has exactly text <code>expected</code>.</p>\n<p><code>message</code> can be used to override default error message.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Verifies text field ``locator`` has exactly text ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 358
            },
            {
                "name": "Title Should Be",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Verifies that the current page title equals <code>title</code>.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p><code>message</code> argument is new in SeleniumLibrary 3.1.</p>",
                "shortdoc": "Verifies that the current page title equals ``title``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "lineno": 568
            },
            {
                "name": "Unselect All From List",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Unselects all options from multi-selection list <code>locator</code>.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p>New in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Unselects all options from multi-selection list ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 278
            },
            {
                "name": "Unselect Checkbox",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    }
                ],
                "doc": "<p>Removes the selection of checkbox identified by <code>locator</code>.</p>\n<p>Does nothing if the checkbox is not selected.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Removes the selection of checkbox identified by ``locator``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "lineno": 118
            },
            {
                "name": "Unselect Frame",
                "args": [],
                "doc": "<p>Sets the main frame as the current frame.</p>\n<p>In practice cancels the previous <a href=\"#Select%20Frame\" class=\"name\">Select Frame</a> call.</p>",
                "shortdoc": "Sets the main frame as the current frame.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "lineno": 45
            },
            {
                "name": "Unselect From List By Index",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "indexes",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*indexes: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>indexes</code>.</p>\n<p>Indexes of list options start from 0. This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``indexes``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 295
            },
            {
                "name": "Unselect From List By Label",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "labels",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*labels: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>labels</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``labels``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 347
            },
            {
                "name": "Unselect From List By Value",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*values: str"
                    }
                ],
                "doc": "<p>Unselects options from selection list <code>locator</code> by <code>values</code>.</p>\n<p>This keyword works only with multi-selection lists.</p>\n<p>See the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>",
                "shortdoc": "Unselects options from selection list ``locator`` by ``values``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "lineno": 322
            },
            {
                "name": "Wait And Click Button",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "modifier",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "modifier: str | None = None"
                    }
                ],
                "doc": "<p>Click button identified by <code>locator</code>, once it becomes visible.</p>\n<p><code>locator</code> element locator</p>\n<p><code>modifier</code> press given keys while clicking the element, e.g. CTRL</p>\n<p>Example:</p>\n<table border=\"1\">\n<tr>\n<td>Click Button When Visible</td>\n<td>//button[@class=\"mybutton\"]</td>\n</tr>\n</table>",
                "shortdoc": "Click button identified by ``locator``, once it becomes visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Browser\\Selenium.py",
                "lineno": 986
            },
            {
                "name": "Wait For Condition",
                "args": [
                    {
                        "name": "condition",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "condition: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>condition</code> is true or <code>timeout</code> expires.</p>\n<p>The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See <a href=\"#Execute%20Javascript\" class=\"name\">Execute JavaScript</a> for information about accessing content on pages.</p>\n<p>Fails if the timeout expires before the condition becomes true. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return document.title == \"New Title\"</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>return jQuery.active == 0</td>\n</tr>\n<tr>\n<td><a href=\"#Wait%20For%20Condition\" class=\"name\">Wait For Condition</a></td>\n<td>style = document.querySelector('h1').style; return style.background == \"red\" &amp;&amp; style.color == \"white\"</td>\n</tr>\n</table>",
                "shortdoc": "Waits until ``condition`` is true or ``timeout`` expires.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 31
            },
            {
                "name": "Wait Until Element Contains",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> contains <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` contains ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 373
            },
            {
                "name": "Wait Until Element Does Not Contain",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> does not contain <code>text</code>.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` does not contain ``text``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 397
            },
            {
                "name": "Wait Until Element Is Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is enabled.</p>\n<p>Element is considered enabled if it is not disabled nor read-only.</p>\n<p>Fails if <code>timeout</code> expires before the element is enabled. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0.</p>",
                "shortdoc": "Waits until the element ``locator`` is enabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 345
            },
            {
                "name": "Wait Until Element Is Not Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is not visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is not visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` is not visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 322
            },
            {
                "name": "Wait Until Element Is Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> is visible.</p>\n<p>Fails if <code>timeout</code> expires before the element is visible. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until the element ``locator`` is visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 299
            },
            {
                "name": "Wait Until Location Contains",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL contains <code>expected</code>.</p>\n<p>The <code>expected</code> argument contains the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL contains ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 123
            },
            {
                "name": "Wait Until Location Does Not Contain",
                "args": [
                    {
                        "name": "location",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "location: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL does not contains <code>location</code>.</p>\n<p>The <code>location</code> argument contains value not expected in url.</p>\n<p>Fails if <code>timeout</code> expires before the location not contains. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL does not contains ``location``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 151
            },
            {
                "name": "Wait Until Location Is",
                "args": [
                    {
                        "name": "expected",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL is <code>expected</code>.</p>\n<p>The <code>expected</code> argument is the expected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.0</p>",
                "shortdoc": "Waits until the current URL is ``expected``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 66
            },
            {
                "name": "Wait Until Location Is Not",
                "args": [
                    {
                        "name": "location",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "location: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    }
                ],
                "doc": "<p>Waits until the current URL is not <code>location</code>.</p>\n<p>The <code>location</code> argument is the unexpected value in url.</p>\n<p>Fails if <code>timeout</code> expires before the location is not. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p>The <code>message</code> argument can be used to override the default error message.</p>\n<p>New in SeleniumLibrary 4.3</p>",
                "shortdoc": "Waits until the current URL is not ``location``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 95
            },
            {
                "name": "Wait Until Page Contains",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>text</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until ``text`` appears on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 179
            },
            {
                "name": "Wait Until Page Contains Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> appears on the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element appears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can contain one or more elements. When limit is a number, page must contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element ``locator`` appears on the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 223
            },
            {
                "name": "Wait Until Page Does Not Contain",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    }
                ],
                "doc": "<p>Waits until <code>text</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the text disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value.</p>\n<p><code>error</code> can be used to override the default error message.</p>",
                "shortdoc": "Waits until ``text`` disappears from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 201
            },
            {
                "name": "Wait Until Page Does Not Contain Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "WebElement",
                            "None",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: WebElement | None | str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "timedelta",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: timedelta | None = None"
                    },
                    {
                        "name": "error",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "error: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    }
                ],
                "doc": "<p>Waits until the element <code>locator</code> disappears from the current page.</p>\n<p>Fails if <code>timeout</code> expires before the element disappears. See the <span class=\"name\">Timeouts</span> section for more information about using timeouts and their default value and the <a href=\"#Locating%20elements\" class=\"name\">Locating elements</a> section for details about the locator syntax.</p>\n<p><code>error</code> can be used to override the default error message.</p>\n<p>The <code>limit</code> argument can used to define how many elements the page should not contain. When <code>limit</code> is <span class=\"name\">None</span> (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements.</p>\n<p><code>limit</code> is new in SeleniumLibrary 4.4</p>",
                "shortdoc": "Waits until the element ``locator`` disappears from the current page.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "lineno": 261
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Cloud.AWS": {
        "name": "RPA.Cloud.AWS",
        "doc": "<div class=\"document\">\n<p><cite>AWS</cite> is a library for operating with Amazon AWS services S3, SQS,\nTextract and Comprehend.</p>\n<p>Services are initialized with keywords like <tt class=\"docutils literal\">Init S3 Client</tt> for S3.</p>\n<p><strong>AWS authentication</strong></p>\n<p>Authentication for AWS is set with <cite>key id</cite> and <cite>access key</cite> which can be given to the library\nin three different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, <tt class=\"docutils literal\">AWS_KEY_ID</tt> and <tt class=\"docutils literal\">AWS_KEY</tt>.</li>\n<li>Method 2 as keyword parameters to <tt class=\"docutils literal\">Init Textract Client</tt> for example.</li>\n<li>Method 3 as Robocloud vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p>Method 1. credentials using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get credentials\n</span><span class=\"p\">    </span><span class=\"c\"># with AWS_KEY and AWS_KEY_ID environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init S3 Client</span>\n</pre>\n<p>Method 2. credentials with keyword parameter</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">aws_key_id=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY_ID</span><span class=\"p\">}  </span><span class=\"s\">aws_key=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">  </span><span class=\"s\">robocloud_vault_name=aws</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">     </span><span class=\"s\">vault_name=aws</span><span class=\"p\">\n    </span><span class=\"nf\">Init Textract Client</span><span class=\"p\">    </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Requirements</strong></p>\n<p>The default installation depends on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\">boto3</a> library. Due to the size of the\ndependency, this library has been set as an optional package for <tt class=\"docutils literal\">rpaframework</tt>.</p>\n<p>This can be installed by opting in to the <cite>aws</cite> dependency:</p>\n<p><tt class=\"docutils literal\">pip install rpaframework[aws]</tt></p>\n<p><strong>Example</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">   </span><span class=\"s\">region=us-east-1</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}        </span><span class=\"s\">testbucket12213123123</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Upload a file into S3 bucket</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">\n    </span><span class=\"nf\">Upload File</span><span class=\"p\">      ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}   ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">file.pdf</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}         </span><span class=\"nf\">List Files</span><span class=\"p\">   ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:05:59",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
        "lineno": 891,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "eu-west-1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str = eu-west-1"
                    },
                    {
                        "name": "robocloud_vault_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "robocloud_vault_name: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 990
            }
        ],
        "keywords": [
            {
                "name": "Analyze Document",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str = None"
                    },
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    },
                    {
                        "name": "model",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "model: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Analyzes an input document for relationships between detected items</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model:</th><td class=\"field-body\">set <cite>True</cite> to return Textract Document model, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json or TextractDocument model</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Analyze Document</span><span class=\"p\">    </span><span class=\"c\">${filename}</span><span class=\"p\">    </span><span class=\"c\">model=True</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{response.pages}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.tables}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n    </span><span class=\"c\">Log Lines</span><span class=\"p\">    </span><span class=\"c\">${page.lines}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Analyzes an input document for relationships between detected items",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 361
            },
            {
                "name": "Convert Textract Response To Model",
                "args": [
                    {
                        "name": "response",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "response"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Convert AWS Textract JSON response into TextractDocument object,\nwhich has following structure:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>Document</li>\n<li>Page</li>\n<li>Tables</li>\n<li>Rows</li>\n<li>Cells</li>\n<li>Lines</li>\n<li>Words</li>\n<li>Form</li>\n<li>Field</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param response:</th><td class=\"field-body\">JSON response from AWS Textract service</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>TextractDocument</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Analyze Document</span><span class=\"p\">    </span><span class=\"c\">${filename}</span><span class=\"p\">\n</span><span class=\"c\">${model}=</span><span class=\"p\">    </span><span class=\"c\">Convert Textract Response To Model</span><span class=\"p\">    </span><span class=\"c\">${response}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{model.pages}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.tables}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n    </span><span class=\"c\">Log Lines</span><span class=\"p\">    </span><span class=\"c\">${page.lines}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert AWS Textract JSON response into TextractDocument object, which has following structure:",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 691
            },
            {
                "name": "Create Bucket",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create S3 bucket with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create S3 bucket with name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 144
            },
            {
                "name": "Create Queue",
                "args": [
                    {
                        "name": "queue_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "queue_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">create queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create queue with name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 867
            },
            {
                "name": "Delete Bucket",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete S3 bucket with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete S3 bucket with name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 160
            },
            {
                "name": "Delete Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    },
                    {
                        "name": "files",
                        "types": [
                            "list"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files: list = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files deleted or <cite>False</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete files in the bucket",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 186
            },
            {
                "name": "Delete Message",
                "args": [
                    {
                        "name": "receipt_handle",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "receipt_handle: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete message in the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param receipt_handle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message handle to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete message in the queue",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 853
            },
            {
                "name": "Delete Queue",
                "args": [
                    {
                        "name": "queue_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "queue_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete queue with name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 879
            },
            {
                "name": "Detect Document Text",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str = None"
                    },
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detects text in the input document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Detects text in the input document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 490
            },
            {
                "name": "Detect Entities",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str = None"
                    },
                    {
                        "name": "lang",
                        "types": [],
                        "defaultValue": "en",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "lang=en"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Inspects text for named entities, and returns information about them</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Inspects text for named entities, and returns information about them",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 778
            },
            {
                "name": "Detect Sentiment",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str = None"
                    },
                    {
                        "name": "lang",
                        "types": [],
                        "defaultValue": "en",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "lang=en"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Inspects text and returns an inference of the prevailing sentiment</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Inspects text and returns an inference of the prevailing sentiment",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 760
            },
            {
                "name": "Download Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    },
                    {
                        "name": "files",
                        "types": [
                            "list"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files: list = None"
                    },
                    {
                        "name": "target_directory",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_directory: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Download files from bucket to local filesystem</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of S3 object names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location for the downloaded files, default\ncurrent directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files downloaded</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Download files from bucket to local filesystem",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 305
            },
            {
                "name": "Get Cells",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get parsed cells from the response</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">cells</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get parsed cells from the response",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 482
            },
            {
                "name": "Get Document Analysis",
                "args": [
                    {
                        "name": "job_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "job_id: str = None"
                    },
                    {
                        "name": "max_results",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1000",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_results: int = 1000"
                    },
                    {
                        "name": "next_token",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "next_token: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Analysis</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Analysis</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${i}</span><span class=\"p\">    </span><span class=\"c\">IN RANGE</span><span class=\"p\">    </span><span class=\"c\">50</span><span class=\"p\">\n    </span><span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Get Document Analysis</span><span class=\"p\">  </span><span class=\"c\">${jobid}</span><span class=\"p\">\n    </span><span class=\"c\">Exit For Loop If</span><span class=\"p\">    </span><span class=\"c\">&quot;${response}[JobStatus]&quot; == &quot;SUCCEEDED&quot;</span><span class=\"p\">\n    </span><span class=\"c\">Sleep</span><span class=\"p\">    </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get the results of Textract asynchronous `Document Analysis` operation",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 563
            },
            {
                "name": "Get Document Text Detection",
                "args": [
                    {
                        "name": "job_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "job_id: str = None"
                    },
                    {
                        "name": "max_results",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1000",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_results: int = 1000"
                    },
                    {
                        "name": "next_token",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "next_token: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Text Detection</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Text Detection</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${i}</span><span class=\"p\">    </span><span class=\"c\">IN RANGE</span><span class=\"p\">    </span><span class=\"c\">50</span><span class=\"p\">\n    </span><span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Get Document Text Detection</span><span class=\"p\">    </span><span class=\"c\">${jobid}</span><span class=\"p\">\n    </span><span class=\"c\">Exit For Loop If</span><span class=\"p\">    </span><span class=\"c\">&quot;${response}[JobStatus]&quot; == &quot;SUCCEEDED&quot;</span><span class=\"p\">\n    </span><span class=\"c\">Sleep</span><span class=\"p\">    </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get the results of Textract asynchronous `Document Text Detection` operation",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 657
            },
            {
                "name": "Get Pages And Text",
                "args": [
                    {
                        "name": "textract_response",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "textract_response: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get pages and text out of Textract response json</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param textract_response:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">JSON from Textract</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary, page numbers as keys and value is a list\nof text lines</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get pages and text out of Textract response json",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 597
            },
            {
                "name": "Get Tables",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get parsed tables from the response</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tables</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get parsed tables from the response",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 468
            },
            {
                "name": "Get Words",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get parsed words from the response</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">words</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get parsed words from the response",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 475
            },
            {
                "name": "Init Comprehend Client",
                "args": [
                    {
                        "name": "aws_key_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key_id: str | None = None"
                    },
                    {
                        "name": "aws_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key: str | None = None"
                    },
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize AWS Comprehend client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize AWS Comprehend client",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 741
            },
            {
                "name": "Init S3 Client",
                "args": [
                    {
                        "name": "aws_key_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key_id: str | None = None"
                    },
                    {
                        "name": "aws_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key: str | None = None"
                    },
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize AWS S3 client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize AWS S3 client",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 127
            },
            {
                "name": "Init Sqs Client",
                "args": [
                    {
                        "name": "aws_key_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key_id: str | None = None"
                    },
                    {
                        "name": "aws_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key: str | None = None"
                    },
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "queue_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "queue_url: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize AWS SQS client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQS queue url</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize AWS SQS client",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 799
            },
            {
                "name": "Init Textract Client",
                "args": [
                    {
                        "name": "aws_key_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key_id: str | None = None"
                    },
                    {
                        "name": "aws_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "aws_key: str | None = None"
                    },
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize AWS Textract client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocloud Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize AWS Textract client",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 344
            },
            {
                "name": "List Buckets",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List all buckets for this account</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of buckets</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List all buckets for this account",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 176
            },
            {
                "name": "List Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List files in the bucket",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 211
            },
            {
                "name": "Receive Message",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Receive message from queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">message as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Receive message from queue",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 841
            },
            {
                "name": "Send Message",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str = None"
                    },
                    {
                        "name": "message_attributes",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message_attributes: dict = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send message to the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">body of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param message_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">attributes of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">send message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Send message to the queue",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 819
            },
            {
                "name": "Set Robocloud Vault",
                "args": [
                    {
                        "name": "vault_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "vault_name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Robocloud Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocloud Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set Robocloud Vault name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 111
            },
            {
                "name": "Start Document Analysis",
                "args": [
                    {
                        "name": "bucket_name_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name_in: str = None"
                    },
                    {
                        "name": "object_name_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "object_name_in: str = None"
                    },
                    {
                        "name": "object_version_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "object_version_in: str = None"
                    },
                    {
                        "name": "bucket_name_out",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name_out: str = None"
                    },
                    {
                        "name": "prefix_object_out",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "textract_output",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "prefix_object_out: str = textract_output"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Starts the asynchronous analysis of an input document\nfor relationships between detected items such as key-value pairs,\ntables, and selection elements.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Analysis</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n",
                "shortdoc": "Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 517
            },
            {
                "name": "Start Document Text Detection",
                "args": [
                    {
                        "name": "bucket_name_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name_in: str = None"
                    },
                    {
                        "name": "object_name_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "object_name_in: str = None"
                    },
                    {
                        "name": "object_version_in",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "object_version_in: str = None"
                    },
                    {
                        "name": "bucket_name_out",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name_out: str = None"
                    },
                    {
                        "name": "prefix_object_out",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "textract_output",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "prefix_object_out: str = textract_output"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Starts the asynchronous detection of text in a document.\nAmazon Textract can detect lines of text and the words that make up a\nline of text.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Text Detection</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n",
                "shortdoc": "Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 614
            },
            {
                "name": "Upload File",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str = None"
                    },
                    {
                        "name": "object_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "object_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload single file into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath for the file to be uploaded</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the object in the bucket, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple of upload status and error</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>object_name</cite> is not given then basename of the file is\nused as <cite>object_name</cite>.</p>\n</div>\n",
                "shortdoc": "Upload single file into bucket",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 247
            },
            {
                "name": "Upload Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bucket_name: str = None"
                    },
                    {
                        "name": "files",
                        "types": [
                            "list"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files: list = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload multiple files into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files (2 possible ways, see above)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files uploaded</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>Giving files as list of filepaths:</dt>\n<dd>['/path/to/file1.txt', '/path/to/file2.txt']</dd>\n<dt>Giving files as list of dictionaries (including filepath and object name):</dt>\n<dd>[{'filepath':'/path/to/file1.txt', 'object_name': 'file1.txt'},\n{'filepath': '/path/to/file2.txt', 'object_name': 'file2.txt'}]</dd>\n</dl>\n</div>\n",
                "shortdoc": "Upload multiple files into bucket",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\AWS.py",
                "lineno": 266
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Cloud.Azure": {
        "name": "RPA.Cloud.Azure",
        "doc": "<div class=\"document\">\n<p><cite>Azure</cite> is a library for operating with Microsoft Azure API endpoints.</p>\n<p>List of supported service names:</p>\n<ul class=\"simple\">\n<li>computervision (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/computer-vision/\">Azure Computer Vision API</a>)</li>\n<li>face (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/\">Azure Face API</a>)</li>\n<li>speech (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/\">Azure Speech Services API</a>)</li>\n<li>textanalytics (<a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/\">Azure Text Analytics API</a>)</li>\n</ul>\n<p><strong>Azure authentication</strong></p>\n<p>Authentication for Azure is set with <cite>service subscription key</cite> which can be given to the library\nin two different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, either service specific environment variable\nfor example <tt class=\"docutils literal\">AZURE_TEXTANALYTICS_KEY</tt> or with common key <tt class=\"docutils literal\">AZURE_SUBSCRIPTION_KEY</tt> which\nwill be used for all the services.</li>\n<li>Method 2 as Robocorp Vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocloud Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p>Method 1. subscription key using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get subscription key\n</span><span class=\"p\">    </span><span class=\"c\"># with AZURE_TEXTANALYTICS_KEY or AZURE_SUBSCRIPTION_KEY environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init Text Analytics Service</span>\n</pre>\n<p>Method 2. setting Robocloud Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">  </span><span class=\"s\">robocloud_vault_name=azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 2. setting Robocloud Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Azure services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocloud Vault</span><span class=\"p\">          </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n    </span><span class=\"nf\">Init Text Analytics Service</span><span class=\"p\">  </span><span class=\"s\">use_robocloud_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>References</strong></p>\n<p>List of supported language locales - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/language-support#speech-to-text\">Azure locale list</a></p>\n<p>List of supported region identifiers - <a class=\"reference external\" href=\"https://docs.microsoft.com/en-gb/azure/cognitive-services/speech-service/regions#speech-to-text-text-to-speech-and-translation\">Azure region list</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>This is a section which describes how to use the library in your\nRobot Framework tasks.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Cloud.Azure</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}   </span><span class=\"s\">IMAGE_URL</span><span class=\"p\">\n${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}    </span><span class=\"s\">Faces,ImageType</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Visioning image information</span><span class=\"p\">\n   </span><span class=\"nf\">Init Computer Vision Service</span><span class=\"p\">\n   &amp;{</span><span class=\"nv\">result</span><span class=\"p\">}   </span><span class=\"nf\">Vision Analyze</span><span class=\"p\">  </span><span class=\"s\">image_url=</span><span class=\"p\">${</span><span class=\"nv\">IMAGE_URL</span><span class=\"p\">}  </span><span class=\"s\">visual_features=</span><span class=\"p\">${</span><span class=\"nv\">FEATURES</span><span class=\"p\">}\n   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}    </span><span class=\"nf\">Set Variable</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[faces]</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">face</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">faces</span><span class=\"p\">}\n      </span><span class=\"nf\">Log</span><span class=\"p\">  </span><span class=\"s\">Age: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[age], Gender: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[gender], Rectangle: </span><span class=\"p\">${</span><span class=\"nv\">face</span><span class=\"p\">}</span><span class=\"s\">[faceRectangle]</span><span class=\"p\">\n   </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>This is a section which describes how to use the library in your\nown Python modules.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Azure</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_text_analytics_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_face_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_computer_vision_service</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_speech_service</span><span class=\"p\">(</span><span class=\"s2\">&quot;westeurope&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">sentiment_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;The rooms were wonderful and the staff was helpful.&quot;</span>\n<span class=\"p\">)</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">detect_face</span><span class=\"p\">(</span>\n   <span class=\"n\">image_file</span><span class=\"o\">=</span><span class=\"n\">PATH_TO_FILE</span><span class=\"p\">,</span>\n   <span class=\"n\">face_attributes</span><span class=\"o\">=</span><span class=\"s2\">&quot;age,gender,smile,hair,facialHair,emotion&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n   <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;gender&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceAttributes&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;age&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">gender</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">age</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">vision_analyze</span><span class=\"p\">(</span>\n   <span class=\"n\">image_url</span><span class=\"o\">=</span><span class=\"n\">URL_TO_IMAGE</span><span class=\"p\">,</span>\n   <span class=\"n\">visual_features</span><span class=\"o\">=</span><span class=\"s2\">&quot;Faces,ImageType&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">meta</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'metadata'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n   <span class=\"sa\">f</span><span class=\"s2\">&quot;Image dimensions meta['width']</span><span class=\"si\">}</span><span class=\"s2\">x</span><span class=\"si\">{</span><span class=\"n\">meta</span><span class=\"p\">[</span><span class=\"s1\">'height'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> pixels&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">face</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;faces&quot;</span><span class=\"p\">]:</span>\n   <span class=\"n\">left</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;left&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;top&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;width&quot;</span><span class=\"p\">]</span>\n   <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s2\">&quot;faceRectangle&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;height&quot;</span><span class=\"p\">]</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Detected a face, gender:</span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'gender'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">, age: </span><span class=\"si\">{</span><span class=\"n\">face</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (left=</span><span class=\"si\">{</span><span class=\"n\">left</span><span class=\"si\">}</span><span class=\"s2\">, top=</span><span class=\"si\">{</span><span class=\"n\">top</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n   <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;      Face rectangle: (width=</span><span class=\"si\">{</span><span class=\"n\">width</span><span class=\"si\">}</span><span class=\"s2\">, height=</span><span class=\"si\">{</span><span class=\"n\">height</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">text_to_speech</span><span class=\"p\">(</span>\n    <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Developer tools for open-source RPA leveraging the Robot Framework ecosystem&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">neural_voice_style</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheerful&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">target_file</span><span class=\"o\">=</span><span class=\"s1\">'output.mp3'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:00",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
        "lineno": 592,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "northeurope",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str = northeurope"
                    },
                    {
                        "name": "robocloud_vault_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "robocloud_vault_name: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 741
            }
        ],
        "keywords": [
            {
                "name": "Detect Face",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_url: str | None = None"
                    },
                    {
                        "name": "face_attributes",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "face_attributes: str | None = None"
                    },
                    {
                        "name": "face_landmarks",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "face_landmarks: bool = False"
                    },
                    {
                        "name": "recognition_model",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "recognition_02",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recognition_model: str = recognition_02"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect facial attributes in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of attributes,\nfor example. &quot;age,gender,smile&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param face_landmarks:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">return face landmarks of the detected faces\nor not. The default value is <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recognition_model:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">model used by Azure to detech faces, options\nare &quot;recognition_01&quot; or &quot;recognition_02&quot;, default is &quot;recognition_02&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>Read more about <cite>face_attributes</cite> at <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/face/concepts/face-detection\">Face detection explained</a>:</p>\n<ul class=\"simple\">\n<li>age</li>\n<li>gender</li>\n<li>smile</li>\n<li>facialHair</li>\n<li>headPose</li>\n<li>glasses</li>\n<li>emotion</li>\n<li>hair</li>\n<li>makeup</li>\n<li>accessories</li>\n<li>blur</li>\n<li>exposure</li>\n<li>nouse</li>\n</ul>\n</div>\n",
                "shortdoc": "Detect facial attributes in the image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 295
            },
            {
                "name": "Detect Language",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect languages in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Detect languages in the given text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 224
            },
            {
                "name": "Find Entities",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "language",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect entities in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Detect entities in the given text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 257
            },
            {
                "name": "Init Computer Vision Service",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Azure Computer Vision</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocorp Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Azure Computer Vision",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 360
            },
            {
                "name": "Init Face Service",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Azure Face</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocorp Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Azure Face",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 283
            },
            {
                "name": "Init Speech Service",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Azure Speech</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocorp Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Azure Speech",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 479
            },
            {
                "name": "Init Text Analytics Service",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region: str | None = None"
                    },
                    {
                        "name": "use_robocloud_vault",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocloud_vault: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Azure Text Analyticts</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">identifier for service region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocloud_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocorp Vault</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Azure Text Analyticts",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 192
            },
            {
                "name": "Key Phrases",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "language",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect key phrases in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Detect key phrases in the given text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 238
            },
            {
                "name": "List Supported Voices",
                "args": [
                    {
                        "name": "locale",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locale: str | None = None"
                    },
                    {
                        "name": "neural_only",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "neural_only: bool = False"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List supported voices for Azure API Speech Services.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">list only voices specific to locale, by default return all voices</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_only:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><cite>True</cite> if only neural voices should be returned,\n<cite>False</cite> by default</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">voices in json</td>\n</tr>\n</tbody>\n</table>\n<p>Available voice selection might differ between regions.</p>\n</div>\n",
                "shortdoc": "List supported voices for Azure API Speech Services.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 565
            },
            {
                "name": "Sentiment Analyze",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "language",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Analyze sentiments in the given text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">if input language is known</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Analyze sentiments in the given text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 204
            },
            {
                "name": "Set Robocloud Vault",
                "args": [
                    {
                        "name": "vault_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "vault_name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Robocorp Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocorp Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set Robocorp Vault name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 174
            },
            {
                "name": "Text To Speech",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "language",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "en-US",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language: str = en-US"
                    },
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "en-US-AriaRUS",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name: str = en-US-AriaRUS"
                    },
                    {
                        "name": "gender",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "FEMALE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "gender: str = FEMALE"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "MP3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str = MP3"
                    },
                    {
                        "name": "neural_voice_style",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "neural_voice_style: Any | None = None"
                    },
                    {
                        "name": "target_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "synthesized.mp3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_file: str = synthesized.mp3"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Synthesize speech synchronously</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">input text to synthesize</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">voice language, defaults to &quot;en-US&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">voice name, defaults to &quot;en-US-AriaRUS&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param gender:</th><td class=\"field-body\">voice gender, defaults to &quot;FEMALE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">result encoding type, defaults to &quot;MP3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param neural_voice_style:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then neural voice is used,\nexample style. &quot;cheerful&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save synthesized output to file,\ndefaults to &quot;synthesized.mp3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">synthesized output in bytes</td>\n</tr>\n</tbody>\n</table>\n<p>Neural voices are only supported for Speech resources created in\nEast US, South East Asia, and West Europe regions.</p>\n</div>\n",
                "shortdoc": "Synthesize speech synchronously",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 491
            },
            {
                "name": "Vision Analyze",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_url: str | None = None"
                    },
                    {
                        "name": "visual_features",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "visual_features: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Identify features in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param visual_features:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">comma separated list of features,\nfor example. &quot;Categories,Description,Color&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n<p>See <a class=\"reference external\" href=\"https://westcentralus.dev.cognitive.microsoft.com/docs/services/computer-vision-v3-ga\">Computer Vision API</a> for valid feature names and their explanations:</p>\n<ul class=\"simple\">\n<li>Adult</li>\n<li>Brands</li>\n<li>Categories</li>\n<li>Color</li>\n<li>Description</li>\n<li>Faces</li>\n<li>ImageType</li>\n<li>Objects</li>\n<li>Tags</li>\n</ul>\n</div>\n",
                "shortdoc": "Identify features in the image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 372
            },
            {
                "name": "Vision Describe",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_url: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Describe image with tags and captions</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Describe image with tags and captions",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 413
            },
            {
                "name": "Vision Detect Objects",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_url: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect objects in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Detect objects in the image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 449
            },
            {
                "name": "Vision Ocr",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_url: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Optical Character Recognition (OCR) detects text in an image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">URI to image, if given will be used instead of <cite>image_file</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to write results into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis in json format</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Optical Character Recognition (OCR) detects text in an image",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Azure.py",
                "lineno": 431
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Cloud.Google": {
        "name": "RPA.Cloud.Google",
        "doc": "<div class=\"document\">\n<p><cite>Google</cite> is a library for operating with Google API endpoints.</p>\n<p>Usage requires the following steps:</p>\n<ul class=\"simple\">\n<li>Create a GCP project</li>\n<li>Enable approriate APIs</li>\n<li>Create credentials (OAuth or service account)</li>\n<li>Install rpaframework-google package</li>\n</ul>\n<p><strong>Google authentication</strong></p>\n<p>Authentication for Google is set with <cite>service account JSON file</cite> which can be given to the library\nin three different ways or with <cite>OAuth2 token</cite>, which is used for OAuth authentication.</p>\n<p>Methods when using service account:</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, <tt class=\"docutils literal\">GOOGLE_APPLICATION_CREDENTIALS</tt> with path to service account file.</li>\n<li>Method 2 as keyword parameter to <tt class=\"docutils literal\">Init Storage</tt> for example.</li>\n<li>Method 3 as Robocorp vault secret. The vault name and secret key name needs to be given in library init\nor with keyword <tt class=\"docutils literal\">Set Robocorp Vault</tt>. Secret value should contain JSON file contents.</li>\n</ul>\n<p>Method 1. service account using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for Init Vision, expecting to get JSON\n</span><span class=\"p\">    </span><span class=\"c\"># with GOOGLE_APPLICATION_CREDENTIALS environment variable\n</span><span class=\"p\">    </span><span class=\"nf\">Init Vision</span>\n</pre>\n<p>Method 2. service account with keyword parameter</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Speech To Text</span><span class=\"p\">   </span><span class=\"s\">/path/to/service_account.json</span>\n</pre>\n<p>Method 3. setting Robocorp Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n...       </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n...       </span><span class=\"s\">vault_secret_key=servicecreds</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Storage</span>\n</pre>\n<p>Method 3. setting Robocorp Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocorp Vault</span><span class=\"p\">   </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">  </span><span class=\"s\">vault_secret_key=servicecreds</span><span class=\"p\">\n    </span><span class=\"nf\">Init Storage</span><span class=\"p\">    </span><span class=\"s\">use_robocorp_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Methods when using OAuth token:</p>\n<ul class=\"simple\">\n<li>Method 1 as keyword parameter <tt class=\"docutils literal\">token_file</tt> to <tt class=\"docutils literal\">Init Storage</tt> for example.</li>\n<li>Method 2 as Robocorp vault secret. The vault name and secret key name needs to be given in library init\nor with keyword <tt class=\"docutils literal\">Set Robocorp Vault</tt>. Secret value should contain JSON file contents.</li>\n</ul>\n<p>Method 1. The Google Apps Script and Google Drive services are authenticated using this method.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">SCRIPT_SCOPES</span><span class=\"p\">}     </span><span class=\"s\">forms</span><span class=\"p\">   </span><span class=\"s\">spreadsheets</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google OAuth services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Apps Script</span><span class=\"p\">    </span><span class=\"s\">token_file=oauth_token</span><span class=\"p\">   ${</span><span class=\"nv\">SCRIPT_SCOPES</span><span class=\"p\">}</span>\n</pre>\n<p>Method 2. setting Robocorp Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n...       </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n...       </span><span class=\"s\">vault_secret_key=oauth</span><span class=\"p\">\n...       </span><span class=\"s\">cloud_auth_type=token</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Google services</span><span class=\"p\">\n    </span><span class=\"nf\">Init Storage</span>\n</pre>\n<p><strong>Creating and using OAuth token file</strong></p>\n<p>The token file can be created using <cite>credentials.json</cite> by running command:</p>\n<p><tt class=\"docutils literal\"><span class=\"pre\">rpa-google-oauth</span> <span class=\"pre\">--credentials</span> &lt;filepath&gt; <span class=\"pre\">--service</span> drive</tt> or\n<tt class=\"docutils literal\"><span class=\"pre\">rpa-google-oauth</span> <span class=\"pre\">--credentials</span> &lt;filepath&gt; <span class=\"pre\">--scopes</span> drive.appdata,drive.file,drive.install</tt></p>\n<p>This will start web based authentication process, which outputs the token at the end.\nToken could be stored into <tt class=\"docutils literal\">Robocorp Vault</tt>.</p>\n<p>Example Vault content.</p>\n<pre class=\"code json literal-block\">\n<span class=\"nt\">&quot;googlecloud&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">&quot;oauth-token&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;gANfd123321aabeedYsc&quot;</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Using the Vault.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Set up Google Drive authentication</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocorp Vault</span><span class=\"p\">   </span><span class=\"s\">vault_name=googlecloud</span><span class=\"p\">\n    ...  </span><span class=\"s\">vault_secret_key=oauth-token</span><span class=\"p\">\n    ...  </span><span class=\"s\">cloud_auth_type=token</span><span class=\"p\">\n    </span><span class=\"nf\">Init Drive</span>\n</pre>\n<p><strong>Installation</strong></p>\n<p><tt class=\"docutils literal\">pip install <span class=\"pre\">rpaframework-google</span></tt></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.Google</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">SERVICE_ACCOUNT</span><span class=\"p\">}    ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">service_account.json</span><span class=\"p\">\n${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}            </span><span class=\"s\">testbucket12213123123</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Upload a file into a new storage bucket</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Init Storage</span><span class=\"p\">    ${</span><span class=\"nv\">SERVICE_ACCOUNT</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Bucket</span><span class=\"p\">    ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">Upload File</span><span class=\"p\">      ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}   ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">file.pdf</span><span class=\"p\">  </span><span class=\"s\">myfile.pdf</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}         </span><span class=\"nf\">List Files</span><span class=\"p\">   ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Cloud.Google</span> <span class=\"kn\">import</span> <span class=\"n\">Google</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Google</span>\n<span class=\"n\">service_account</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/service_account.json'</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_vision</span><span class=\"p\">(</span><span class=\"n\">service_account</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">init_text_to_speech</span><span class=\"p\">(</span><span class=\"n\">service_account</span><span class=\"p\">)</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">detect_text</span><span class=\"p\">(</span><span class=\"s1\">'imagefile.png'</span><span class=\"p\">,</span> <span class=\"s1\">'result.json'</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">synthesize_speech</span><span class=\"p\">(</span><span class=\"s1\">'I want this said aloud'</span><span class=\"p\">,</span> <span class=\"n\">target_file</span><span class=\"o\">=</span><span class=\"s1\">'said.mp3'</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:00",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\__init__.py",
        "lineno": 40,
        "tags": [
            "apps script",
            "drive",
            "gmail",
            "init",
            "natural language",
            "sheets",
            "speech to text",
            "storage",
            "text to speech",
            "translation",
            "video intelligence",
            "vision"
        ],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "vault_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vault_name: str | None = None"
                    },
                    {
                        "name": "vault_secret_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vault_secret_key: str | None = None"
                    },
                    {
                        "name": "cloud_auth_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "serviceaccount",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cloud_auth_type: str = serviceaccount"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Library initialization</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to service account</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocorp vault name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_secret_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocorp secret key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param cloud_auth_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">&quot;serviceaccount&quot; or &quot;token&quot;,\ndefaults to &quot;serviceaccount&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Library initialization",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\__init__.py",
                "lineno": 222
            }
        ],
        "keywords": [
            {
                "name": "Analyze Sentiment",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "text_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text_file: str | None = None"
                    },
                    {
                        "name": "file_type",
                        "types": [
                            "TextType"
                        ],
                        "defaultValue": "TEXT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_type: TextType = TEXT"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    },
                    {
                        "name": "lang",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "lang: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Analyze sentiment in a text file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">source text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param text_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source text file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of text, PLAIN_TEXT (default) or HTML</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the source, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response</td>\n</tr>\n</tbody>\n</table>\n<p># For list of supported languages:\n# <a class=\"reference external\" href=\"https://cloud.google.com/natural-language/docs/languages\">https://cloud.google.com/natural-language/docs/languages</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Analyze Sentiment</span><span class=\"p\">  </span><span class=\"c\">${text}</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Analyze Sentiment</span><span class=\"p\">  </span><span class=\"c\">text_file=${CURDIR}${/}test.txt</span>\n</pre>\n</div>\n",
                "shortdoc": "Analyze sentiment in a text file",
                "tags": [
                    "natural language"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\natural_language.py",
                "lineno": 36
            },
            {
                "name": "Annotate Image",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image_file: str"
                    },
                    {
                        "name": "image_uri",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image_uri: str"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Annotate image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Annotate Image</span><span class=\"p\">   </span><span class=\"c\">image_file=${CURDIR}${/}test.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}result.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Annotate image",
                "tags": [
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 123
            },
            {
                "name": "Annotate Video",
                "args": [
                    {
                        "name": "video_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "video_file: str | None = None"
                    },
                    {
                        "name": "video_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "video_uri: str | None = None"
                    },
                    {
                        "name": "features",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "features: str | None = None"
                    },
                    {
                        "name": "output_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_uri: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "300",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 300"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Annotate video</p>\n<p>Possible values for features:</p>\n<ul class=\"simple\">\n<li>FEATURE_UNSPECIFIED, Unspecified.</li>\n<li>LABEL_DETECTION, Label detection. Detect objects, such as dog or flower.</li>\n<li>SHOT_CHANGE_DETECTION, Shot change detection.</li>\n<li>EXPLICIT_CONTENT_DETECTION, Explicit content detection.</li>\n<li>SPEECH_TRANSCRIPTION, Speech transcription.</li>\n<li>TEXT_DETECTION, OCR text detection and tracking.</li>\n<li>OBJECT_TRACKING, Object detection and tracking.</li>\n<li>LOGO_RECOGNITION, Logo detection, tracking, and recognition.</li>\n</ul>\n<p>If <cite>video_uri</cite> is given then that is used even if <cite>video_file</cite> is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param video_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local file path to input video</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param video_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI to input video</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param features:</th><td class=\"field-body\">list of annotation features to detect,\ndefaults to LABEL_DETECTION,SHOT_CHANGE_DETECTION</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI to store response json</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout for operation in seconds</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">annotate result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Annotate Video</span><span class=\"p\">   </span><span class=\"c\">video_uri=gs://videointelligence/movie.mp4</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">features=TEXT_DETECTION,LABEL_DETECTION</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">output_uri=gs://videointelligence/movie_annotations.json</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}videoannotations.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Annotate video",
                "tags": [
                    "video intelligence"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\video_intelligence.py",
                "lineno": 36
            },
            {
                "name": "Classify Text",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text: str | None = None"
                    },
                    {
                        "name": "text_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "text_file: str | None = None"
                    },
                    {
                        "name": "file_type",
                        "types": [
                            "TextType"
                        ],
                        "defaultValue": "TEXT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_type: TextType = TEXT"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    },
                    {
                        "name": "lang",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "lang: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Classify text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">source text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param text_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source text file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of text, PLAIN_TEXT (default) or HTML</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the source, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">classify response</td>\n</tr>\n</tbody>\n</table>\n<p># For list of supported languages:\n# <a class=\"reference external\" href=\"https://cloud.google.com/natural-language/docs/languages\">https://cloud.google.com/natural-language/docs/languages</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Classify Text</span><span class=\"p\">  </span><span class=\"c\">${text}</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Classify Text</span><span class=\"p\">  </span><span class=\"c\">text_file=${CURDIR}${/}test.txt</span>\n</pre>\n</div>\n",
                "shortdoc": "Classify text",
                "tags": [
                    "natural language"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\natural_language.py",
                "lineno": 70
            },
            {
                "name": "Clear Sheet Values",
                "args": [
                    {
                        "name": "sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_id: str"
                    },
                    {
                        "name": "sheet_range",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_range: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Clear cell values for range of cells within a sheet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">operation result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Clear Sheet Values</span><span class=\"p\">  </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">A1:C1</span>\n</pre>\n</div>\n",
                "shortdoc": "Clear cell values for range of cells within a sheet",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 194
            },
            {
                "name": "Copy Sheet",
                "args": [
                    {
                        "name": "sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_id: str"
                    },
                    {
                        "name": "target_sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target_sheet_id: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Copy spreadsheet to target spreadsheet</p>\n<p><em>NOTE:</em> service account user must have access to\ntarget sheet also</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">ID of the sheet to copy</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_sheet_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">operation result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Copy Sheet</span><span class=\"p\">   </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">${NEW_SHEET}</span>\n</pre>\n</div>\n",
                "shortdoc": "Copy spreadsheet to target spreadsheet",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 220
            },
            {
                "name": "Create Drive Directory",
                "args": [
                    {
                        "name": "folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder: str | None = None"
                    },
                    {
                        "name": "parent_folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parent_folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create new directory to Google Drive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name for the new directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">top level directory for new directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created file id</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create new directory to Google Drive",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 496
            },
            {
                "name": "Create Sheet",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create empty sheet with a title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created <cite>sheet_id</cite></td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Create Sheet</span><span class=\"p\">   </span><span class=\"c\">Example Sheet</span>\n</pre>\n</div>\n",
                "shortdoc": "Create empty sheet with a title",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 47
            },
            {
                "name": "Create Storage Bucket",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create Google Cloud Storage bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">bucket</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Create Storage Bucket</span><span class=\"p\">   </span><span class=\"c\">visionfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Create Google Cloud Storage bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 42
            },
            {
                "name": "Delete Drive File",
                "args": [
                    {
                        "name": "file_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_id: str | None = None"
                    },
                    {
                        "name": "file_dict",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_dict: dict | None = None"
                    },
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "multiple_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "multiple_ok: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete file specified by id, file dictionary or query string</p>\n<p>Note. Be extra careful when calling this keyword!</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param file_id:</th><td class=\"field-body\">drive file id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_dict:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file dictionary returned by <cite>Search Drive Files</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">drive query string to find target file, needs to match 1 file\nunless parameter <cite>multiple_ok</cite> is set to <cite>True</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param multiple_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set to <cite>True</cite> if it is ok to perform delete\non more than 1 file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">how many files where deleted</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${folder_id}=</span><span class=\"p\">  </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">   </span><span class=\"c\">datafolder</span><span class=\"p\">\n</span><span class=\"c\">${deleted}=</span><span class=\"p\">    </span><span class=\"c\">Delete Drive File</span><span class=\"p\">  </span><span class=\"c\">query=name contains '.json' and '${folder_id}' in parents</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">            </span><span class=\"c\">multiple_ok=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete file specified by id, file dictionary or query string",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 302
            },
            {
                "name": "Delete Storage Bucket",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete Google Cloud Storage bucket</p>\n<p>Bucket needs to be empty before it can be deleted.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Delete Storage Bucket</span><span class=\"p\">   </span><span class=\"c\">visionfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete Google Cloud Storage bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 60
            },
            {
                "name": "Delete Storage Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    },
                    {
                        "name": "files",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "files: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete files in the bucket</p>\n<p>Files need to be object name in the bucket.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><p class=\"first\">name as string</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\"><p class=\"first\">single file, list of files or comma separated list of files</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><p class=\"first\">list of files which could not be deleted</p>\n<p class=\"last\"><strong>Examples</strong></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Delete Storage Files</span><span class=\"p\">   </span><span class=\"c\">${BUCKET_NAME}</span><span class=\"p\">   </span><span class=\"c\">file1,file2</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete files in the bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 119
            },
            {
                "name": "Detect Document",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_uri: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Detect Document</span><span class=\"p\">   </span><span class=\"c\">image_file=${CURDIR}${/}test.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}result.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Detect document",
                "tags": [
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 98
            },
            {
                "name": "Detect Labels",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_uri: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect labels in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image uri</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Detect Labels</span><span class=\"p\">   </span><span class=\"c\">image_file=${CURDIR}${/}test.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}result.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Detect labels in the image",
                "tags": [
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 48
            },
            {
                "name": "Detect Text",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_uri: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect text in the image</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Detect Text</span><span class=\"p\">   </span><span class=\"c\">image_file=${CURDIR}${/}test.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}result.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Detect text in the image",
                "tags": [
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 73
            },
            {
                "name": "Download Drive Files",
                "args": [
                    {
                        "name": "file_dict",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_dict: dict | None = None"
                    },
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Download files specified by file dictionary or query string</p>\n<p>Parameters <cite>start</cite>, <cite>limit</cite> and <cite>timeout</cite> are used only when\ndownloading files defined by <cite>query</cite> parameter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_dict:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file dictionary returned by <cite>Search Drive Files</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">drive query string to find target files, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source directory where query is executed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">maximum amount of files that are downloaded, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">maximum allowed time in seconds for download process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of downloaded files</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${files}=</span><span class=\"p\">    </span><span class=\"c\">Search Drive Files</span><span class=\"p\">    </span><span class=\"c\">query=name contains '.json'</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${f}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{files}</span><span class=\"p\">\n    </span><span class=\"c\">IF</span><span class=\"p\">  </span><span class=\"c\">${f}[size] &lt; 2000</span><span class=\"p\">\n        </span><span class=\"c\">Download Drive Files</span><span class=\"p\">  </span><span class=\"c\">file_dict=${f}</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n\n</span><span class=\"c\">${folder_id}=</span><span class=\"p\">   </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">   </span><span class=\"c\">datafolder</span><span class=\"p\">\n</span><span class=\"c\">Download Drive Files</span><span class=\"p\">  </span><span class=\"c\">query=name contains '.json' and '${folder_id}' in parents</span><span class=\"p\">  </span><span class=\"c\">recurse=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Download files specified by file dictionary or query string",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 160
            },
            {
                "name": "Download Storage Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    },
                    {
                        "name": "files",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "files: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Download files from a bucket</p>\n<p>Example <cite>files</cite>:\nfiles = {&quot;mytestimg&quot;: &quot;image1.png&quot;, &quot;mydoc&quot;: &quot;google.pdf&quot;}</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of object names or dictionary of\nobject names and target files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files which could not be downloaded</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Download Storage Files</span><span class=\"p\">  </span><span class=\"c\">${BUCKET_NAME}</span><span class=\"p\">   </span><span class=\"c\">test1.txt,test2.txt</span>\n</pre>\n</div>\n",
                "shortdoc": "Download files from a bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 227
            },
            {
                "name": "Export Drive File",
                "args": [
                    {
                        "name": "file_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_id: str | None = None"
                    },
                    {
                        "name": "file_dict",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_dict: dict | None = None"
                    },
                    {
                        "name": "target_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_file: str | None = None"
                    },
                    {
                        "name": "mimetype",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "application/pdf",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "mimetype: str = application/pdf"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Export Google Drive file using Drive export links</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param file_id:</th><td class=\"field-body\">drive file id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_dict:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file dictionary returned by <cite>Search Drive Files</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the exported file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param mimetype:</th><td class=\"field-body\">export mimetype, defaults to &quot;application/pdf&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">file path to the exported file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Drive Search Files</span><span class=\"p\">  </span><span class=\"c\">query=name contains 'my example worksheet'</span><span class=\"p\">\n</span><span class=\"c\">Export Drive File</span><span class=\"p\">  </span><span class=\"c\">file_dict=${files}[0]</span>\n</pre>\n</div>\n",
                "shortdoc": "Export Google Drive file using Drive export links",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 529
            },
            {
                "name": "Face Detection",
                "args": [
                    {
                        "name": "image_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_file: str | None = None"
                    },
                    {
                        "name": "image_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image_uri: str | None = None"
                    },
                    {
                        "name": "json_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Detect faces</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source image file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">json target to save result</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">detection response</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Face Detection</span><span class=\"p\">   </span><span class=\"c\">image_uri=gs://vision/faces.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">json_file=${CURDIR}${/}result.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Detect faces",
                "tags": [
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 148
            },
            {
                "name": "Get Drive Folder Id",
                "args": [
                    {
                        "name": "folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get file id for the folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">name of the folder to identify, by default returns drive's\n<cite>root</cite> folder id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">file id of the folder</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${root_id}=</span><span class=\"p\">    </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">   </span><span class=\"c\"># returns Drive root folder id\n${folder_id}=</span><span class=\"p\">  </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">  </span><span class=\"c\">subdir</span>\n</pre>\n</div>\n",
                "shortdoc": "Get file id for the folder",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 338
            },
            {
                "name": "Get Sheet Values",
                "args": [
                    {
                        "name": "sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_id: str"
                    },
                    {
                        "name": "sheet_range",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_range: str"
                    },
                    {
                        "name": "value_render_option",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "UNFORMATTED_VALUE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "value_render_option: str = UNFORMATTED_VALUE"
                    },
                    {
                        "name": "datetime_render_option",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "FORMATTED_STRING",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "datetime_render_option: str = FORMATTED_STRING"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get values from the range in the sheet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param value_render_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">how values should be represented\nin the output defaults to &quot;UNFORMATTED_VALUE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_render_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">how dates, times, and durations should be\nrepresented in the output, defaults to &quot;FORMATTED_STRING&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">operation result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${values}=</span><span class=\"p\">  </span><span class=\"c\">Get Sheet Values</span><span class=\"p\">  </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">A1:C1</span>\n</pre>\n</div>\n",
                "shortdoc": "Get values from the range in the sheet",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 156
            },
            {
                "name": "Get Storage Bucket",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get Google Cloud Storage bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">bucket</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Get Bucket</span><span class=\"p\">   </span><span class=\"c\">visionfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Get Google Cloud Storage bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 82
            },
            {
                "name": "Init Apps Script",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "credentials",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "credentials: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "scopes",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "scopes: list | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Apps Script client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param credentials:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to credentials file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scopes:</th><td class=\"field-body\">list of extra authentication scopes</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Apps Script client",
                "tags": [
                    "apps script",
                    "init"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\apps_script.py",
                "lineno": 22
            },
            {
                "name": "Init Drive",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "credentials",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "credentials: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "scopes",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "scopes: list | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Drive client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param credentials:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to credentials file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scopes:</th><td class=\"field-body\">list of extra authentication scopes</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Drive client",
                "tags": [
                    "drive",
                    "init"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 31
            },
            {
                "name": "Init Gmail",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "credentials",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "credentials: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "scopes",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "scopes: list | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Gmail client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param credentials:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to credentials file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scopes:</th><td class=\"field-body\">list of extra authentication scopes</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Gmail client",
                "tags": [
                    "gmail",
                    "init"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\gmail.py",
                "lineno": 52
            },
            {
                "name": "Init Natural Language",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Natural Language client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Natural Language client",
                "tags": [
                    "init",
                    "natural language"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\natural_language.py",
                "lineno": 16
            },
            {
                "name": "Init Sheets",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "credentials",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "credentials: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "scopes",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "scopes: list | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Sheets client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param credentials:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to credentials file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scopes:</th><td class=\"field-body\">list of extra authentication scopes</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Sheets client",
                "tags": [
                    "init",
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 17
            },
            {
                "name": "Init Speech To Text",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Speech to Text client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Speech to Text client",
                "tags": [
                    "init",
                    "speech to text"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\speech_to_text.py",
                "lineno": 46
            },
            {
                "name": "Init Storage",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Storage client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Storage client",
                "tags": [
                    "init",
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 25
            },
            {
                "name": "Init Text To Speech",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Text to Speech client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Text to Speech client",
                "tags": [
                    "init",
                    "text to speech"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\text_to_speech.py",
                "lineno": 29
            },
            {
                "name": "Init Translation",
                "args": [
                    {
                        "name": "project_identifier",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "project_identifier: str"
                    },
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Translation client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param project_identifier:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">identifier for Translation project</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Translation client",
                "tags": [
                    "init",
                    "translation"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\translation.py",
                "lineno": 22
            },
            {
                "name": "Init Video Intelligence",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Video Intelligence client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Video Intelligence client",
                "tags": [
                    "init",
                    "video intelligence"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\video_intelligence.py",
                "lineno": 16
            },
            {
                "name": "Init Vision",
                "args": [
                    {
                        "name": "service_account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "service_account: str | None = None"
                    },
                    {
                        "name": "use_robocorp_vault",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_robocorp_vault: bool | None = None"
                    },
                    {
                        "name": "token_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_file: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize Google Cloud Vision client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param service_account:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to service account file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use credentials in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file path to token file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Initialize Google Cloud Vision client",
                "tags": [
                    "init",
                    "vision"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\vision.py",
                "lineno": 18
            },
            {
                "name": "Insert Sheet Values",
                "args": [
                    {
                        "name": "sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_id: str"
                    },
                    {
                        "name": "sheet_range",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_range: str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "list"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "values: list"
                    },
                    {
                        "name": "major_dimension",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "COLUMNS",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "major_dimension: str = COLUMNS"
                    },
                    {
                        "name": "value_input_option",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "USER_ENTERED",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "value_input_option: str = USER_ENTERED"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Insert values into sheet cells</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">list of values to insert into sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param major_dimension:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">major dimension of the values, default <cite>COLUMNS</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param value_input_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">controls whether input strings are parsed or not,\ndefault <cite>USER_ENTERED</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">operation result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${values}</span><span class=\"p\">   </span><span class=\"c\">Evaluate</span><span class=\"p\">   </span><span class=\"c\">[[11, 12, 13], ['aa', 'bb', 'cc']]</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Insert Sheet Values</span><span class=\"p\">   </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">A:B</span><span class=\"p\">  </span><span class=\"c\">${values}</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Insert Sheet Values</span><span class=\"p\">   </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">A:B</span><span class=\"p\">  </span><span class=\"c\">${values}</span><span class=\"p\">  </span><span class=\"c\">ROWS</span>\n</pre>\n</div>\n",
                "shortdoc": "Insert values into sheet cells",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 73
            },
            {
                "name": "List Messages",
                "args": [
                    {
                        "name": "user_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "user_id: str"
                    },
                    {
                        "name": "query",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "query: str"
                    },
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "label_ids",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label_ids: list | None = None"
                    },
                    {
                        "name": "max_results",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_results: int | None = None"
                    },
                    {
                        "name": "include_json",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_json: bool = False"
                    },
                    {
                        "name": "include_spam",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_spam: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List messages</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param user_id:</th><td class=\"field-body\">user's email address. The special value me can\nbe used to indicate the authenticated user.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">message query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path where attachments are saved, default current\ndirectory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param label_ids:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message label ids</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">maximum number of message to return</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_json:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include original response json</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_spam:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include messages from SPAM and TRASH</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">messages</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${messages}=</span><span class=\"p\">    </span><span class=\"c\">List Messages</span><span class=\"p\">    </span><span class=\"c\">me</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">from:mika&#64;robocorp.com</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">folder_name=${CURDIR}${/}target</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">include_json=True</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${msg}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{messages}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${msg}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "List messages",
                "tags": [
                    "gmail"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\gmail.py",
                "lineno": 256
            },
            {
                "name": "List Storage Buckets",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List Google Cloud Storage buckets</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of buckets</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${buckets}=</span><span class=\"p\">   </span><span class=\"c\">List Storage Buckets</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${bucket}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">   </span><span class=\"c\">&#64;{buckets}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${bucket}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "List Google Cloud Storage buckets",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 100
            },
            {
                "name": "List Storage Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List files in the bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of object names in the bucket</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${files}=</span><span class=\"p\">   </span><span class=\"c\">List Storage Files</span><span class=\"p\">  </span><span class=\"c\">${BUCKET_NAME}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${bucket}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">   </span><span class=\"c\">&#64;{files}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${file}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "List files in the bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 150
            },
            {
                "name": "List Supported Voices",
                "args": [
                    {
                        "name": "language_code",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language_code: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List supported voices for the speech</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param language_code:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">voice languages to list, defaults to None (all)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of supported voices</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">List Supported Voices</span><span class=\"p\">   </span><span class=\"c\">en-US</span>\n</pre>\n</div>\n",
                "shortdoc": "List supported voices for the speech",
                "tags": [
                    "text to speech"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\text_to_speech.py",
                "lineno": 49
            },
            {
                "name": "Move Drive File",
                "args": [
                    {
                        "name": "file_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_id: str | None = None"
                    },
                    {
                        "name": "file_dict",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_dict: dict | None = None"
                    },
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    },
                    {
                        "name": "target",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target: str | None = None"
                    },
                    {
                        "name": "multiple_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "multiple_ok: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move file specified by id, file dictionary or query string into target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param file_id:</th><td class=\"field-body\">drive file id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_dict:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file dictionary returned by <cite>Search Drive Files</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">drive query string to find target file, needs to match 1 file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">name of the folder to move file from, is by default drive's\n<cite>root</cite> folder id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">name of the folder to move file into, is by default drive's\n<cite>root</cite> folder id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param multiple_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if <cite>True</cite> then moving more than 1 file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of file ids</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${source_id}=</span><span class=\"p\">  </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">  </span><span class=\"c\">sourcefolder</span><span class=\"p\">\n</span><span class=\"c\">${query}=</span><span class=\"p\">      </span><span class=\"c\">Set Variable</span><span class=\"p\">  </span><span class=\"c\">name contains '.json' and '${sourceid}' in parents</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">      </span><span class=\"c\">Move Drive File</span><span class=\"p\">  </span><span class=\"c\">query=${query}</span><span class=\"p\">  </span><span class=\"c\">folder=target_folder</span><span class=\"p\">  </span><span class=\"c\">multiple_ok=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Move file specified by id, file dictionary or query string into target folder",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 369
            },
            {
                "name": "Recognize Text From Audio",
                "args": [
                    {
                        "name": "audio_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "audio_file: str | None = None"
                    },
                    {
                        "name": "audio_uri",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "audio_uri: str | None = None"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str | None = None"
                    },
                    {
                        "name": "language_code",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "en_US",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language_code: str = en_US"
                    },
                    {
                        "name": "audio_channel_count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "2",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "audio_channel_count: int = 2"
                    },
                    {
                        "name": "sample_rate",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sample_rate: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Recognize text in the audio file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param audio_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local audio file path</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param audio_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Cloud Storage URI</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">audio file encoding</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param language_code:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">language in the audio</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param audio_channel_count:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of audio channel</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sample_rate:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">rate in hertz, for example 16000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">recognized texts</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Recognize Text From Audio</span><span class=\"p\">   </span><span class=\"c\">audio_file=${CURDIR}${/}test.mp3</span>\n</pre>\n</div>\n",
                "shortdoc": "Recognize text in the audio file",
                "tags": [
                    "speech to text"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\speech_to_text.py",
                "lineno": 63
            },
            {
                "name": "Run Script",
                "args": [
                    {
                        "name": "script_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "script_id: str"
                    },
                    {
                        "name": "function_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "function_name: str"
                    },
                    {
                        "name": "parameters",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parameters: dict | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Run the Google Apps Script function</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param script_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Google Script identifier</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param function_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the script function</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parameters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">script function parameters as a dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises AssertionError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">thrown when Google Script returns errors</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{params}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">formid=aaad4232</span><span class=\"p\">  </span><span class=\"c\">formvalues=1,2,3</span><span class=\"p\">\n</span><span class=\"c\">${response}=</span><span class=\"p\">  </span><span class=\"c\">Run Script</span><span class=\"p\">    </span><span class=\"c\">abc21397283712da</span><span class=\"p\">  </span><span class=\"c\">submit_form</span><span class=\"p\">   </span><span class=\"c\">${params}</span><span class=\"p\">\n</span><span class=\"c\">Log Many</span><span class=\"p\">   </span><span class=\"c\">${response}</span>\n</pre>\n</div>\n",
                "shortdoc": "Run the Google Apps Script function",
                "tags": [
                    "apps script"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\apps_script.py",
                "lineno": 52
            },
            {
                "name": "Search Drive Files",
                "args": [
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "recurse",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recurse: bool = False"
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Search Google Drive for files matching query string</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">search string, defaults to None which means that all files\nand folders are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param recurse:</th><td class=\"field-body\">set to <cite>True</cite> if search should recursive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source directory where query is executed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Search Drive Files</span><span class=\"p\">   </span><span class=\"c\">query=name contains 'hello'</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Search Drive Files</span><span class=\"p\">   </span><span class=\"c\">query=modifiedTime &gt; '2020-06-04T12:00:00'</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Search Drive Files</span><span class=\"p\">   </span><span class=\"c\">query=mimeType contains 'image/' or mimeType contains 'video/'</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Search Drive Files</span><span class=\"p\">   </span><span class=\"c\">query=name contains '.yaml'</span><span class=\"p\">  </span><span class=\"c\">recurse=True</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">  </span><span class=\"c\">Search Drive Files</span><span class=\"p\">   </span><span class=\"c\">query=name contains '.yaml'</span><span class=\"p\">  </span><span class=\"c\">source=datadirectory</span>\n</pre>\n</div>\n",
                "shortdoc": "Search Google Drive for files matching query string",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 429
            },
            {
                "name": "Send Message",
                "args": [
                    {
                        "name": "sender",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sender: str"
                    },
                    {
                        "name": "to",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "to: str"
                    },
                    {
                        "name": "subject",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "subject: str"
                    },
                    {
                        "name": "message_text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "message_text: str"
                    },
                    {
                        "name": "attachments",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "attachments: list | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send an email message.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sender:</th><td class=\"field-body\">message sender</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param to:</th><td class=\"field-body\">message recipient</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">message subject</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param message_text:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message body text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachment:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of files to add as message attachments</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">sent message</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${attachments}=</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}random.txt</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}source.png</span><span class=\"p\">\n</span><span class=\"c\">Send Message</span><span class=\"p\">    </span><span class=\"c\">me</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">mika&#64;robocorp.com</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">message subject</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">body of the message</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${attachments}</span>\n</pre>\n</div>\n",
                "shortdoc": "Send an email message.",
                "tags": [
                    "gmail"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\gmail.py",
                "lineno": 129
            },
            {
                "name": "Set Robocorp Vault",
                "args": [
                    {
                        "name": "vault_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vault_name: str | None = None"
                    },
                    {
                        "name": "vault_secret_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "vault_secret_key: str | None = None"
                    },
                    {
                        "name": "auth_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "serviceaccount",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "auth_type: str = serviceaccount"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Robocorp Vault name and secret key name\n:param vault_name: Robocorp Vault name\n:param vault_secret_key: Robocorp Vault secret key name</p>\n</div>\n",
                "shortdoc": "Set Robocorp Vault name and secret key name :param vault_name: Robocorp Vault name :param vault_secret_key: Robocorp Vault secret key name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\base.py",
                "lineno": 11
            },
            {
                "name": "Synthesize Speech",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "language",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "en-US",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "language: str = en-US"
                    },
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "en-US-Standard-B",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name: str = en-US-Standard-B"
                    },
                    {
                        "name": "gender",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "MALE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "gender: str = MALE"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "MP3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str = MP3"
                    },
                    {
                        "name": "target_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "synthesized.mp3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_file: str = synthesized.mp3"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Synthesize speech synchronously</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">input text to synthesize</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param language:</th><td class=\"field-body\">voice language, defaults to &quot;en-US&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">voice name, defaults to &quot;en-US-Standard-B&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param gender:</th><td class=\"field-body\">voice gender, defaults to &quot;MALE&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">result encoding type, defaults to &quot;MP3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save synthesized output to file,\ndefaults to &quot;synthesized.mp3&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">synthesized output in bytes</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Synthesize Speech</span><span class=\"p\">   </span><span class=\"c\">${text}</span>\n</pre>\n</div>\n",
                "shortdoc": "Synthesize speech synchronously",
                "tags": [
                    "text to speech"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\text_to_speech.py",
                "lineno": 70
            },
            {
                "name": "Translate",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "list",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: list | str"
                    },
                    {
                        "name": "source_language",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_language: str | None = None"
                    },
                    {
                        "name": "target_language",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_language: str | None = None"
                    },
                    {
                        "name": "mime_type",
                        "types": [
                            "TextType",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "mime_type: TextType | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Translate text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text to translate</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_language:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">language code</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_language:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">language code</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param mime_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">text or html</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">translated text</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Translate</span><span class=\"p\">   </span><span class=\"c\">${TEXT}</span><span class=\"p\">  </span><span class=\"c\">target_language=de</span>\n</pre>\n</div>\n",
                "shortdoc": "Translate text",
                "tags": [
                    "translation"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\translation.py",
                "lineno": 45
            },
            {
                "name": "Update Drive File",
                "args": [
                    {
                        "name": "file_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_id: str | None = None"
                    },
                    {
                        "name": "file_dict",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_dict: dict | None = None"
                    },
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    },
                    {
                        "name": "action",
                        "types": [
                            "UpdateAction"
                        ],
                        "defaultValue": "star",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: UpdateAction = star"
                    },
                    {
                        "name": "multiple_ok",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "multiple_ok: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Update file specified by id, file dictionary or query string</p>\n<p>Possible actions:\n- star\n- unstar\n- trash\n- untrash</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param file_id:</th><td class=\"field-body\">drive file id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_dict:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">file dictionary returned by <cite>Drive Search Files</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">drive query string to find target file, needs to match 1 file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source directory where query is executed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">update action, default star file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param multiple_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set to <cite>True</cite> if it is ok to perform update\non more than 1 file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of updated files</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${folder_id}=</span><span class=\"p\">  </span><span class=\"c\">Get Drive Folder Id</span><span class=\"p\">   </span><span class=\"c\">datafolder</span><span class=\"p\">\n</span><span class=\"c\">${updated}=</span><span class=\"p\">    </span><span class=\"c\">Update Drive File</span><span class=\"p\">  </span><span class=\"c\">query=name contains '.json' and '${folder_id}' in parents</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">            </span><span class=\"c\">action=star</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">            </span><span class=\"c\">multiple_ok=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Update file specified by id, file dictionary or query string",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 223
            },
            {
                "name": "Update Sheet Values",
                "args": [
                    {
                        "name": "sheet_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_id: str"
                    },
                    {
                        "name": "sheet_range",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheet_range: str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "list"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "values: list"
                    },
                    {
                        "name": "major_dimension",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "COLUMNS",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "major_dimension: str = COLUMNS"
                    },
                    {
                        "name": "value_input_option",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "USER_ENTERED",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "value_input_option: str = USER_ENTERED"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Insert values into sheet cells</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">target sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target sheet range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">list of values to insert into sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param major_dimension:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">major dimension of the values, default <cite>COLUMNS</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param value_input_option:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">controls whether input strings are parsed or not,\ndefault <cite>USER_ENTERED</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">operation result</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${row}</span><span class=\"p\">  </span><span class=\"c\">Evaluate</span><span class=\"p\">   </span><span class=\"c\">[[22, 33 ,44]]</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Update Sheet Values</span><span class=\"p\">  </span><span class=\"c\">${SHEET_ID}</span><span class=\"p\">  </span><span class=\"c\">A6:C6</span><span class=\"p\">  </span><span class=\"c\">${row}</span><span class=\"p\">   </span><span class=\"c\">ROWS</span>\n</pre>\n</div>\n",
                "shortdoc": "Insert values into sheet cells",
                "tags": [
                    "sheets"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\sheets.py",
                "lineno": 115
            },
            {
                "name": "Upload Drive File",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str | None = None"
                    },
                    {
                        "name": "folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder: str | None = None"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = False"
                    },
                    {
                        "name": "make_dir",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "make_dir: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload files into Drive</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file to upload</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param folder:</th><td class=\"field-body\">target folder for upload</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set to <cite>True</cite> if already existing file should be overwritten</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param make_dir:</th><td class=\"field-body\">set to <cite>True</cite> if folder should be created if it does not exist</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">uploaded file id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${file1_id}=</span><span class=\"p\">  </span><span class=\"c\">Upload Drive File</span><span class=\"p\">  </span><span class=\"c\">data.json</span><span class=\"p\">  </span><span class=\"c\"># Upload file to drive root\n${file2_id}=</span><span class=\"p\">  </span><span class=\"c\">Upload Drive File</span><span class=\"p\">  </span><span class=\"c\">newdata.json</span><span class=\"p\">  </span><span class=\"c\">new_folder</span><span class=\"p\">  </span><span class=\"c\">make_dir=True</span><span class=\"p\">\n</span><span class=\"c\">${file3_id}=</span><span class=\"p\">  </span><span class=\"c\">Upload Drive File</span><span class=\"p\">  </span><span class=\"c\">data.json</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Upload files into Drive",
                "tags": [
                    "drive"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\drive.py",
                "lineno": 67
            },
            {
                "name": "Upload Storage File",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "target_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload a file into a bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to upload file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">target object name</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Upload Storage File</span><span class=\"p\">  </span><span class=\"c\">${BUCKET_NAME}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}test.txt</span><span class=\"p\">    </span><span class=\"c\">test.txt</span>\n</pre>\n</div>\n",
                "shortdoc": "Upload a file into a bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 175
            },
            {
                "name": "Upload Storage Files",
                "args": [
                    {
                        "name": "bucket_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bucket_name: str"
                    },
                    {
                        "name": "files",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "files: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload files into a bucket</p>\n<p>Example <cite>files</cite>:\nfiles = {&quot;mytestimg&quot;: &quot;image1.png&quot;, &quot;mydoc&quot;: &quot;google.pdf&quot;}</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">dictionary of object names and filepaths</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${files}=</span><span class=\"p\">   </span><span class=\"c\">Create Dictionary</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">test1.txt</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}test1.txt</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">test2.txt</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}test2.txt</span><span class=\"p\">\n</span><span class=\"c\">Upload Storage Files</span><span class=\"p\">   </span><span class=\"c\">${BUCKET_NAME}</span><span class=\"p\">   </span><span class=\"c\">${files}</span>\n</pre>\n</div>\n",
                "shortdoc": "Upload files into a bucket",
                "tags": [
                    "storage"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Cloud\\Google\\keywords\\storage.py",
                "lineno": 199
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "TextType",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Possible text types.</p>\n</div>\n",
                    "members": [
                        {
                            "name": "TEXT",
                            "value": "Type.PLAIN_TEXT"
                        },
                        {
                            "name": "HTML",
                            "value": "Type.HTML"
                        }
                    ]
                },
                {
                    "name": "UpdateAction",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Possible file update actions.</p>\n</div>\n",
                    "members": [
                        {
                            "name": "trash",
                            "value": "1"
                        },
                        {
                            "name": "untrash",
                            "value": "2"
                        },
                        {
                            "name": "star",
                            "value": "3"
                        },
                        {
                            "name": "unstar",
                            "value": "4"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Crypto": {
        "name": "RPA.Crypto",
        "doc": "<div class=\"document\">\n<p>Library for common encryption and hashing operations.</p>\n<p>It uses the <a class=\"reference external\" href=\"https://github.com/fernet/spec/blob/master/Spec.md\">Fernet</a>\nformat for encryption. More specifically, it uses AES in\nCBC mode with a 128-bit key for encryption and HMAC with SHA256 for\nauthentication.</p>\n<p>To use the encryption features, generate a key with the command line\nutility <tt class=\"docutils literal\"><span class=\"pre\">rpa-crypto</span></tt> or with the keyword <tt class=\"docutils literal\">Generate Key</tt>. Store\nthe key in a secure place, such as Robocorp Vault, and load it within\nthe execution before calling encryption/decryption keywords.</p>\n<p><strong>Example usage with Robocorp Vault</strong></p>\n<p>Create an encryption key with the CLI utility:</p>\n<pre class=\"code console literal-block\">\n<span class=\"go\">&gt; rpa-crypto key\nrGx1edA07yz7uD08ChiPSunn8vaauRxw0pAbsal9zjM=</span>\n</pre>\n<p>Store the key in Robocorp Vault, in this case with the name <tt class=\"docutils literal\">EncryptionKey</tt>.</p>\n<p>Load the key from the vault before encryption operations:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">EncryptionKey</span><span class=\"p\">\n</span><span class=\"c\">${encrypted}=</span><span class=\"p\">   </span><span class=\"c\">Encrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Add work item file</span><span class=\"p\">    </span><span class=\"c\">${encrypted}</span><span class=\"p\">    </span><span class=\"c\">name=Orders</span>\n</pre>\n<p>In another task, this same key can be used to decrypt the file:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">EncryptionKey</span><span class=\"p\">\n</span><span class=\"c\">${encrypted}=</span><span class=\"p\">    </span><span class=\"c\">Get work item file</span><span class=\"p\">    </span><span class=\"c\">Orders</span><span class=\"p\">\n</span><span class=\"c\">${orders}=</span><span class=\"p\">   </span><span class=\"c\">Decrypt file</span><span class=\"p\">    </span><span class=\"c\">${encrypted}</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:00",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
        "lineno": 43,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Decrypt File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "output",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Decrypt a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to encrypted input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param output:</th><td class=\"field-body\">Path to decrypted output file</td>\n</tr>\n</tbody>\n</table>\n<p>If not output path is given, it will generate one from the input path.\nThe resulting output path is returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Decrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx.enc</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Path to decrypted file is: ${path}</span>\n</pre>\n</div>\n",
                "shortdoc": "Decrypt a file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 296
            },
            {
                "name": "Decrypt String",
                "args": [
                    {
                        "name": "data",
                        "types": [
                            "bytes",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "data: bytes | str"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Decrypt a string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">Encrypted data as base64 string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Original encoding of string</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the decrypted string that is parsed with the given encoding,\nor if the encoding is <tt class=\"docutils literal\">None</tt> the raw bytes are returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${text}=</span><span class=\"p\">    </span><span class=\"c\">Decrypt string</span><span class=\"p\">    </span><span class=\"c\">${token}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Secret string is: ${text}</span>\n</pre>\n</div>\n",
                "shortdoc": "Decrypt a string.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 225
            },
            {
                "name": "Encrypt File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "output",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Encrypt a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to source input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param output:</th><td class=\"field-body\">Path to encrypted output file</td>\n</tr>\n</tbody>\n</table>\n<p>If not output path is given, it will generate one from the input path.\nThe resulting output path is returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Encrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Path to encrypted file is: ${path}</span>\n</pre>\n</div>\n",
                "shortdoc": "Encrypt a file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 262
            },
            {
                "name": "Encrypt String",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "bytes",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: bytes | str"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Encrypt a string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Source text to encrypt</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Used text encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${token}=</span><span class=\"p\">    </span><span class=\"c\">Encrypt string</span><span class=\"p\">    </span><span class=\"c\">This is a secret, don't share it</span>\n</pre>\n</div>\n",
                "shortdoc": "Encrypt a string.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 203
            },
            {
                "name": "Generate Key",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Generate a Fernet encryption key as base64 string.</p>\n<p>This key can be used for encryption/decryption operations\nwith this library.</p>\n<p><em>NOTE:</em> Store the generated key in a secure place!\nIf the key is lost, the encrypted data can not be recovered.\nIf anyone else gains access to it, they can decrypt your data.</p>\n</div>\n",
                "shortdoc": "Generate a Fernet encryption key as base64 string.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 95
            },
            {
                "name": "Hash File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "method",
                        "types": [
                            "Hash"
                        ],
                        "defaultValue": "SHA1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "method: Hash = SHA1"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Calculate a hash from a file, in base64 format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">The used hashing method</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${digest}=</span><span class=\"p\">    </span><span class=\"c\">Hash file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">method=MD5</span><span class=\"p\">\n</span><span class=\"c\">Should not be equal</span><span class=\"p\">    </span><span class=\"c\">${digest}</span><span class=\"p\">    </span><span class=\"c\">uSlyRHlbu8NzY29YMZhDUpdErP4=</span>\n</pre>\n</div>\n",
                "shortdoc": "Calculate a hash from a file, in base64 format.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 179
            },
            {
                "name": "Hash String",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "method",
                        "types": [
                            "Hash"
                        ],
                        "defaultValue": "SHA1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "method: Hash = SHA1"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Calculate a hash from a string, in base64 format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">String to hash</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">Used hashing method</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Used text encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${digest}=</span><span class=\"p\">    </span><span class=\"c\">Hash string</span><span class=\"p\">    </span><span class=\"c\">A value that will be hashed</span><span class=\"p\">\n</span><span class=\"c\">Should be equal</span><span class=\"p\">    </span><span class=\"c\">${digest}</span><span class=\"p\">    </span><span class=\"c\">uSlyRHlbu8NzY29YMZhDUpdErP4=</span>\n</pre>\n</div>\n",
                "shortdoc": "Calculate a hash from a string, in base64 format.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 156
            },
            {
                "name": "Use Encryption Key",
                "args": [
                    {
                        "name": "key",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "key: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set key for all following encryption/decryption operations.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Encryption key as base64 string</td>\n</tr>\n</tbody>\n</table>\n<p>Assumes the given key has been generated previously using\neither the keyword <tt class=\"docutils literal\">Generate Key</tt> or with the matching command\nline utility.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${key}=</span><span class=\"p\">    </span><span class=\"c\">Read file</span><span class=\"p\">    </span><span class=\"c\">encryption.key</span><span class=\"p\">\n</span><span class=\"c\">Use encryption key</span><span class=\"p\">      </span><span class=\"c\">${key}</span>\n</pre>\n</div>\n",
                "shortdoc": "Set key for all following encryption/decryption operations.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 107
            },
            {
                "name": "Use Encryption Key From Vault",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "key: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Load an encryption key from Robocorp Vault.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of secret in Vault</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of encryption key in secret</td>\n</tr>\n</tbody>\n</table>\n<p>If the secret only has one value, the key argument is optional.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Secret with one value\nUse encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">Encryption</span><span class=\"p\">\n</span><span class=\"c\"># Secret with multiple values\nUse encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">name=Encryption</span><span class=\"p\">    </span><span class=\"c\">key=CryptoKey</span>\n</pre>\n</div>\n",
                "shortdoc": "Load an encryption key from Robocorp Vault.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Crypto.py",
                "lineno": 125
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "Hash",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Supported hashing algorithms.</p>\n</div>\n",
                    "members": [
                        {
                            "name": "MD5",
                            "value": "1"
                        },
                        {
                            "name": "SHA1",
                            "value": "2"
                        },
                        {
                            "name": "SHA224",
                            "value": "3"
                        },
                        {
                            "name": "SHA256",
                            "value": "4"
                        },
                        {
                            "name": "SHA384",
                            "value": "5"
                        },
                        {
                            "name": "SHA3_224",
                            "value": "6"
                        },
                        {
                            "name": "SHA3_256",
                            "value": "7"
                        },
                        {
                            "name": "SHA3_384",
                            "value": "8"
                        },
                        {
                            "name": "SHA3_512",
                            "value": "9"
                        },
                        {
                            "name": "SHA512",
                            "value": "10"
                        },
                        {
                            "name": "SHA512_224",
                            "value": "11"
                        },
                        {
                            "name": "SHA512_256",
                            "value": "12"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Database": {
        "name": "RPA.Database",
        "doc": "<div class=\"document\">\n<p><cite>Database</cite> is a library for handling different database operations.</p>\n<p>All database operations are supported. Keywords <cite>Query</cite> and <cite>Get Rows</cite>\nreturn values by default in <cite>RPA.Table</cite> format.</p>\n<p>Library is compatible with any Database API Specification 2.0 module.</p>\n<p>References:</p>\n<ul class=\"simple\">\n<li>Database API Specification 2.0 - <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0249/\">http://www.python.org/dev/peps/pep-0249/</a></li>\n<li>Lists of DB API 2.0 - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseInterfaces\">http://wiki.python.org/moin/DatabaseInterfaces</a></li>\n<li>Python Database Programming - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseProgramming/\">http://wiki.python.org/moin/DatabaseProgramming/</a></li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get Orders From Database</span><span class=\"p\">\n    </span><span class=\"nf\">Connect To Database</span><span class=\"p\">  </span><span class=\"s\">pymysql</span><span class=\"p\">  </span><span class=\"s\">tester</span><span class=\"p\">  </span><span class=\"s\">user</span><span class=\"p\">  </span><span class=\"s\">password</span><span class=\"p\">  </span><span class=\"s\">127.0.0.1</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}            </span><span class=\"nf\">Query</span><span class=\"p\">    </span><span class=\"s\">Select * FROM incoming_orders</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">order</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}\n        </span><span class=\"nf\">Handle Order</span><span class=\"p\">  ${</span><span class=\"nv\">order</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">FileSecrets</span>\n\n<span class=\"n\">filesecrets</span> <span class=\"o\">=</span> <span class=\"n\">FileSecrets</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets.json&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">filesecrets</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;databasesecrets&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">()</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect_to_database</span><span class=\"p\">(</span><span class=\"s1\">'pymysql'</span><span class=\"p\">,</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;DATABASE&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;USERNAME&quot;</span><span class=\"p\">],</span>\n                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">],</span>\n                    <span class=\"s1\">'127.0.0.1'</span>\n                    <span class=\"p\">)</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM incoming_orders&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">orders</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:00",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
        "lineno": 111,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Call Stored Procedure",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "sanstran",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sanstran=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Call stored procedure with name and params.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">procedure name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param params:</th><td class=\"field-body\">parameters for the procedure as a list, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{params}</span><span class=\"p\">     </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">FirstParam</span><span class=\"p\">   </span><span class=\"c\">SecondParam</span><span class=\"p\">   </span><span class=\"c\">ThirdParam</span><span class=\"p\">\n</span><span class=\"c\">&#64;{results}</span><span class=\"p\">    </span><span class=\"c\">Call Stored Procedure</span><span class=\"p\">   </span><span class=\"c\">mystpr</span><span class=\"p\">  </span><span class=\"c\">${params}</span>\n</pre>\n</div>\n",
                "shortdoc": "Call stored procedure with name and params.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 343
            },
            {
                "name": "Connect To Database",
                "args": [
                    {
                        "name": "module_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "module_name: str | None = None"
                    },
                    {
                        "name": "database",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "database: str | None = None"
                    },
                    {
                        "name": "username",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "username: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "host",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "host: str | None = None"
                    },
                    {
                        "name": "port",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "port: int | None = None"
                    },
                    {
                        "name": "charset",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "charset: str | None = None"
                    },
                    {
                        "name": "config_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "db.cfg",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "config_file: str = db.cfg"
                    },
                    {
                        "name": "autocommit",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autocommit: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to database using DB API 2.0 module.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param module_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">database module to use</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">name of the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param host:</th><td class=\"field-body\">SQL server address</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param port:</th><td class=\"field-body\">SQL server port</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param charset:</th><td class=\"field-body\">for example, &quot;utf-8&quot;, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param config_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location of configuration file, defaults to &quot;db.cfg&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autocommit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set autocommit value for connect (only with pymssql atm)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">database</span><span class=\"p\">  </span><span class=\"c\">username</span><span class=\"p\">  </span><span class=\"c\">password</span><span class=\"p\">  </span><span class=\"c\">host</span><span class=\"p\">  </span><span class=\"c\">port</span><span class=\"p\">\n</span><span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}resources${/}dbconfig.cfg</span>\n</pre>\n</div>\n",
                "shortdoc": "Connect to database using DB API 2.0 module.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 176
            },
            {
                "name": "Description",
                "args": [
                    {
                        "name": "table",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get description of the SQL table</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${db_description}</span><span class=\"p\">      </span><span class=\"c\">Description</span><span class=\"p\">  </span><span class=\"c\">mytable</span>\n</pre>\n</div>\n",
                "shortdoc": "Get description of the SQL table",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 382
            },
            {
                "name": "Disconnect From Database",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close connection to SQL database</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${result}</span><span class=\"p\">              </span><span class=\"c\">Query</span><span class=\"p\">   </span><span class=\"c\">Select firstname, lastname FROM table</span><span class=\"p\">\n</span><span class=\"c\">Disconnect From Database</span>\n</pre>\n</div>\n",
                "shortdoc": "Close connection to SQL database",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 404
            },
            {
                "name": "Execute Sql Script",
                "args": [
                    {
                        "name": "filename",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename"
                    },
                    {
                        "name": "sanstran",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sanstran=False"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Execute content of SQL script as SQL commands.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to SQL script to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Execute SQL Script</span><span class=\"p\">   </span><span class=\"c\">script.sql</span>\n</pre>\n</div>\n",
                "shortdoc": "Execute content of SQL script as SQL commands.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 420
            },
            {
                "name": "Get Number Of Rows",
                "args": [
                    {
                        "name": "table",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table"
                    },
                    {
                        "name": "conditions",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "conditions=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get number of rows in a table. Conditions can be given\nas arguments for WHERE clause.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">restrictions for selections, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">\n</span><span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">column1=5 and column2='x'</span>\n</pre>\n</div>\n",
                "shortdoc": "Get number of rows in a table. Conditions can be given as arguments for WHERE clause.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 597
            },
            {
                "name": "Get Rows",
                "args": [
                    {
                        "name": "table",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table"
                    },
                    {
                        "name": "columns",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "columns=None"
                    },
                    {
                        "name": "conditions",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "conditions=None"
                    },
                    {
                        "name": "as_table",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_table=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get rows from table. Columns and conditions can be\nset to filter result.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">name of columns to return, defaults to <cite>None</cite>\nmeans that all columns are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">limiting result by WHERE clause, defaults to <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">if result should be instance of <tt class=\"docutils literal\">Table</tt>, defaults to <cite>True</cite>\n<cite>False</cite> means that return type would be <cite>list</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">  </span><span class=\"c\">columns=id,name</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">columns=id</span><span class=\"p\">  </span><span class=\"c\">conditions=column1='newvalue'</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">conditions=column2='updatedvalue'</span>\n</pre>\n</div>\n",
                "shortdoc": "Get rows from table. Columns and conditions can be set to filter result.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 570
            },
            {
                "name": "Query",
                "args": [
                    {
                        "name": "statement",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "statement: str"
                    },
                    {
                        "name": "assertion",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "assertion: str | None = None"
                    },
                    {
                        "name": "sanstran",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sanstran: bool = False"
                    },
                    {
                        "name": "as_table",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_table: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Make a SQL query.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL statement to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param assertion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">assert on query result, row_count or columns.\nWorks only for SELECT statements Defaults to None.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">run command without an explicit transaction commit or rollback,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">if result should be instance of <tt class=\"docutils literal\">Table</tt>, defaults to <cite>True</cite>\n<cite>False</cite> means that return type would be <cite>list</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">   </span><span class=\"c\">Select firstname, lastname FROM table</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${row}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{RES}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">${row}</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">row_count &gt; ${EXPECTED}</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">'arvo' in columns</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Query</span><span class=\"p\">  </span><span class=\"c\">Select * FROM table</span><span class=\"p\">  </span><span class=\"c\">columns == ['id', 'arvo']</span>\n</pre>\n</div>\n",
                "shortdoc": "Make a SQL query.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 473
            },
            {
                "name": "Set Auto Commit",
                "args": [
                    {
                        "name": "autocommit",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autocommit=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set database auto commit mode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autocommit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">boolean value for auto commit, defaults to True</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Auto Commit</span><span class=\"p\">             </span><span class=\"c\"># auto commit is set on\nSet Auto Commit</span><span class=\"p\">   </span><span class=\"c\">False</span><span class=\"p\">     </span><span class=\"c\"># auto commit is turned off</span>\n</pre>\n</div>\n",
                "shortdoc": "Set database auto commit mode.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Database.py",
                "lineno": 555
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Desktop": {
        "name": "RPA.Desktop",
        "doc": "<div class=\"document\">\n<p><cite>Desktop</cite> is a cross-platform library for navigating and interacting with\ndesktop environments. It can be used to automate applications through\nthe same interfaces that are available to human users.</p>\n<p>The library includes the following features:</p>\n<ul class=\"simple\">\n<li>Mouse and keyboard input emulation</li>\n<li>Starting and stopping applications</li>\n<li>Finding elements through image template matching</li>\n<li>Scraping text from given regions</li>\n<li>Taking screenshots</li>\n<li>Clipboard management</li>\n</ul>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Windows element selectors are not currently supported, and require the use of <tt class=\"docutils literal\">RPA.Desktop.Windows</tt></p>\n</div>\n<p><strong>Installation</strong></p>\n<p>The basic features such as mouse and keyboard input and application\ncontrol work with a default <tt class=\"docutils literal\">rpaframework</tt> install.</p>\n<p>Advanced computer-vision features such as image template matching and\nOCR require an additional library called <tt class=\"docutils literal\"><span class=\"pre\">rpaframework-recognition</span></tt>.</p>\n<p>The dependency can be either added separately or through additional\nextras with <tt class=\"docutils literal\">rpaframework[cv]</tt>. If installing recognition through\n<tt class=\"docutils literal\">pip</tt> instead of <tt class=\"docutils literal\">conda</tt>, the OCR feature also requires <tt class=\"docutils literal\">tesseract</tt>.</p>\n<p><strong>Locating elements</strong></p>\n<p>To automate actions on the desktop, a robot needs to interact with various\ngraphical elements such as buttons or input fields. The locations of these\nelements can be found using a feature called <cite>locators</cite>.</p>\n<p>A locator describes the properties or features of an element. This information\ncan be later used to locate similar elements even when window positions or\nstates change.</p>\n<p>The currently supported locator types are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"9%\" />\n<col width=\"40%\" />\n<col width=\"51%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Arguments</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>alias</td>\n<td>name (str)</td>\n<td>A custom named locator from the locator database, the default.</td>\n</tr>\n<tr><td>image</td>\n<td>path (str)</td>\n<td>Image of an element that is matched to current screen content.</td>\n</tr>\n<tr><td>point</td>\n<td>x (int), y (int)</td>\n<td>Pixel coordinates as absolute position.</td>\n</tr>\n<tr><td>offset</td>\n<td>x (int), y (int)</td>\n<td>Pixel coordinates relative to current mouse position.</td>\n</tr>\n<tr><td>size</td>\n<td>width (int), height (int)</td>\n<td>Region of fixed size, around point or screen top-left</td>\n</tr>\n<tr><td>region</td>\n<td>left (int), top (int), right (int), bottom (int)</td>\n<td>Bounding coordinates for a rectangular region.</td>\n</tr>\n<tr><td>ocr</td>\n<td>text (str), confidence (float, optional)</td>\n<td>Text to find from the current screen.</td>\n</tr>\n</tbody>\n</table>\n<p>A locator is defined by its type and arguments, divided by a colon.\nSome example usages are shown below. Note that the prefix for <tt class=\"docutils literal\">alias</tt> can\nbe omitted as its the default type.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">point:50,100</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">region:20,20,100,30</span><span class=\"p\">\n\n</span><span class=\"c\">Move mouse</span><span class=\"p\">  </span><span class=\"c\">image:%{ROBOT_ROOT}/logo.png</span><span class=\"p\">\n</span><span class=\"c\">Move mouse</span><span class=\"p\">  </span><span class=\"c\">offset:200,0</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">\n\n</span><span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">alias:SpareBin.Login</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">SpareBin.Login</span><span class=\"p\">\n\n</span><span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">ocr:&quot;Create New Account&quot;</span>\n</pre>\n<p>You can also pass internal <tt class=\"docutils literal\">region</tt> objects as locators:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${region}=</span><span class=\"p\">  </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">ocr:&quot;Customer name&quot;</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">       </span><span class=\"c\">${region}</span>\n</pre>\n<p><strong>Locator chaining</strong></p>\n<p>Often it is not enough to have one locator, but instead an element\nis defined through a relationship of various locators. For this use\ncase the library supports a special syntax, which we will call\nlocator chaining.</p>\n<p>An example of chaining:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Read text from area on the right side of logo\nRead text</span><span class=\"p\">    </span><span class=\"c\">image:logo.png + offset:600,0 + size:400,200</span>\n</pre>\n<p>The supported operators are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"20%\" />\n<col width=\"80%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Operator</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>then, +</td>\n<td>Base locator relative to the previous one</td>\n</tr>\n<tr><td>and, &amp;&amp;, &amp;</td>\n<td>Both locators should be found</td>\n</tr>\n<tr><td>or, ||, |</td>\n<td>Either of the locators should be found</td>\n</tr>\n<tr><td>not, !</td>\n<td>The locator should not be found</td>\n</tr>\n</tbody>\n</table>\n<p>Further examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Click below either label\nClick</span><span class=\"p\">    </span><span class=\"c\">(image:name.png or image:email.png) then offset:0,300</span><span class=\"p\">\n\n</span><span class=\"c\"># Wait until dialog disappears\nWait for element</span><span class=\"p\">    </span><span class=\"c\">not image:cookie.png</span>\n</pre>\n<p><strong>Named locators</strong></p>\n<p>The library supports storing locators in a database, which contains\nall of the required fields and various bits of metadata. This enables\nhaving one source of truth, which can be updated if a website's or applications's\nUI changes. Robot Framework scripts can then only contain a reference\nto a stored locator by name.</p>\n<p>The main way to create named locators is with <a class=\"reference external\" href=\"https://robocorp.com/docs/product-manuals/robocorp-lab/robocorp-lab-overview\">Robocorp Lab</a>.</p>\n<p><strong>Keyboard and mouse</strong></p>\n<p>Keyboard keywords can emulate typing text, but also pressing various function keys.\nThe name of a key is case-insensitive and spaces will be converted to underscores,\ni.e. the key <tt class=\"docutils literal\">Page Down</tt> and <tt class=\"docutils literal\">page_down</tt> are equivalent.</p>\n<p>The following function keys are supported:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"16%\" />\n<col width=\"84%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Key</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>shift</td>\n<td>A generic Shift key. This is a modifier.</td>\n</tr>\n<tr><td>shift_l</td>\n<td>The left Shift key. This is a modifier.</td>\n</tr>\n<tr><td>shift_r</td>\n<td>The right Shift key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl</td>\n<td>A generic Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl_l</td>\n<td>he left Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>ctrl_r</td>\n<td>The right Ctrl key. This is a modifier.</td>\n</tr>\n<tr><td>alt</td>\n<td>A generic Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_l</td>\n<td>The left Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_r</td>\n<td>The right Alt key. This is a modifier.</td>\n</tr>\n<tr><td>alt_gr</td>\n<td>The AltGr key. This is a modifier.</td>\n</tr>\n<tr><td>cmd</td>\n<td>A generic command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>cmd_l</td>\n<td>The left command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>cmd_r</td>\n<td>The right command button (Windows / Command / Super key). This may be a modifier.</td>\n</tr>\n<tr><td>up</td>\n<td>An up arrow key.</td>\n</tr>\n<tr><td>down</td>\n<td>A down arrow key.</td>\n</tr>\n<tr><td>left</td>\n<td>A left arrow key.</td>\n</tr>\n<tr><td>right</td>\n<td>A right arrow key.</td>\n</tr>\n<tr><td>enter</td>\n<td>The Enter or Return key.</td>\n</tr>\n<tr><td>space</td>\n<td>The Space key.</td>\n</tr>\n<tr><td>tab</td>\n<td>The Tab key.</td>\n</tr>\n<tr><td>backspace</td>\n<td>The Backspace key.</td>\n</tr>\n<tr><td>delete</td>\n<td>The Delete key.</td>\n</tr>\n<tr><td>esc</td>\n<td>The Esc key.</td>\n</tr>\n<tr><td>home</td>\n<td>The Home key.</td>\n</tr>\n<tr><td>end</td>\n<td>The End key.</td>\n</tr>\n<tr><td>page_down</td>\n<td>The Page Down key.</td>\n</tr>\n<tr><td>page_up</td>\n<td>The Page Up key.</td>\n</tr>\n<tr><td>caps_lock</td>\n<td>The Caps Lock key.</td>\n</tr>\n<tr><td>f1 to f20</td>\n<td>The function keys.</td>\n</tr>\n<tr><td>insert</td>\n<td>The Insert key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>menu</td>\n<td>The Menu key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>num_lock</td>\n<td>The Num Lock key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>pause</td>\n<td>The Pause / Break key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>print_screen</td>\n<td>The Print Screen key. This may be undefined for some platforms.</td>\n</tr>\n<tr><td>scroll_lock</td>\n<td>The Scroll Lock key. This may be undefined for some platforms.</td>\n</tr>\n</tbody>\n</table>\n<p>When controlling the mouse, there are different types of actions that can be\ndone. Same formatting rules as function keys apply. They are as follows:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"26%\" />\n<col width=\"74%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Action</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>click</td>\n<td>Click with left mouse button</td>\n</tr>\n<tr><td>left_click</td>\n<td>Click with left mouse button</td>\n</tr>\n<tr><td>double_click</td>\n<td>Double click with left mouse button</td>\n</tr>\n<tr><td>triple_click</td>\n<td>Triple click with left mouse button</td>\n</tr>\n<tr><td>right_click</td>\n<td>Click with right mouse button</td>\n</tr>\n</tbody>\n</table>\n<p>The supported mouse button types are <tt class=\"docutils literal\">left</tt>, <tt class=\"docutils literal\">right</tt>, and <tt class=\"docutils literal\">middle</tt>.</p>\n<p><strong>Examples</strong></p>\n<p>Both Robot Framework and Python examples follow.</p>\n<p>The library must be imported first.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop</span> <span class=\"kn\">import</span> <span class=\"n\">Desktop</span>\n<span class=\"n\">desktop</span> <span class=\"o\">=</span> <span class=\"n\">Desktop</span><span class=\"p\">()</span>\n</pre>\n<p>The library can open applications and interact with them through\nkeyboard and mouse events.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Write entry in accounting</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]    ${</span><span class=\"nv\">entry</span><span class=\"p\">}\n    </span><span class=\"nf\">Open application</span><span class=\"p\">    </span><span class=\"s\">erp_client.exe</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">         </span><span class=\"s\">image:</span><span class=\"p\">%{</span><span class=\"nv\">ROBOT_ROOT</span><span class=\"p\">}</span><span class=\"s\">/images/create.png</span><span class=\"p\">\n    </span><span class=\"nf\">Type text</span><span class=\"p\">     ${</span><span class=\"nv\">entry</span><span class=\"p\">}\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">    </span><span class=\"s\">ctrl</span><span class=\"p\">    </span><span class=\"s\">s</span><span class=\"p\">\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">    </span><span class=\"s\">enter</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">write_entry_in_accounting</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">):</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">(</span><span class=\"s2\">&quot;erp_client.exe&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;image:</span><span class=\"si\">{</span><span class=\"n\">ROBOT_ROOT</span><span class=\"si\">}</span><span class=\"s2\">/images/create.png&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">type_text</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">press_keys</span><span class=\"p\">(</span><span class=\"s2\">&quot;ctrl&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;s&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">press_keys</span><span class=\"p\">(</span><span class=\"s2\">&quot;enter&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Targeting can be currently done using coordinates (absolute or relative),\nbut using template matching is preferred.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Write to field</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]  ${</span><span class=\"nv\">text</span><span class=\"p\">}\n    </span><span class=\"nf\">Move mouse</span><span class=\"p\">   </span><span class=\"s\">image:input_label.png</span><span class=\"p\">\n    </span><span class=\"nf\">Move mouse</span><span class=\"p\">   </span><span class=\"s\">offset:200,0</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">\n    </span><span class=\"nf\">Type text</span><span class=\"p\">    ${</span><span class=\"nv\">text</span><span class=\"p\">}\n    </span><span class=\"nf\">Press keys</span><span class=\"p\">   </span><span class=\"s\">enter</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">write_to_field</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">move_mouse</span><span class=\"p\">(</span><span class=\"s2\">&quot;image:input_label.png&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">move_mouse</span><span class=\"p\">(</span><span class=\"s2\">&quot;offset:200,0&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">type_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">press_keys</span><span class=\"p\">(</span><span class=\"s2\">&quot;enter&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Elements can be found by text too.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Click New</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">       </span><span class=\"s\">ocr:New</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">click_new</span><span class=\"p\">():</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"s1\">'ocr:&quot;New&quot;'</span><span class=\"p\">)</span>\n</pre>\n<p>It is recommended to wait for the elements to be visible before\ntrying any interaction. You can also pass <tt class=\"docutils literal\">region</tt> objects as locators.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Click New</span><span class=\"p\">\n    ${</span><span class=\"nv\">region</span><span class=\"p\">}=  </span><span class=\"nf\">Wait For element</span><span class=\"p\">  </span><span class=\"s\">ocr:New</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">       ${</span><span class=\"nv\">region</span><span class=\"p\">}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">click_new</span><span class=\"p\">():</span>\n    <span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">wait_for_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;ocr:New&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"p\">)</span>\n</pre>\n<p>Another way to find elements by offsetting from an anchor:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Type Notes</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]        ${</span><span class=\"nv\">text</span><span class=\"p\">}\n    </span><span class=\"nf\">Click With Offset</span><span class=\"p\">  </span><span class=\"s\">ocr:Notes</span><span class=\"p\">  </span><span class=\"s\">500</span><span class=\"p\">  </span><span class=\"s\">0</span><span class=\"p\">\n    </span><span class=\"nf\">Type Text</span><span class=\"p\">          ${</span><span class=\"nv\">text</span><span class=\"p\">}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"k\">def</span> <span class=\"nf\">type_notes</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">click_with_offset</span><span class=\"p\">(</span><span class=\"s2\">&quot;ocr:Notes&quot;</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">type_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:01",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\__init__.py",
        "lineno": 37,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Clear Clipboard",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Clear the system clipboard.</p>\n</div>\n",
                "shortdoc": "Clear the system clipboard.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py",
                "lineno": 52
            },
            {
                "name": "Click",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | Locator | None = None"
                    },
                    {
                        "name": "action",
                        "types": [
                            "Action"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: Action = click"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click at the element indicated by locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for click position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">Click action, e.g. right click</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Button</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">coordinates:500,200</span><span class=\"p\">    </span><span class=\"c\">triple click</span>\n</pre>\n</div>\n",
                "shortdoc": "Click at the element indicated by locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 110
            },
            {
                "name": "Click With Offset",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | Locator | None = None"
                    },
                    {
                        "name": "x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "x: int = 0"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "y: int = 0"
                    },
                    {
                        "name": "action",
                        "types": [
                            "Action"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: Action = click"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click at a given pixel offset from the given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for click start position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">Click horizontal offset in pixels</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">Click vertical offset in pixels</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">Click action, e.g. right click</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click with offset</span><span class=\"p\">    </span><span class=\"c\">Robocorp.Logo</span><span class=\"p\">    </span><span class=\"c\">y=400</span>\n</pre>\n</div>\n",
                "shortdoc": "Click at a given pixel offset from the given locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 140
            },
            {
                "name": "Close All Applications",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close all opened applications.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order1.docx</span><span class=\"p\">\n</span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order2.docx</span><span class=\"p\">\n</span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">order3.docx</span><span class=\"p\">\n</span><span class=\"c\"># Do something with Word\nClose all applications</span>\n</pre>\n</div>\n",
                "shortdoc": "Close all opened applications.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py",
                "lineno": 191
            },
            {
                "name": "Close Application",
                "args": [
                    {
                        "name": "app",
                        "types": [
                            "Application"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "app: Application"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close given application. Needs to be started\nwith this library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app:</th><td class=\"field-body\">App instance</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${word}=</span><span class=\"p\">    </span><span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">template.docx</span><span class=\"p\">\n</span><span class=\"c\"># Do something with Word\nClose application</span><span class=\"p\">    </span><span class=\"c\">${word}</span>\n</pre>\n</div>\n",
                "shortdoc": "Close given application. Needs to be started with this library.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py",
                "lineno": 173
            },
            {
                "name": "Copy To Clipboard",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read value to system clipboard from given input element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Current clipboard value</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${value}=</span><span class=\"p\">    </span><span class=\"c\">Copy to clipboard</span><span class=\"p\">    </span><span class=\"c\">ResultPage.Counter</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Copied text: ${value}</span>\n</pre>\n</div>\n",
                "shortdoc": "Read value to system clipboard from given input element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py",
                "lineno": 11
            },
            {
                "name": "Define Region",
                "args": [
                    {
                        "name": "left",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "left: int"
                    },
                    {
                        "name": "top",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "top: int"
                    },
                    {
                        "name": "right",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "right: int"
                    },
                    {
                        "name": "bottom",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "bottom: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a new <tt class=\"docutils literal\">Region</tt> with the given dimensions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param left:</th><td class=\"field-body\">Left edge coordinate.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param top:</th><td class=\"field-body\">Top edge coordinate.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param right:</th><td class=\"field-body\">Right edge coordinate.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param bottom:</th><td class=\"field-body\">Bottom edge coordinate.</td>\n</tr>\n</tbody>\n</table>\n<p>Usage examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${region}=</span><span class=\"p\">  </span><span class=\"c\">Define Region</span><span class=\"p\">  </span><span class=\"c\">10</span><span class=\"p\">  </span><span class=\"c\">10</span><span class=\"p\">  </span><span class=\"c\">50</span><span class=\"p\">  </span><span class=\"c\">30</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">define_region</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a new ``Region`` with the given dimensions.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 187
            },
            {
                "name": "Drag And Drop",
                "args": [
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source: str | Locator"
                    },
                    {
                        "name": "destination",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination: str | Locator"
                    },
                    {
                        "name": "start_delay",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "2.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "start_delay: float = 2.0"
                    },
                    {
                        "name": "end_delay",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "end_delay: float = 0.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Drag mouse from source to destination while holding the left mouse button.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">Locator for start position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Locator for destination position</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Delay in seconds after pressing down mouse button</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Delay in seconds before releasing mouse button</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Drag mouse from source to destination while holding the left mouse button.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 233
            },
            {
                "name": "Find Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find an element defined by locator, and return its position.\nRaises <tt class=\"docutils literal\">ElementNotFound</tt> if` no matches were found, or\n<tt class=\"docutils literal\">MultipleElementsFound</tt> if there were multiple matches.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${match}=</span><span class=\"p\">    </span><span class=\"c\">Find element</span><span class=\"p\">    </span><span class=\"c\">image:logo.png</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Found logo at ${match.x}, ${match.y}</span>\n</pre>\n</div>\n",
                "shortdoc": "Find an element defined by locator, and return its position. Raises ``ElementNotFound`` if` no matches were found, or ``MultipleElementsFound`` if there were multiple matches.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py",
                "lineno": 284
            },
            {
                "name": "Find Elements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find all elements defined by locator, and return their positions.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${matches}=</span><span class=\"p\">    </span><span class=\"c\">Find elements</span><span class=\"p\">    </span><span class=\"c\">image:icon.png</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${match}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{matches}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Found icon at ${match.x}, ${match.y}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Find all elements defined by locator, and return their positions.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py",
                "lineno": 262
            },
            {
                "name": "Get Clipboard Value",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Read current value from system clipboard.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Copy to clipboard</span><span class=\"p\">       </span><span class=\"c\">coordinates:401,198</span><span class=\"p\">\n</span><span class=\"c\">${text}=</span><span class=\"p\">    </span><span class=\"c\">Get clipboard value</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">We just copied '${text}'</span>\n</pre>\n</div>\n",
                "shortdoc": "Read current value from system clipboard.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py",
                "lineno": 57
            },
            {
                "name": "Get Display Dimensions",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Returns the dimensions of the current virtual display,\nwhich is the combined size of all physical monitors.</p>\n</div>\n",
                "shortdoc": "Returns the dimensions of the current virtual display, which is the combined size of all physical monitors.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 161
            },
            {
                "name": "Get Mouse Position",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get current mouse position in pixel coordinates.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${position}=</span><span class=\"p\">    </span><span class=\"c\">Get mouse position</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Current mouse position is ${position.x}, ${position.y}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get current mouse position in pixel coordinates.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 175
            },
            {
                "name": "Highlight Elements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Draw an outline around all matching elements.</p>\n</div>\n",
                "shortdoc": "Draw an outline around all matching elements.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 169
            },
            {
                "name": "Move Mouse",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move mouse to given coordinates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for mouse position</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">Robocorp.Logo</span><span class=\"p\">\n</span><span class=\"c\">Move mouse</span><span class=\"p\">    </span><span class=\"c\">offset:0,400</span>\n</pre>\n</div>\n",
                "shortdoc": "Move mouse to given coordinates.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 192
            },
            {
                "name": "Move Region",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "Region"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "region: Region"
                    },
                    {
                        "name": "left",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "left: int"
                    },
                    {
                        "name": "top",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "top: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a new <tt class=\"docutils literal\">Region</tt> with an offset from the given region.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">The region to move.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param left:</th><td class=\"field-body\">Amount of pixels to move left/right.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param top:</th><td class=\"field-body\">Amount of pixels to move up/down.</td>\n</tr>\n</tbody>\n</table>\n<p>Usage examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${region}=</span><span class=\"p\">          </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">ocr:&quot;Net Assets&quot;</span><span class=\"p\">\n</span><span class=\"c\">${moved_region}=</span><span class=\"p\">    </span><span class=\"c\">Move Region</span><span class=\"p\">  </span><span class=\"c\">${region}</span><span class=\"p\">  </span><span class=\"c\">500</span><span class=\"p\">  </span><span class=\"c\">0</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"s1\">'ocr:&quot;Net Assets&quot;'</span><span class=\"p\">)</span>\n<span class=\"n\">moved_region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">move_region</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a new ``Region`` with an offset from the given region.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 210
            },
            {
                "name": "Open Application",
                "args": [
                    {
                        "name": "name_or_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name_or_path: str"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Start a given application by name (if in PATH),\nor by path to executable.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param name_or_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Name or path of application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">Command line arguments for application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Application instance</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open application</span><span class=\"p\">    </span><span class=\"c\">notepad.exe</span><span class=\"p\">\n</span><span class=\"c\">Open application</span><span class=\"p\">    </span><span class=\"c\">c:\\path\\to\\program.exe</span><span class=\"p\">    </span><span class=\"c\">--example-argument</span>\n</pre>\n</div>\n",
                "shortdoc": "Start a given application by name (if in PATH), or by path to executable.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py",
                "lineno": 77
            },
            {
                "name": "Open File",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open a file with the default application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span>\n</pre>\n</div>\n",
                "shortdoc": "Open a file with the default application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\application.py",
                "lineno": 96
            },
            {
                "name": "Paste From Clipboard",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Paste value from system clipboard into given element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator for element</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Copy to clipboard</span><span class=\"p\">       </span><span class=\"c\">coordinates:401,198</span><span class=\"p\">\n</span><span class=\"c\">Paste from clipboard</span><span class=\"p\">    </span><span class=\"c\">coordinates:822,710</span>\n</pre>\n</div>\n",
                "shortdoc": "Paste value from system clipboard into given element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py",
                "lineno": 33
            },
            {
                "name": "Press Keys",
                "args": [
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*keys: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Press multiple keys down simultaneously.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">Keys to press</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">alt</span><span class=\"p\">  </span><span class=\"c\">delete</span><span class=\"p\">\n\n</span><span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">a</span><span class=\"p\">\n</span><span class=\"c\">Press keys</span><span class=\"p\">    </span><span class=\"c\">ctrl</span><span class=\"p\">  </span><span class=\"c\">c</span><span class=\"p\">\n</span><span class=\"c\">${all_text}=</span><span class=\"p\">  </span><span class=\"c\">Get clipboard value</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Text box content was: ${all_text}</span>\n</pre>\n</div>\n",
                "shortdoc": "Press multiple keys down simultaneously.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py",
                "lineno": 73
            },
            {
                "name": "Press Mouse Button",
                "args": [
                    {
                        "name": "button",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "left",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "button: Any = left"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Press down mouse button and keep it pressed.</p>\n</div>\n",
                "shortdoc": "Press down mouse button and keep it pressed.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 211
            },
            {
                "name": "Read Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | None = None"
                    },
                    {
                        "name": "invert",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "invert: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read text using OCR from the screen, or an area of the\nscreen defined by the given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Location of element to read text from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param invert:</th><td class=\"field-body\">Invert image colors, useful for reading white text\non dark background</td>\n</tr>\n</tbody>\n</table>\n<p>Usage examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${label_region}=</span><span class=\"p\">  </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">image:label.png</span><span class=\"p\">\n</span><span class=\"c\">${value_region}=</span><span class=\"p\">  </span><span class=\"c\">Move Region</span><span class=\"p\">   </span><span class=\"c\">${label_region}</span><span class=\"p\">  </span><span class=\"c\">100</span><span class=\"p\">  </span><span class=\"c\">0</span><span class=\"p\">\n</span><span class=\"c\">${text}=</span><span class=\"p\">          </span><span class=\"c\">Read Text</span><span class=\"p\">     </span><span class=\"c\">${value_region}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">label_region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;image:label.png&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">value_region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">move_region</span><span class=\"p\">(</span><span class=\"n\">label_region</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">read_text</span><span class=\"p\">(</span><span class=\"n\">value_region</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
                "shortdoc": "Read text using OCR from the screen, or an area of the screen defined by the given locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\text.py",
                "lineno": 24
            },
            {
                "name": "Release Mouse Button",
                "args": [
                    {
                        "name": "button",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": "left",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "button: Any = left"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Release mouse button that was previously pressed.</p>\n</div>\n",
                "shortdoc": "Release mouse button that was previously pressed.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\mouse.py",
                "lineno": 222
            },
            {
                "name": "Resize Region",
                "args": [
                    {
                        "name": "region",
                        "types": [
                            "Region"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "region: Region"
                    },
                    {
                        "name": "left",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "left: int = 0"
                    },
                    {
                        "name": "top",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "top: int = 0"
                    },
                    {
                        "name": "right",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "right: int = 0"
                    },
                    {
                        "name": "bottom",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bottom: int = 0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a resized new <tt class=\"docutils literal\">Region</tt> from a given region.</p>\n<p>Extends edges the given amount outward from the center,\ni.e. positive left values move the left edge to the left.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">The region to resize.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param left:</th><td class=\"field-body\">Amount of pixels to resize left edge.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param top:</th><td class=\"field-body\">Amount of pixels to resize top edge.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param right:</th><td class=\"field-body\">Amount of pixels to resize right edge.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param bottom:</th><td class=\"field-body\">Amount of pixels to resize bottom edge.</td>\n</tr>\n</tbody>\n</table>\n<p>Usage examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${region}=</span><span class=\"p\">          </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">ocr:&quot;Net Assets&quot;</span><span class=\"p\">\n</span><span class=\"c\">${resized_region}=</span><span class=\"p\">  </span><span class=\"c\">Resize Region</span><span class=\"p\">  </span><span class=\"c\">${region}</span><span class=\"p\">  </span><span class=\"c\">bottom=10</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"s1\">'ocr:&quot;Net Assets&quot;'</span><span class=\"p\">)</span>\n<span class=\"n\">resized_region</span> <span class=\"o\">=</span> <span class=\"n\">desktop</span><span class=\"o\">.</span><span class=\"n\">resize_region</span><span class=\"p\">(</span><span class=\"n\">region</span><span class=\"p\">,</span> <span class=\"n\">bottom</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a resized new ``Region`` from a given region.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 234
            },
            {
                "name": "Set Clipboard Value",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Write given value to system clipboard.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set clipboard value</span><span class=\"p\">     </span><span class=\"c\">This is some text.</span><span class=\"p\">\n</span><span class=\"c\">Paste from clipboard</span><span class=\"p\">    </span><span class=\"c\">coordinates:822,710</span>\n</pre>\n</div>\n",
                "shortdoc": "Write given value to system clipboard.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\clipboard.py",
                "lineno": 71
            },
            {
                "name": "Set Default Confidence",
                "args": [
                    {
                        "name": "confidence",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "confidence: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the default template matching confidence.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param confidence:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Value from 1 to 100</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set the default template matching confidence.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py",
                "lineno": 361
            },
            {
                "name": "Set Default Timeout",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "3.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 3.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the default time to wait for elements.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Time in seconds</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set the default time to wait for elements.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py",
                "lineno": 353
            },
            {
                "name": "Take Screenshot",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path: str | None = None"
                    },
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | Locator | None = None"
                    },
                    {
                        "name": "embed",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "embed: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Take a screenshot of the whole screen, or an element\nidentified by the given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to screenshot. The string <tt class=\"docutils literal\">{index}</tt> will be replaced with\nan index number to avoid overwriting previous screenshots.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Element to crop screenshot to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param embed:</th><td class=\"field-body\">Embed screenshot into Robot Framework log</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Take a screenshot of the whole screen, or an element identified by the given locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\screen.py",
                "lineno": 120
            },
            {
                "name": "Type Text",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "modifiers",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*modifiers: str"
                    },
                    {
                        "name": "enter",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "enter: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Type text one letter at a time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Text to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param modifiers:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Modifier or functions keys held during typing</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">Press Enter / Return key after typing text</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Type text</span><span class=\"p\">    </span><span class=\"c\">this text will be uppercase</span><span class=\"p\">    </span><span class=\"c\">shift</span>\n</pre>\n</div>\n",
                "shortdoc": "Type text one letter at a time.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py",
                "lineno": 47
            },
            {
                "name": "Type Text Into",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = False"
                    },
                    {
                        "name": "enter",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "enter: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Type text at the position indicated by given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator of input element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Text to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param clear:</th><td class=\"field-body\">Clear element before writing</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">Press Enter / Return key after typing text</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Type text into</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Name</span><span class=\"p\">      </span><span class=\"c\">Marky Mark</span><span class=\"p\">\n</span><span class=\"c\">Type text into</span><span class=\"p\">    </span><span class=\"c\">LoginForm.Password</span><span class=\"p\">  </span><span class=\"c\">${PASSWORD}</span>\n</pre>\n</div>\n",
                "shortdoc": "Type text at the position indicated by given locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\keyboard.py",
                "lineno": 103
            },
            {
                "name": "Wait For Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "Locator"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str | Locator"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float | None = None"
                    },
                    {
                        "name": "interval",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "interval: float = 0.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for an element defined by locator to exist, or\nraise a TimeoutException if none were found within timeout.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Wait for element</span><span class=\"p\">    </span><span class=\"c\">alias:CookieConsent</span><span class=\"p\">    </span><span class=\"c\">timeout=30</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">    </span><span class=\"c\">image:%{ROBOT_ROOT}/accept.png</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for an element defined by locator to exist, or raise a TimeoutException if none were found within timeout.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\keywords\\finder.py",
                "lineno": 314
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "Action",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Possible mouse click actions.</p>\n</div>\n",
                    "members": [
                        {
                            "name": "click",
                            "value": "0"
                        },
                        {
                            "name": "left_click",
                            "value": "0"
                        },
                        {
                            "name": "double_click",
                            "value": "1"
                        },
                        {
                            "name": "triple_click",
                            "value": "2"
                        },
                        {
                            "name": "right_click",
                            "value": "3"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Desktop.Clipboard": {
        "name": "RPA.Desktop.Clipboard",
        "doc": "<div class=\"document\">\n<p><em>DEPRECATED!!</em> Use library RPA.Desktop's clipboard functionality instead.</p>\n<p><cite>Clipboard</cite> is a library for managing clipboard - <strong>copy</strong> text to,\n<strong>paste</strong> text from, and <strong>clear</strong> clipboard contents.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop.Clipboard</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Clipping</span><span class=\"p\">\n    </span><span class=\"nf\">Copy To Clipboard</span><span class=\"p\">   </span><span class=\"s\">Text from Robot to clipboard</span><span class=\"p\">\n    ${</span><span class=\"nv\">var</span><span class=\"p\">}=             </span><span class=\"nf\">Paste From Clipboard</span><span class=\"p\">\n    </span><span class=\"nf\">Clear Clipboard</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.Clipboard</span> <span class=\"kn\">import</span> <span class=\"n\">Clipboard</span>\n\n<span class=\"n\">clip</span> <span class=\"o\">=</span> <span class=\"n\">Clipboard</span><span class=\"p\">()</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">copy_to_clipboard</span><span class=\"p\">(</span><span class=\"s1\">'Text from Python to clipboard'</span><span class=\"p\">)</span>\n<span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">paste_from_clipboard</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;clipboard had text: '</span><span class=\"si\">{</span><span class=\"n\">text</span><span class=\"si\">}</span><span class=\"s2\">'&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">clip</span><span class=\"o\">.</span><span class=\"n\">clear_clipboard</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:01",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Clipboard.py",
        "lineno": 11,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Clear Clipboard",
                "args": [],
                "doc": "<div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Clear Clipboard</cite> instead.\nClear clipboard contents</p>\n</div>\n",
                "shortdoc": "*DEPRECATED!!* Use `RPA.Desktop` library's `Clear Clipboard` instead. Clear clipboard contents",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Clipboard.py",
                "lineno": 84
            },
            {
                "name": "Copy To Clipboard",
                "args": [
                    {
                        "name": "text",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text"
                    }
                ],
                "doc": "<div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Copy to Clipboard</cite> instead.</p>\n<p>Copy text to clipboard</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">to copy</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "*DEPRECATED!!* Use `RPA.Desktop` library's `Copy to Clipboard` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Clipboard.py",
                "lineno": 51
            },
            {
                "name": "Paste From Clipboard",
                "args": [],
                "doc": "<div class=\"document\">\n<p><em>DEPRECATED!!</em> Use <cite>RPA.Desktop</cite> library's <cite>Paste from Clipboard</cite> instead.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">text</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "*DEPRECATED!!* Use `RPA.Desktop` library's `Paste from Clipboard` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Clipboard.py",
                "lineno": 67
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Desktop.OperatingSystem": {
        "name": "RPA.Desktop.OperatingSystem",
        "doc": "<div class=\"document\">\n<p><cite>OperatingSystem</cite> is a cross-platform library for managing\ncomputer properties and actions.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Desktop.OperatingSystem</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get computer information</span><span class=\"p\">\n    ${</span><span class=\"nv\">boot_time</span><span class=\"p\">}=   </span><span class=\"nf\">Get Boot Time</span><span class=\"p\">  </span><span class=\"s\">as_datetime=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">machine</span><span class=\"p\">}=     </span><span class=\"nf\">Get Machine Name</span><span class=\"p\">\n    ${</span><span class=\"nv\">username</span><span class=\"p\">}=    </span><span class=\"nf\">Get Username</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">memory</span><span class=\"p\">}=      </span><span class=\"nf\">Get Memory Stats</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">        ${</span><span class=\"nv\">memory</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.OperatingSystem</span> <span class=\"kn\">import</span> <span class=\"n\">OperatingSystem</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_computer_information</span><span class=\"p\">():</span>\n    <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"n\">OperatingSystem</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Boot time    : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_boot_time</span><span class=\"p\">(</span><span class=\"n\">as_datetime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Machine name : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_machine_name</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Username     : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_username</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n          <span class=\"sa\">f</span><span class=\"s2\">&quot;Memory       : </span><span class=\"si\">{</span> <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">get_memory_stats</span><span class=\"p\">()</span> <span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">get_computer_information</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:01",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
        "lineno": 21,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Boot Time In Seconds From Epoch",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get machine boot time</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boot time in seconds from Epoch</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${epoch}</span><span class=\"p\">  </span><span class=\"c\">Boot Time In Seconds From Epoch</span>\n</pre>\n</div>\n",
                "shortdoc": "Get machine boot time",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 92
            },
            {
                "name": "Get Boot Time",
                "args": [
                    {
                        "name": "as_datetime",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_datetime: bool = False"
                    },
                    {
                        "name": "datetime_format",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "%Y-%m-%d %H:%M:%S",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "datetime_format: str = %Y-%m-%d %H:%M:%S"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get computer boot time in seconds from Epoch or in datetime string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param as_datetime:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if True returns datetime string, otherwise seconds,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">datetime string format, defaults to &quot;%Y-%m-%d %H:%M:%S&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">seconds from Epoch or datetime string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">  </span><span class=\"c\">datetime_format=%d.%m.%Y</span>\n</pre>\n</div>\n",
                "shortdoc": "Get computer boot time in seconds from Epoch or in datetime string.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 67
            },
            {
                "name": "Get Machine Name",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get machine name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">machine name as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${machine}</span><span class=\"p\">  </span><span class=\"c\">Get Machine Name</span>\n</pre>\n</div>\n",
                "shortdoc": "Get machine name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 106
            },
            {
                "name": "Get Memory Stats",
                "args": [
                    {
                        "name": "humanized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "humanized: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get computer memory stats and return those in bytes\nor in humanized memory format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param humanized:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if False returns memory information in bytes, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">memory information in dictionary format</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">\n</span><span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">   </span><span class=\"c\">humanized=False</span>\n</pre>\n</div>\n",
                "shortdoc": "Get computer memory stats and return those in bytes or in humanized memory format.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 234
            },
            {
                "name": "Get Username",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get username of logged in user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">username as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${user}</span><span class=\"p\">  </span><span class=\"c\">Get Username</span>\n</pre>\n</div>\n",
                "shortdoc": "Get username of logged in user",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 120
            },
            {
                "name": "Kill Process",
                "args": [
                    {
                        "name": "process_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Kill process by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if succeeds False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.name()}</span>\n</pre>\n</div>\n",
                "shortdoc": "Kill process by name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 197
            },
            {
                "name": "Kill Process By Pid",
                "args": [
                    {
                        "name": "pid",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pid: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Kill process by pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process By PID</span><span class=\"p\">   </span><span class=\"c\">${process.pid}</span>\n</pre>\n</div>\n",
                "shortdoc": "Kill process by pid",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 218
            },
            {
                "name": "Process Exists",
                "args": [
                    {
                        "name": "process_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_name: str"
                    },
                    {
                        "name": "strict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "strict: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Check if process exists by its name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search for this process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">defines how match is made, default <cite>True</cite>\nwhich means that process name needs to be exact match\nand <cite>False</cite> does inclusive matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">\n</span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span>\n</pre>\n</div>\n",
                "shortdoc": "Check if process exists by its name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 151
            },
            {
                "name": "Process Id Exists",
                "args": [
                    {
                        "name": "pid",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pid: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Check if process exists by its id</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process ID Exists</span><span class=\"p\">  </span><span class=\"c\">4567</span><span class=\"p\">\n</span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Process exists</span>\n</pre>\n</div>\n",
                "shortdoc": "Check if process exists by its id",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 177
            },
            {
                "name": "Put System To Sleep",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Puts system to sleep mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Put System To Sleep</span>\n</pre>\n</div>\n",
                "shortdoc": "Puts system to sleep mode",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 135
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Desktop.Windows": {
        "name": "RPA.Desktop.Windows",
        "doc": "<div class=\"document\">\n<p><cite>Windows</cite> is a library for managing the Windows operating system.</p>\n<p><strong>Running Windows applications</strong></p>\n<p>Windows applications can be started in several ways. The library supports\nthe following keywords:</p>\n<ul class=\"simple\">\n<li>Open Application (dispatch Office applications)</li>\n<li>Open File (open the file as process which opens the associated application)</li>\n<li>Open Executable (uses pywinauto start)</li>\n<li>Open Using Run Dialog (uses Windows run dialog)</li>\n<li>Open From Search (uses Windows search dialog)</li>\n</ul>\n<p><strong>Locators</strong></p>\n<p><cite>Locator</cite> is used to identify the element for interaction - usually for a mouse click.</p>\n<p>Locators can investigated for application once it has been opened by calling\nthe keyword <cite>get_windows_elements</cite> which can store locator information into JSON file\nand <cite>screenshot</cite> of the element into an image file.</p>\n<p><strong>Identifying locator</strong></p>\n<p>The element needs to be identified by a unique method, for example, &quot;Three&quot; for button 3\nin the Calculator application. It can be given either as <cite>Three</cite> or <cite>name:Three</cite>.</p>\n<p>Possible search criterias:</p>\n<ul class=\"simple\">\n<li>name</li>\n<li>class (class_name)</li>\n<li>type (control_type)</li>\n<li>id (automation_id)</li>\n<li>any if none was defined</li>\n</ul>\n<p>The current method of inspecting elements on Windows is <cite>inspect.exe</cite> which is part\nof <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects\">Windows SDK</a>.</p>\n<p><strong>Keyboard</strong></p>\n<p>The keyword <cite>send_keys</cite> can be used to send keys to the active window. The keyword\n<cite>type_keys</cite> sends keys to the active window element.</p>\n<p>Special key codes are documented on <a class=\"reference external\" href=\"https://pywinauto.readthedocs.io/en/latest/code/pywinauto.keyboard.html#\">pywinauto</a>\ndocumentation page.</p>\n<p><strong>FAQ</strong></p>\n<ol class=\"upperalpha simple\" start=\"17\">\n<li>I see error message <cite>AttributeError: module 'win32com.gen_py.00020813-0000-0000-C000-000000000046x0x1x9' has no attribute 'CLSIDToClassMap'</cite></li>\n</ol>\n<ol class=\"upperalpha simple\">\n<li>From PowerShell run this command: <cite>Remove-Item -path $env:LOCALAPPDATATempgen_py -recurse</cite></li>\n</ol>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">          </span><span class=\"nn\">RPA.Desktop.Windows</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">   </span><span class=\"nf\">Close all applications</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Open Calculator using run dialog</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Open using run dialog</span><span class=\"p\">    </span><span class=\"s\">calc.exe</span><span class=\"p\">   </span><span class=\"s\">Calculator</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get Window Elements</span><span class=\"p\">\n    </span><span class=\"nf\">Send Keys</span><span class=\"p\">               </span><span class=\"s\">5*2=</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element</span><span class=\"p\">             </span><span class=\"s\">partial name:Display is</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">                ${</span><span class=\"nv\">result</span><span class=\"p\">}\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element rich text</span><span class=\"p\">   </span><span class=\"s\">id:CalculatorResults</span><span class=\"p\">\n    </span><span class=\"nf\">Should Be Equal As Strings</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}  </span><span class=\"s\">Display is 10</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Get element rectangle</span><span class=\"p\">   </span><span class=\"s\">partial name:Display is</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Is Element Visible</span><span class=\"p\">      </span><span class=\"s\">CalculatorResults</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=              </span><span class=\"nf\">Is Element Enabled</span><span class=\"p\">      </span><span class=\"s\">partial name:Display is</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Desktop.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span>\n\n<span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">open_calculator</span><span class=\"p\">():</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">open_from_search</span><span class=\"p\">(</span><span class=\"s2\">&quot;calc.exe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Calculator&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">get_window_elements</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_calculations</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">):</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">get_element_rich_text</span><span class=\"p\">(</span><span class=\"s1\">'id:CalculatorResults'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s1\">'Display is '</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">open_calculator</span><span class=\"p\">()</span>\n    <span class=\"n\">exp</span> <span class=\"o\">=</span> <span class=\"s1\">'5*2='</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">make_calculations</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Calculation result of '</span><span class=\"si\">{</span><span class=\"n\">exp</span><span class=\"si\">}</span><span class=\"s2\">' is '</span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">'&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">win</span><span class=\"o\">.</span><span class=\"n\">close_all_applications</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:01",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
        "lineno": 102,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "backend",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "uia",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backend: str = uia"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 205
            }
        ],
        "keywords": [
            {
                "name": "Boot Time In Seconds From Epoch",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get machine boot time</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boot time in seconds from Epoch</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${epoch}</span><span class=\"p\">  </span><span class=\"c\">Boot Time In Seconds From Epoch</span>\n</pre>\n</div>\n",
                "shortdoc": "Get machine boot time",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 92
            },
            {
                "name": "Calculate Rectangle Center",
                "args": [
                    {
                        "name": "rectangle",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "rectangle: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Calculate x and y center coordinates from rectangle.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param rectangle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">element rectangle coordinates</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">x and y coordinates of rectangle center</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">   </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">&amp;{rect}=</span><span class=\"p\">        </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${x}</span><span class=\"p\">  </span><span class=\"c\">${y}=</span><span class=\"p\">     </span><span class=\"c\">Calculate Rectangle Center</span><span class=\"p\">   </span><span class=\"c\">${rect}</span>\n</pre>\n</div>\n",
                "shortdoc": "Calculate x and y center coordinates from rectangle.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1921
            },
            {
                "name": "Click Type",
                "args": [
                    {
                        "name": "x",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "x: int | None = None"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "y: int | None = None"
                    },
                    {
                        "name": "click_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "click_type: str = click"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mouse click on coordinates x and y.</p>\n<p>Default click type is <cite>click</cite> meaning <cite>left</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">horizontal coordinate for click, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">vertical coordinate for click, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param click_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">&quot;click&quot;, &quot;right&quot; or &quot;double&quot;, defaults to &quot;click&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if coordinates are not valid</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">\n</span><span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">click_type=right</span><span class=\"p\">\n</span><span class=\"c\">Click Type</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">click_type=double</span>\n</pre>\n</div>\n",
                "shortdoc": "Mouse click on coordinates x and y.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1449
            },
            {
                "name": "Close All Applications",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close all applications</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">    </span><span class=\"c\">notepad.exe</span><span class=\"p\">   </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Close All Applications</span>\n</pre>\n</div>\n",
                "shortdoc": "Close all applications",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 786
            },
            {
                "name": "Connect By Handle",
                "args": [
                    {
                        "name": "handle",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "handle: int"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    },
                    {
                        "name": "existing_app",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "existing_app: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to application by its handle</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param handle:</th><td class=\"field-body\">handle of the application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, defaults to active window if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param existing_app:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set True if selecting window which library has already\naccessed, default False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${appid}</span><span class=\"p\">  </span><span class=\"c\">Connect By Handle</span><span class=\"p\">  </span><span class=\"c\">88112</span>\n</pre>\n</div>\n",
                "shortdoc": "Connect to application by its handle",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 748
            },
            {
                "name": "Connect By Pid",
                "args": [
                    {
                        "name": "app_pid",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "app_pid: str"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to application by its pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_pid:</th><td class=\"field-body\">process id of the application</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, defaults to active window if None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${appid}</span><span class=\"p\">  </span><span class=\"c\">Connect By PID</span><span class=\"p\">  </span><span class=\"c\">3231</span>\n</pre>\n</div>\n",
                "shortdoc": "Connect to application by its pid",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 724
            },
            {
                "name": "Drag And Drop",
                "args": [
                    {
                        "name": "src",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "src: Any"
                    },
                    {
                        "name": "target",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target: Any"
                    },
                    {
                        "name": "src_locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "src_locator: str"
                    },
                    {
                        "name": "target_locator",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_locator: str | None = None"
                    },
                    {
                        "name": "handle_ctrl_key",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "handle_ctrl_key: bool = False"
                    },
                    {
                        "name": "drop_delay",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "2.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "drop_delay: float = 2.0"
                    },
                    {
                        "name": "origin",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "middle",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "origin: str = middle"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Drag elements from source and drop them on target.</p>\n<p>Please note that if CTRL is not pressed down during drag and drop then\noperation is MOVE operation, on CTRL down the operation is COPY operation.</p>\n<p>There will be also overwrite notification if dropping over existing files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param src:</th><td class=\"field-body\">application object or instance id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">application object or instance id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param src_locator:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">elements to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param handle_ctrl_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if keyword should press CTRL down dragging</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param drop_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">how many seconds to wait until releasing mouse drop,\ndefault 2.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on validation errors</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}=</span><span class=\"p\">        </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">    </span><span class=\"c\">explorer.exe{VK_SPACE}C:\\workfiles\\movethese</span><span class=\"p\">   </span><span class=\"c\">movethese</span><span class=\"p\">\n</span><span class=\"c\">${app2}=</span><span class=\"p\">        </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">    </span><span class=\"c\">wordpad.exe</span><span class=\"p\">   </span><span class=\"c\">Document - WordPad</span><span class=\"p\">\n</span><span class=\"c\">Drag And Drop</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">${app2}</span><span class=\"p\">   </span><span class=\"c\">regexp:testfile_\\d.txt</span><span class=\"p\">  </span><span class=\"c\">name:Rich Text Window</span><span class=\"p\">   </span><span class=\"c\">handle_ctrl_key=${True}</span><span class=\"p\">\n</span><span class=\"c\">Drag And Drop</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">regexp:testfile_\\d.txt</span><span class=\"p\">  </span><span class=\"c\">name:subdir</span><span class=\"p\">  </span><span class=\"c\">handle_ctrl_key=${True}</span>\n</pre>\n</div>\n",
                "shortdoc": "Drag elements from source and drop them on target.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1828
            },
            {
                "name": "Find Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "search_criteria",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "search_criteria: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find element from window by locator and criteria.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_criteria:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">criteria by which element is matched</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of matching elements and locators that were found on the window</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">   </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Log Many</span><span class=\"p\">  </span><span class=\"c\">${elements[0]}</span><span class=\"p\">     </span><span class=\"c\"># list of matching elements\nLog Many</span><span class=\"p\">  </span><span class=\"c\">${elements[1]}</span><span class=\"p\">     </span><span class=\"c\"># list of all available locators</span>\n</pre>\n</div>\n",
                "shortdoc": "Find element from window by locator and criteria.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1283
            },
            {
                "name": "Get App",
                "args": [
                    {
                        "name": "app_id",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "app_id: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get application object by id</p>\n<p>By default returns active_application application object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">id of the application to get, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">        </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">&amp;{appdetails}</span><span class=\"p\">  </span><span class=\"c\">Get App</span><span class=\"p\">   </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get application object by id",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 322
            },
            {
                "name": "Get Boot Time",
                "args": [
                    {
                        "name": "as_datetime",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_datetime: bool = False"
                    },
                    {
                        "name": "datetime_format",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "%Y-%m-%d %H:%M:%S",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "datetime_format: str = %Y-%m-%d %H:%M:%S"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get computer boot time in seconds from Epoch or in datetime string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param as_datetime:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if True returns datetime string, otherwise seconds,\ndefaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param datetime_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">datetime string format, defaults to &quot;%Y-%m-%d %H:%M:%S&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">seconds from Epoch or datetime string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">\n</span><span class=\"c\">${boottime}</span><span class=\"p\">  </span><span class=\"c\">Get Boot Time</span><span class=\"p\">   </span><span class=\"c\">as_datetime=True</span><span class=\"p\">  </span><span class=\"c\">datetime_format=%d.%m.%Y</span>\n</pre>\n</div>\n",
                "shortdoc": "Get computer boot time in seconds from Epoch or in datetime string.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 67
            },
            {
                "name": "Get Dialog Rectangle",
                "args": [
                    {
                        "name": "ctrl",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ctrl: Any | None = None"
                    },
                    {
                        "name": "as_dict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_dict: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get dialog rectangle coordinates</p>\n<p>If <cite>ctrl</cite> is None then get coordinates from <cite>dialog</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param ctrl:</th><td class=\"field-body\">name of the window control object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">coordinates: left, top, right, bottom</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${left}</span><span class=\"p\">  </span><span class=\"c\">${top}</span><span class=\"p\">  </span><span class=\"c\">${right}</span><span class=\"p\">  </span><span class=\"c\">${bottom}=</span><span class=\"p\">  </span><span class=\"c\">Get Dialog Rectangle</span><span class=\"p\">\n</span><span class=\"c\">&amp;{coords}</span><span class=\"p\">  </span><span class=\"c\">Get Dialog Rectangle</span><span class=\"p\">  </span><span class=\"c\">as_dict=True</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">top=${coords.top} left=${coords.left}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get dialog rectangle coordinates",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1399
            },
            {
                "name": "Get Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "screenshot",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "screenshot: bool = False"
                    },
                    {
                        "name": "open_dialog",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "open_dialog: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get element by locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param screenshot:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">takes element screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param open_dialog:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if dialog should be reopened, default to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">element if element was identified, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">Get Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">Get Element</span><span class=\"p\">  </span><span class=\"c\">Result</span><span class=\"p\">      </span><span class=\"c\">screenshot=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Get element by locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1071
            },
            {
                "name": "Get Element Center",
                "args": [
                    {
                        "name": "element",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get element center coordinates</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param element:</th><td class=\"field-body\">dictionary of element items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">coordinates, x and y</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{element}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">${x}</span><span class=\"p\">  </span><span class=\"c\">${y}=</span><span class=\"p\">  </span><span class=\"c\">Get Element Center</span><span class=\"p\">  </span><span class=\"c\">${elements[0][0]}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get element center coordinates",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1433
            },
            {
                "name": "Get Element Rectangle",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "as_dict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_dict: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get value of element <cite>rectangle</cite> attribute.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_dict:</th><td class=\"field-body\">return values in a dictionary, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">(left, top, right, bottom) values if found, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${left}</span><span class=\"p\">  </span><span class=\"c\">${top}</span><span class=\"p\">  </span><span class=\"c\">${right}</span><span class=\"p\">  </span><span class=\"c\">${bottom}=</span><span class=\"p\">  </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">&amp;{coords}</span><span class=\"p\">  </span><span class=\"c\">Get Element Rectangle</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">as_dict=True</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">top=${coords.top} left=${coords.left}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get value of element `rectangle` attribute.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1144
            },
            {
                "name": "Get Element Rich Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get value of element <cite>rich text</cite> attribute.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>rich_text</cite> value if found, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${text}</span><span class=\"p\">  </span><span class=\"c\">Get Element Rich Text</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n",
                "shortdoc": "Get value of element `rich text` attribute.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1119
            },
            {
                "name": "Get Machine Name",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get machine name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">machine name as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${machine}</span><span class=\"p\">  </span><span class=\"c\">Get Machine Name</span>\n</pre>\n</div>\n",
                "shortdoc": "Get machine name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 106
            },
            {
                "name": "Get Memory Stats",
                "args": [
                    {
                        "name": "humanized",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "humanized: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get computer memory stats and return those in bytes\nor in humanized memory format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param humanized:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if False returns memory information in bytes, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">memory information in dictionary format</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">\n</span><span class=\"c\">&amp;{mem}</span><span class=\"p\">     </span><span class=\"c\">Get Memory Stats</span><span class=\"p\">   </span><span class=\"c\">humanized=False</span>\n</pre>\n</div>\n",
                "shortdoc": "Get computer memory stats and return those in bytes or in humanized memory format.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 234
            },
            {
                "name": "Get Open Applications",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get list of all open applications</p>\n<p>Returns a dictionary</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Executable</span><span class=\"p\">    </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">${app3}</span><span class=\"p\">    </span><span class=\"c\">Open File</span><span class=\"p\">          </span><span class=\"c\">/path/to/myfile.txt</span><span class=\"p\">\n</span><span class=\"c\">&amp;{apps}</span><span class=\"p\">    </span><span class=\"c\">Get Open Applications</span>\n</pre>\n</div>\n",
                "shortdoc": "Get list of all open applications",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 305
            },
            {
                "name": "Get Spaced String",
                "args": [
                    {
                        "name": "text",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Replace spaces in a text with <cite>pywinauto.keyboard</cite>\nspace characters <cite>{VK_SPACE}</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">replace spaces in this string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">Get Spaced String</span><span class=\"p\">   </span><span class=\"c\">My name is Bond</span><span class=\"p\">\n</span><span class=\"c\"># ${txt} = My{VK_SPACE}name{VK_SPACE}is{VK_SPACE}Bond\nSend Keys To Input</span><span class=\"p\">  </span><span class=\"c\">${txt}</span>\n</pre>\n</div>\n",
                "shortdoc": "Replace spaces in a text with `pywinauto.keyboard` space characters `{VK_SPACE}`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 540
            },
            {
                "name": "Get Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get text from element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">     </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">   </span><span class=\"c\">11</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">    </span><span class=\"c\">CalculatorResults</span><span class=\"p\">   </span><span class=\"c\">55</span><span class=\"p\">\n</span><span class=\"c\">&amp;{val}</span><span class=\"p\">       </span><span class=\"c\">Get Text</span><span class=\"p\">   </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n",
                "shortdoc": "Get text from element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 901
            },
            {
                "name": "Get Username",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get username of logged in user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">username as string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${user}</span><span class=\"p\">  </span><span class=\"c\">Get Username</span>\n</pre>\n</div>\n",
                "shortdoc": "Get username of logged in user",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 120
            },
            {
                "name": "Get Window Elements",
                "args": [
                    {
                        "name": "screenshot",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "screenshot: bool = False"
                    },
                    {
                        "name": "element_json",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "element_json: bool = False"
                    },
                    {
                        "name": "outline",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "outline: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get element information about all window dialog controls\nand their descendants.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param screenshot:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save element screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param element_json:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">save element json if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param outline:</th><td class=\"field-body\">highlight elements if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">all controls and all elements</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Get Window Elements</span><span class=\"p\">\n</span><span class=\"c\">Log Many</span><span class=\"p\">      </span><span class=\"c\">${elements[0]}</span><span class=\"p\">     </span><span class=\"c\"># list of all available locators\nLog Many</span><span class=\"p\">      </span><span class=\"c\">${elements[1]}</span><span class=\"p\">     </span><span class=\"c\"># list of matching elements\n&#64;{elements}</span><span class=\"p\">   </span><span class=\"c\">Get Window Elements</span><span class=\"p\">  </span><span class=\"c\">screenshot=True</span><span class=\"p\">  </span><span class=\"c\">element_json=True</span><span class=\"p\">  </span><span class=\"c\">outline=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Get element information about all window dialog controls and their descendants.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1480
            },
            {
                "name": "Get Window List",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get list of open windows</p>\n<p>Window dictionaries contain:</p>\n<ul class=\"simple\">\n<li>automation_id</li>\n<li>control_id</li>\n<li>title</li>\n<li>pid</li>\n<li>handle</li>\n<li>is_active</li>\n<li>keyboard_focus</li>\n<li>rectangle</li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of window dictionaries</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{windows}</span><span class=\"p\">    </span><span class=\"c\">Get Window List</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${window}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{windows}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">  </span><span class=\"c\">${window}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get list of open windows",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1940
            },
            {
                "name": "Is Element Enabled",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Is element enabled.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if enabled, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${res}=</span><span class=\"p\">   </span><span class=\"c\">Is Element Enabled</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n",
                "shortdoc": "Is element enabled.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1196
            },
            {
                "name": "Is Element Matching",
                "args": [
                    {
                        "name": "itemdict",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "itemdict: dict"
                    },
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "criteria",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "criteria: str"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Is element matching. Check if locator is found in <cite>any</cite> field\nor <cite>criteria</cite> field in the window items.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param itemDict:</th><td class=\"field-body\">dictionary of element items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param criteria:</th><td class=\"field-body\">criteria on which to match element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">whether to do reg exp match or not, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if element is matching locator and criteria, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Is element matching. Check if locator is found in `any` field or `criteria` field in the window items.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1385
            },
            {
                "name": "Is Element Visible",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Is element visible.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if visible, else False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${res}=</span><span class=\"p\">   </span><span class=\"c\">Is Element Visible</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span>\n</pre>\n</div>\n",
                "shortdoc": "Is element visible.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1180
            },
            {
                "name": "Kill Process",
                "args": [
                    {
                        "name": "process_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Kill process by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if succeeds False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process</span><span class=\"p\">    </span><span class=\"c\">${process.name()}</span>\n</pre>\n</div>\n",
                "shortdoc": "Kill process by name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 197
            },
            {
                "name": "Kill Process By Pid",
                "args": [
                    {
                        "name": "pid",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pid: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Kill process by pid</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span><span class=\"p\">\n</span><span class=\"c\">${status}</span><span class=\"p\">   </span><span class=\"c\">Kill Process By PID</span><span class=\"p\">   </span><span class=\"c\">${process.pid}</span>\n</pre>\n</div>\n",
                "shortdoc": "Kill process by pid",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 218
            },
            {
                "name": "Lock Screen",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Put windows into lock mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Lock Screen</span>\n</pre>\n</div>\n",
                "shortdoc": "Put windows into lock mode",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1736
            },
            {
                "name": "Log In",
                "args": [
                    {
                        "name": "username",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "username: str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    },
                    {
                        "name": "domain",
                        "types": [
                            "str"
                        ],
                        "defaultValue": ".",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "domain: str = ."
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Log into Windows <cite>domain</cite> with <cite>username</cite> and <cite>password</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">password of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param domain:</th><td class=\"field-body\">windows domain for the user, defaults to &quot;.&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">handle</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Log In</span><span class=\"p\">  </span><span class=\"c\">username=myname</span><span class=\"p\">  </span><span class=\"c\">password=mypassword</span><span class=\"p\">  </span><span class=\"c\">domain=company</span>\n</pre>\n</div>\n",
                "shortdoc": "Log into Windows `domain` with `username` and `password`.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1747
            },
            {
                "name": "Menu Select",
                "args": [
                    {
                        "name": "menuitem",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "menuitem: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Select item from menu</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param menuitem:</th><td class=\"field-body\">name of the menu item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">   </span><span class=\"c\">notepad</span><span class=\"p\">     </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Menu Select</span><span class=\"p\">             </span><span class=\"c\">File-&gt;Print</span>\n</pre>\n</div>\n",
                "shortdoc": "Select item from menu",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1212
            },
            {
                "name": "Minimize Dialog",
                "args": [
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Minimize window by its title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, default <cite>None</cite> means that\nactive window is going to be minimized</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">     </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Minimize Dialog</span><span class=\"p\">    </span><span class=\"c\"># Current window (Notepad)\nMinimize Dialog</span><span class=\"p\">    </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n",
                "shortdoc": "Minimize window by its title",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 594
            },
            {
                "name": "Mouse Click",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locator: str | None = None"
                    },
                    {
                        "name": "x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "x: int = 0"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "y: int = 0"
                    },
                    {
                        "name": "off_x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "off_x: int = 0"
                    },
                    {
                        "name": "off_y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "off_y: int = 0"
                    },
                    {
                        "name": "image",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "image: str | None = None"
                    },
                    {
                        "name": "method",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "locator",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "method: str = locator"
                    },
                    {
                        "name": "ctype",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ctype: str = click"
                    },
                    {
                        "name": "focus",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "center",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "focus: str = center"
                    },
                    {
                        "name": "tolerance",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tolerance: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mouse click <cite>locator</cite>, <cite>coordinates</cite>, or <cite>image</cite></p>\n<p>When using method <cite>locator</cite>,<span class=\"name\">image</span> or <cite>ocr</cite> mouse is clicked by default at\ncenter coordinates.</p>\n<p>Click types are:</p>\n<ul class=\"simple\">\n<li><cite>click</cite> normal left button mouse click</li>\n<li><cite>double</cite></li>\n<li><cite>right</cite></li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator on active window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">coordinate x on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">coordinate y on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_x:</th><td class=\"field-body\">offset x (used for locator and image clicks)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_y:</th><td class=\"field-body\">offset y (used for locator and image clicks)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to click on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">one of the available methods to mouse click, default &quot;locator&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">type of mouse click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param focus:</th><td class=\"field-body\">default point for element click is 'center', can be set to 'topleft'\nto click top left corner of the element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param tolerance:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">image matching tolerance between 0 and 1</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=coordinates</span><span class=\"p\">  </span><span class=\"c\">100</span><span class=\"p\">   </span><span class=\"c\">100</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=image</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">off_x=10</span><span class=\"p\">  </span><span class=\"c\">off_y=10</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">method=image</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">tolerance=0.8</span><span class=\"p\">\n</span><span class=\"c\">${elements}</span><span class=\"p\">  </span><span class=\"c\">${other}=</span><span class=\"p\">     </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">class:Button</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{elements}</span><span class=\"p\">\n    </span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${element}[visible]</span><span class=\"p\">   </span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">${element}</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">id:TrickyCheckbox</span><span class=\"p\">  </span><span class=\"c\">focus=topleft</span>\n</pre>\n</div>\n",
                "shortdoc": "Mouse click `locator`, `coordinates`, or `image`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 938
            },
            {
                "name": "Mouse Click Coords",
                "args": [
                    {
                        "name": "x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "x: int"
                    },
                    {
                        "name": "y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "y: int"
                    },
                    {
                        "name": "ctype",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ctype: str = click"
                    },
                    {
                        "name": "delay_time",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delay_time: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click at coordinates on desktop</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param x:</th><td class=\"field-body\">horizontal coordinate on the windows to click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param y:</th><td class=\"field-body\">vertical coordinate on the windows to click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">click type &quot;click&quot;, &quot;right&quot; or &quot;double&quot;, defaults to &quot;click&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param delay:</th><td class=\"field-body\">delay in seconds after, default is no delay</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=300</span><span class=\"p\">  </span><span class=\"c\">y=300</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click Coords</span><span class=\"p\">  </span><span class=\"c\">x=450</span><span class=\"p\">  </span><span class=\"c\">y=100</span><span class=\"p\">  </span><span class=\"c\">delay=5.0</span>\n</pre>\n</div>\n",
                "shortdoc": "Click at coordinates on desktop",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1048
            },
            {
                "name": "Mouse Click Image",
                "args": [
                    {
                        "name": "template",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "template: str"
                    },
                    {
                        "name": "off_x",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "off_x: int = 0"
                    },
                    {
                        "name": "off_y",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "off_y: int = 0"
                    },
                    {
                        "name": "ctype",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "click",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ctype: str = click"
                    },
                    {
                        "name": "tolerance",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tolerance: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click at template image on desktop</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to click on desktop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_x:</th><td class=\"field-body\">horizontal offset from top left corner to click on</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param off_y:</th><td class=\"field-body\">vertical offset from top left corner to click on</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctype:</th><td class=\"field-body\">type of mouse click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param tolerance:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">matching tolerance between 0 and 1</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">off_x=10</span><span class=\"p\">  </span><span class=\"c\">off_y=10</span><span class=\"p\">  </span><span class=\"c\">ctype=right</span><span class=\"p\">\n</span><span class=\"c\">Mouse Click</span><span class=\"p\">  </span><span class=\"c\">image=myimage.png</span><span class=\"p\">  </span><span class=\"c\">tolerance=0.8</span>\n</pre>\n</div>\n",
                "shortdoc": "Click at template image on desktop",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1016
            },
            {
                "name": "Open Application",
                "args": [
                    {
                        "name": "application",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "application: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open application by dispatch method</p>\n<p>This keyword is used to launch Microsoft applications like\nExcel, Word, Outlook and Powerpoint.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param application:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the application as <cite>str</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span>\n</pre>\n</div>\n",
                "shortdoc": "Open application by dispatch method",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 343
            },
            {
                "name": "Open Dialog",
                "args": [
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    },
                    {
                        "name": "highlight",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "highlight: bool = False"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 10"
                    },
                    {
                        "name": "existing_app",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "existing_app: bool = False"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open window by its title.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, defaults to active window if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param highlight:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">draw outline for window if True, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param existing_app:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set True if selecting window which library has already\naccessed, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">set True for inclusive window title search, default False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Dialog</span><span class=\"p\">       </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Open Dialog</span><span class=\"p\">       </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">   </span><span class=\"c\">highlight=True</span><span class=\"p\">   </span><span class=\"c\">timeout=5</span><span class=\"p\">\n</span><span class=\"c\">Open Dialog</span><span class=\"p\">       </span><span class=\"c\">Notepad</span><span class=\"p\">   </span><span class=\"c\">wildcard=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Open window by its title.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 670
            },
            {
                "name": "Open Executable",
                "args": [
                    {
                        "name": "executable",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "executable: str"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "windowtitle: str"
                    },
                    {
                        "name": "backend",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backend: str | None = None"
                    },
                    {
                        "name": "work_dir",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "work_dir: str | None = None"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open Windows executable. Window title name is required\nto get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param backend:</th><td class=\"field-body\">set Windows backend, default None means using\nlibrary default value</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param work_dir:</th><td class=\"field-body\">path to working directory, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">set True for inclusive window title search, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">notepad.exe</span><span class=\"p\">  </span><span class=\"c\">Notepad</span><span class=\"p\">   </span><span class=\"c\">wildcard=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Open Windows executable. Window title name is required to get handle on the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 416
            },
            {
                "name": "Open File",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 10"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open associated application when opening file</p>\n<p>Keyword <cite>Open Dialog</cite> is used if <cite>windowtitle</cite> is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">set True for inclusive window title search, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application id or None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open File</span><span class=\"p\">   </span><span class=\"c\">/path/to/myfile.txt</span>\n</pre>\n</div>\n",
                "shortdoc": "Open associated application when opening file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 372
            },
            {
                "name": "Open From Search",
                "args": [
                    {
                        "name": "executable",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "executable: str"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "windowtitle: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 10"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open application using Windows search dialog.\nWindow title name is required to get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">set True for inclusive window title search, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open From Search</span><span class=\"p\">  </span><span class=\"c\">calculator</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open From Search</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Notepad</span><span class=\"p\">  </span><span class=\"c\">wildcard=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Open application using Windows search dialog. Window title name is required to get handle on the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 490
            },
            {
                "name": "Open Using Run Dialog",
                "args": [
                    {
                        "name": "executable",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "executable: str"
                    },
                    {
                        "name": "windowtitle",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "windowtitle: str"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 10"
                    },
                    {
                        "name": "wildcard",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "wildcard: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open application using Windows run dialog.\nWindow title name is required to get handle on the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param executable:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the executable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time to wait for dialog to appear</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param wildcard:</th><td class=\"field-body\">set True for inclusive window title search, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">application instance id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Notepad</span><span class=\"p\">    </span><span class=\"c\">wildcard=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Open application using Windows run dialog. Window title name is required to get handle on the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 456
            },
            {
                "name": "Process Exists",
                "args": [
                    {
                        "name": "process_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_name: str"
                    },
                    {
                        "name": "strict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "strict: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Check if process exists by its name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search for this process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">defines how match is made, default <cite>True</cite>\nwhich means that process name needs to be exact match\nand <cite>False</cite> does inclusive matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">\n</span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process Exists</span><span class=\"p\">  </span><span class=\"c\">calc</span><span class=\"p\">  </span><span class=\"c\">strict=False</span>\n</pre>\n</div>\n",
                "shortdoc": "Check if process exists by its name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 151
            },
            {
                "name": "Process Id Exists",
                "args": [
                    {
                        "name": "pid",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pid: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Check if process exists by its id</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pid:</th><td class=\"field-body\">process identifier</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">process instance or False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Process ID Exists</span><span class=\"p\">  </span><span class=\"c\">4567</span><span class=\"p\">\n</span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${process}</span><span class=\"p\">  </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Process exists</span>\n</pre>\n</div>\n",
                "shortdoc": "Check if process exists by its id",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\OperatingSystem.py",
                "lineno": 177
            },
            {
                "name": "Put System To Sleep",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Put Windows into sleep mode</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Put System To Sleep</span>\n</pre>\n</div>\n",
                "shortdoc": "Put Windows into sleep mode",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1714
            },
            {
                "name": "Quit Application",
                "args": [
                    {
                        "name": "app_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "app_id: str | None = None"
                    },
                    {
                        "name": "send_keys",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "send_keys: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Quit an application by application id or\nactive application if <cite>app_id</cite> is None.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">application_id, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param send_keys:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if ALT+F4 should be used to quit, default False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">   </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">   </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Quit Application</span><span class=\"p\">  </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n",
                "shortdoc": "Quit an application by application id or active application if `app_id` is None.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 805
            },
            {
                "name": "Refresh Window",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get controls and elements for current windows.</p>\n<p>Should be called always when window content changes on\nWindows desktop.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">controls (list) and elements (list)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get controls and elements for current windows.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1987
            },
            {
                "name": "Restore Dialog",
                "args": [
                    {
                        "name": "windowtitle",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "windowtitle: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Restore window by its title</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param windowtitle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the window, default <cite>None</cite> means that\nactive window is going to be restored</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Using Run Dialog</span><span class=\"p\">  </span><span class=\"c\">notepad</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Minimize Dialog</span><span class=\"p\">\n</span><span class=\"c\">Sleep</span><span class=\"p\">             </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">Restore Dialog</span><span class=\"p\">\n</span><span class=\"c\">Sleep</span><span class=\"p\">             </span><span class=\"c\">1s</span><span class=\"p\">\n</span><span class=\"c\">Restore Dialog</span><span class=\"p\">    </span><span class=\"c\">Untitled - Notepad</span>\n</pre>\n</div>\n",
                "shortdoc": "Restore window by its title",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 617
            },
            {
                "name": "Screenshot",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "element",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "element: dict | None = None"
                    },
                    {
                        "name": "ctrl",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ctrl: Any | None = None"
                    },
                    {
                        "name": "desktop",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "desktop: bool = False"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save screenshot into filename.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param element:</th><td class=\"field-body\">take element screenshot, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param ctrl:</th><td class=\"field-body\">take control screenshot, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param desktop:</th><td class=\"field-body\">take desktop screenshot if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">overwrite existing image (deprecated, always True)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{element}</span><span class=\"p\">   </span><span class=\"c\">Find Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">element.png</span><span class=\"p\">   </span><span class=\"c\">${elements[0][0]}</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">desktop.png</span><span class=\"p\">   </span><span class=\"c\">desktop=True</span><span class=\"p\">\n</span><span class=\"c\">Screenshot</span><span class=\"p\">   </span><span class=\"c\">desktop.png</span><span class=\"p\">   </span><span class=\"c\">desktop=True</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Save screenshot into filename.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1586
            },
            {
                "name": "Send Keys",
                "args": [
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keys: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send keys into active windows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to send</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Send Keys</span><span class=\"p\">        </span><span class=\"c\">2{+}3{=}</span>\n</pre>\n</div>\n",
                "shortdoc": "Send keys into active windows.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 886
            },
            {
                "name": "Send Keys To Input",
                "args": [
                    {
                        "name": "keys_to_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keys_to_type: str"
                    },
                    {
                        "name": "with_enter",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "with_enter: bool = True"
                    },
                    {
                        "name": "send_delay",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "send_delay: float = 0.5"
                    },
                    {
                        "name": "enter_delay",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "1.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "enter_delay: float = 1.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send keys to windows and add ENTER if <cite>with_enter</cite> is True</p>\n<p>At the end of send_keys there is by default 0.5 second delay.\nAt the end of ENTER there is by default 1.5 second delay.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param keys_to_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keys to type into Windows</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_enter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">send ENTER if <cite>with_enter</cite> is True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param send_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delay after send_keys</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param enter_delay:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delay after ENTER</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">Get Spaced String</span><span class=\"p\">   </span><span class=\"c\">My name is Bond, James Bond</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">${txt}</span><span class=\"p\">    </span><span class=\"c\">with_enter=False</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">{ENTER}THE</span><span class=\"p\">   </span><span class=\"c\">send_delay=5.0</span><span class=\"p\">  </span><span class=\"c\">with_enter=False</span><span class=\"p\">\n</span><span class=\"c\">Send Keys To Input</span><span class=\"p\">  </span><span class=\"c\">{VK_SPACE}-{VK_SPACE}END</span><span class=\"p\">   </span><span class=\"c\">enter_delay=5.0</span>\n</pre>\n</div>\n",
                "shortdoc": "Send keys to windows and add ENTER if `with_enter` is True",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 557
            },
            {
                "name": "Set Automation Speed",
                "args": [
                    {
                        "name": "speed",
                        "types": [
                            "Speed"
                        ],
                        "defaultValue": "DEFAULT",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "speed: Speed = DEFAULT"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set global automation timings</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param speed:</th><td class=\"field-body\">possible values 'default', 'fast' or 'slow'</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set global automation timings",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 2027
            },
            {
                "name": "Set Windows Backend",
                "args": [
                    {
                        "name": "backend",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "backend: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Windows backend which is used to interact with Windows\napplications</p>\n<p>Allowed values defined by <cite>SUPPORTED_BACKENDS</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param backend:</th><td class=\"field-body\">name of the backend to use</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Windows Backend</span><span class=\"p\">   </span><span class=\"c\">uia</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Set Windows Backend</span><span class=\"p\">   </span><span class=\"c\">win32</span><span class=\"p\">\n</span><span class=\"c\">Open Executable</span><span class=\"p\">   </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n",
                "shortdoc": "Set Windows backend which is used to interact with Windows applications",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 219
            },
            {
                "name": "Switch To Application",
                "args": [
                    {
                        "name": "app_id",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "app_id: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Switch to application by id.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param app_id:</th><td class=\"field-body\">application's id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if application is not found by given id</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${app1}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Excel</span><span class=\"p\">\n</span><span class=\"c\">${app2}</span><span class=\"p\">    </span><span class=\"c\">Open Application</span><span class=\"p\">   </span><span class=\"c\">Word</span><span class=\"p\">\n</span><span class=\"c\">Switch To Application</span><span class=\"p\">   </span><span class=\"c\">${app1}</span>\n</pre>\n</div>\n",
                "shortdoc": "Switch to application by id.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 279
            },
            {
                "name": "Type Into",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keys: str"
                    },
                    {
                        "name": "empty_field",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "empty_field: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Type keys into element matched by given locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param empty_field:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if field should be emptied before typing, default False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">calc.exe</span><span class=\"p\">  </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">        </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">11</span><span class=\"p\">\n</span><span class=\"c\">Type Into</span><span class=\"p\">        </span><span class=\"c\">CalculatorResults</span><span class=\"p\">  </span><span class=\"c\">22</span><span class=\"p\">  </span><span class=\"c\">empty_field=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Type keys into element matched by given locator.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 862
            },
            {
                "name": "Type Keys",
                "args": [
                    {
                        "name": "keys",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keys: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Type keys into active window element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">list of keys to type</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Executable</span><span class=\"p\">  </span><span class=\"c\">notepad.exe</span><span class=\"p\">  </span><span class=\"c\">Untitled - Notepad</span><span class=\"p\">\n</span><span class=\"c\">Type Keys</span><span class=\"p\">   </span><span class=\"c\">My text</span>\n</pre>\n</div>\n",
                "shortdoc": "Type keys into active window element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 845
            },
            {
                "name": "Wait For Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "search_criteria",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "search_criteria: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "30.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 30.0"
                    },
                    {
                        "name": "interval",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "2.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "interval: float = 2.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for element to appear into the window.</p>\n<p>Can return 1 or more elements matching locator, or raises\n<cite>ElementNotFoundError</cite> if element is not found within timeout.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">name of the locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_criteria:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">criteria by which element is matched</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">defines how long to wait for element to appear,\ndefaults to 30.0 seconds</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">how often to poll for element,\ndefaults to 2.0 seconds (minimum is 0.5 seconds)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{elements}</span><span class=\"p\">  </span><span class=\"c\">Wait For Element</span><span class=\"p\">  </span><span class=\"c\">CalculatorResults</span><span class=\"p\">\n</span><span class=\"c\">&#64;{elements}</span><span class=\"p\">  </span><span class=\"c\">Wait For Element</span><span class=\"p\">  </span><span class=\"c\">Results</span><span class=\"p\">   </span><span class=\"c\">timeout=10</span><span class=\"p\">  </span><span class=\"c\">interval=1.5</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for element to appear into the window.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Desktop\\Windows.py",
                "lineno": 1235
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "Speed",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Values for pywinauto Timings</p>\n</div>\n",
                    "members": [
                        {
                            "name": "DEFAULT",
                            "value": "1"
                        },
                        {
                            "name": "SLOW",
                            "value": "2"
                        },
                        {
                            "name": "FAST",
                            "value": "3"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Dialogs": {
        "name": "RPA.Dialogs",
        "doc": "<div class=\"document\">\n<p>The <cite>Dialogs</cite> library provides a way to display information to a user\nand request input while a robot is running. It allows building processes\nthat require human interaction.</p>\n<p>Some examples of use-cases could be the following:</p>\n<ul class=\"simple\">\n<li>Displaying generated files after an execution is finished</li>\n<li>Displaying dynamic and user-friendly error messages</li>\n<li>Requesting passwords or other personal information</li>\n<li>Automating based on files created by the user</li>\n</ul>\n<p><strong>Workflow</strong></p>\n<p>The library is used to create dialogs, i.e. windows, that can be composed\non-the-fly based on the current state of the execution.</p>\n<p>The content of the dialog is defined by calling relevant keywords\nsuch as <tt class=\"docutils literal\">Add text</tt> or <tt class=\"docutils literal\">Add file input</tt>. When the dialog is opened\nthe content is generated based on the previous keywords.</p>\n<p>Depending on the way the dialog is started, the execution will either\nblock or continue while the dialog is open. During this time the user\ncan freely edit any possible input fields or handle other tasks.</p>\n<p>After the user has successfully submitted the dialog, any possible\nentered input will be returned as a result. The user also has the option\nto abort by closing the dialog window forcefully.</p>\n<p><strong>Results</strong></p>\n<p>Each input field has a required <tt class=\"docutils literal\">name</tt> argument that controls what\nthe value will be called in the result object. Each input name should be\nunique, and must not be called <tt class=\"docutils literal\">submit</tt> as that is reserved for the submit\nbutton value.</p>\n<p>A result object is a Robot Framework DotDict, where each key\nis the name of the input field and the value is what the user entered.\nThe data type of each field depends on the input. For instance,\na text input will have a string, a checkbox will have a boolean, and\na file input will have a list of paths.</p>\n<p>If the user closed the window before submitting or there was an internal\nerror, the library will raise an exception and the result values will\nnot be available.</p>\n<p><strong>Examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Success dialog</span><span class=\"p\">\n    </span><span class=\"c\">Add icon</span><span class=\"p\">      </span><span class=\"c\">Success</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">   </span><span class=\"c\">Your orders have been processed</span><span class=\"p\">\n    </span><span class=\"c\">Add files</span><span class=\"p\">     </span><span class=\"c\">*.txt</span><span class=\"p\">\n    </span><span class=\"c\">Run dialog</span><span class=\"p\">    </span><span class=\"c\">title=Success</span><span class=\"p\">\n\n</span><span class=\"c\">Failure dialog</span><span class=\"p\">\n    </span><span class=\"c\">Add icon</span><span class=\"p\">      </span><span class=\"c\">Failure</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">   </span><span class=\"c\">There was an error</span><span class=\"p\">\n    </span><span class=\"c\">Add text</span><span class=\"p\">      </span><span class=\"c\">The assistant failed to login to the Enterprise portal</span><span class=\"p\">\n    </span><span class=\"c\">Add link</span><span class=\"p\">      </span><span class=\"c\">https://robocorp.com/docs</span><span class=\"p\">    </span><span class=\"c\">label=Troubleshooting guide</span><span class=\"p\">\n    </span><span class=\"c\">Run dialog</span><span class=\"p\">    </span><span class=\"c\">title=Failure</span><span class=\"p\">\n\n</span><span class=\"c\">Large dialog</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">A real chonker</span><span class=\"p\">   </span><span class=\"c\">size=large</span><span class=\"p\">\n    </span><span class=\"c\">Add image</span><span class=\"p\">      </span><span class=\"c\">fat-cat.jpeg</span><span class=\"p\">\n    </span><span class=\"c\">Run dialog</span><span class=\"p\">     </span><span class=\"c\">title=Large</span><span class=\"p\">    </span><span class=\"c\">height=1024</span><span class=\"p\">    </span><span class=\"c\">width=1024</span><span class=\"p\">\n\n</span><span class=\"c\">Confirmation dialog</span><span class=\"p\">\n    </span><span class=\"c\">Add icon</span><span class=\"p\">      </span><span class=\"c\">Warning</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">   </span><span class=\"c\">Delete user ${username}?</span><span class=\"p\">\n    </span><span class=\"c\">Add submit buttons</span><span class=\"p\">    </span><span class=\"c\">buttons=No,Yes</span><span class=\"p\">    </span><span class=\"c\">default=Yes</span><span class=\"p\">\n    </span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n    </span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">$result.submit == &quot;Yes&quot;</span><span class=\"p\">\n        </span><span class=\"c\">Delete user</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n\n</span><span class=\"c\">Input form dialog</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">       </span><span class=\"c\">Send feedback</span><span class=\"p\">\n    </span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">    </span><span class=\"c\">label=E-mail address</span><span class=\"p\">\n    </span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">message</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">label=Feedback</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">placeholder=Enter feedback here</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">rows=5</span><span class=\"p\">\n    </span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n    </span><span class=\"c\">Send feedback message</span><span class=\"p\">    </span><span class=\"c\">${result.email}</span><span class=\"p\">  </span><span class=\"c\">${result.message}</span><span class=\"p\">\n\n</span><span class=\"c\">Dialog as progress indicator</span><span class=\"p\">\n    </span><span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">Please wait while I open a browser</span><span class=\"p\">\n    </span><span class=\"c\">${dialog}=</span><span class=\"p\">     </span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Please wait</span><span class=\"p\">    </span><span class=\"c\">on_top=${TRUE}</span><span class=\"p\">\n    </span><span class=\"c\">Open available browser</span><span class=\"p\">    </span><span class=\"c\">https://robocorp.com</span><span class=\"p\">\n    </span><span class=\"c\">Close dialog</span><span class=\"p\">   </span><span class=\"c\">${dialog}</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:02",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
        "lineno": 18,
        "tags": [
            "dialog",
            "input"
        ],
        "inits": [],
        "keywords": [
            {
                "name": "Add checkbox",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "label: str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a checkbox element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label text for checkbox</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Default checked state</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a checkbox that indicates a true or false value.\nThe selection will be available in the <tt class=\"docutils literal\">name</tt> field of the result,\nand the <tt class=\"docutils literal\">label</tt> text will be shown next to the checkbox.</p>\n<p>The boolean <tt class=\"docutils literal\">default</tt> value will define the initial checked\nstate of the element.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Enable features</span><span class=\"p\">\n</span><span class=\"c\">Add checkbox</span><span class=\"p\">    </span><span class=\"c\">name=vault</span><span class=\"p\">        </span><span class=\"c\">label=Enable vault</span><span class=\"p\">       </span><span class=\"c\">default=True</span><span class=\"p\">\n</span><span class=\"c\">Add checkbox</span><span class=\"p\">    </span><span class=\"c\">name=triggers</span><span class=\"p\">     </span><span class=\"c\">label=Enable triggers</span><span class=\"p\">    </span><span class=\"c\">default=False</span><span class=\"p\">\n</span><span class=\"c\">Add checkbox</span><span class=\"p\">    </span><span class=\"c\">name=assistants</span><span class=\"p\">   </span><span class=\"c\">label=Enable assistants</span><span class=\"p\">  </span><span class=\"c\">default=True</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">      </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">    </span><span class=\"c\">$result.vault</span><span class=\"p\">\n    </span><span class=\"c\">Enable vault</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a checkbox element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 783
            },
            {
                "name": "Add Date Input",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "date",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: date | str | None = None"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a date input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of the result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">The default set date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for the date input field</td>\n</tr>\n</tbody>\n</table>\n<p>Displays a date input widget. The selection the user makes will be available\nas a <tt class=\"docutils literal\">date</tt> object in the <tt class=\"docutils literal\">name</tt> field of the result.\nThe <tt class=\"docutils literal\">default</tt> argument can be a pre-set date as object or string in\n&quot;YYYY-MM-DD&quot; format, otherwise the current date is used.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">       </span><span class=\"c\">Enter your birthdate</span><span class=\"p\">\n</span><span class=\"c\">Add Date Input</span><span class=\"p\">    </span><span class=\"c\">birthdate</span><span class=\"p\">    </span><span class=\"c\">default=1993-04-26</span><span class=\"p\">\n</span><span class=\"c\">${result} =</span><span class=\"p\">       </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">User birthdate year should be: ${result.birthdate.year}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a date input element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 683
            },
            {
                "name": "Add drop-down",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "options",
                        "types": [
                            "List[str]",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "options: List[str] | str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: str | None = None"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a drop-down element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">List of drop-down options</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">The default selection</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for input field</td>\n</tr>\n</tbody>\n</table>\n<p>Creates a drop-down menu with the given <tt class=\"docutils literal\">options</tt>. The selection\nthe user makes will be available in the <tt class=\"docutils literal\">name</tt> field of the result.</p>\n<p>The <tt class=\"docutils literal\">default</tt> argument can be one of the defined options,\nand the dialog automatically selects that option for the input.</p>\n<p>A custom <tt class=\"docutils literal\">label</tt> text can also be added.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Select user type</span><span class=\"p\">\n</span><span class=\"c\">Add drop-down</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=user_type</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">options=Admin,Maintainer,Operator</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">default=Operator</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">label=User type</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">      </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">User type should be: ${result.user_type}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a drop-down element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 634
            },
            {
                "name": "Add file",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a file element, which links to a local file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">The path to the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">A custom label text for the file</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a button which opens a local file with the corresponding\ndefault application. Can be used for instance to display generated\nfiles from the robot to the end-user.</p>\n<p>Optionally a custom <tt class=\"docutils literal\">label</tt> can be given for the button text.\nBy default uses the filename of the linked file.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${path}=</span><span class=\"p\">   </span><span class=\"c\">Generate order files</span><span class=\"p\">\n</span><span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">Current orders</span><span class=\"p\">\n</span><span class=\"c\">Add file</span><span class=\"p\">    </span><span class=\"c\">${path}</span><span class=\"p\">    </span><span class=\"c\">label=Current</span><span class=\"p\">\n</span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a file element, which links to a local file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 307
            },
            {
                "name": "Add file input",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    },
                    {
                        "name": "destination",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "destination: str | None = None"
                    },
                    {
                        "name": "file_type",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_type: str | None = None"
                    },
                    {
                        "name": "multiple",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "multiple: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a file input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for input field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">Default source directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Target directory for selected files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Accepted file types</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param multiple:</th><td class=\"field-body\">Allow selecting multiple files</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a native file selection dialog for inputting one or more files.\nThe list of selected files will be available in the <tt class=\"docutils literal\">name</tt> field\nof the result.</p>\n<p>By default opens up in the user's home directory, but it can be\nset to a custom path with the <tt class=\"docutils literal\">source</tt> argument.</p>\n<p>If the <tt class=\"docutils literal\">destination</tt> argument is not set, it returns the original\npaths to the selected files. If the <tt class=\"docutils literal\">destination</tt> directory\nis set, the files are copied there first and the new paths are\nreturned.</p>\n<p>The argument <tt class=\"docutils literal\">file_type</tt> restricts the possible file extensions\nthat the user can select. The format of the argument is as follows:\n<tt class=\"docutils literal\">Description text <span class=\"pre\">(*.ext1;*.ext2;...)</span></tt>. For instance, an argument\nto limit options to Excel files could be: <tt class=\"docutils literal\">Excel files <span class=\"pre\">(*.xls;*.xlsx)</span></tt>.</p>\n<p>To allow selecting more than one file, the <tt class=\"docutils literal\">multiple</tt> argument\ncan be enabled.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># This can be any one file\nAdd file input</span><span class=\"p\">    </span><span class=\"c\">name=anyting</span><span class=\"p\">\n\n</span><span class=\"c\"># This can be multiple files\nAdd file input</span><span class=\"p\">    </span><span class=\"c\">name=multiple</span><span class=\"p\">  </span><span class=\"c\">multiple=True</span><span class=\"p\">\n\n</span><span class=\"c\"># This opens the select dialog to a custom folder\nAdd file input</span><span class=\"p\">    </span><span class=\"c\">name=src</span><span class=\"p\">       </span><span class=\"c\">source=C:\\Temp\\Output\\</span><span class=\"p\">\n\n</span><span class=\"c\"># This copies selected files to a custom folder\nAdd file input</span><span class=\"p\">    </span><span class=\"c\">name=dest</span><span class=\"p\">      </span><span class=\"c\">destination=%{ROBOT_ROOT}</span><span class=\"p\">\n\n</span><span class=\"c\"># This restricts files to certain types\nAdd file input</span><span class=\"p\">    </span><span class=\"c\">name=types</span><span class=\"p\">     </span><span class=\"c\">file_type=PDF files (*.pdf)</span><span class=\"p\">\n\n</span><span class=\"c\"># Every file input result is a list of paths\n${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${path}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{result.multiple}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Selected file: ${path}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a file input element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 558
            },
            {
                "name": "Add files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add multiple file elements according to the given file pattern</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">File matching pattern</td>\n</tr>\n</tbody>\n</table>\n<p>See the keyword <tt class=\"docutils literal\">Add file</tt> for information about the inserted\nelement itself.</p>\n<p>The keyword uses Unix-style glob patterns for finding matching files,\nand the supported pattern expressions are as follow:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"17%\" />\n<col width=\"83%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Pattern</th>\n<th class=\"head\">Meaning</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td><tt class=\"docutils literal\">*</tt></td>\n<td>Match everything</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">?</tt></td>\n<td>Match any single character</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[seq]</tt></td>\n<td>Match any character in seq</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[!seq]</tt></td>\n<td>Match any character not in seq</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">**</tt></td>\n<td>Match all files, directories, and subdirectories</td>\n</tr>\n</tbody>\n</table>\n<p>If a filename has any of these special characters, they\ncan be escaped by wrapping them with square brackets.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Add all excel files\nAdd files</span><span class=\"p\">    </span><span class=\"c\">*.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Add all log files in any subdirectory\nAdd files</span><span class=\"p\">    </span><span class=\"c\">**/*.log</span><span class=\"p\">\n\n</span><span class=\"c\"># Add all PDFs between order0 and order9\nAdd files</span><span class=\"p\">    </span><span class=\"c\">order[0-9].pdf</span>\n</pre>\n</div>\n",
                "shortdoc": "Add multiple file elements according to the given file pattern",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 348
            },
            {
                "name": "Add heading",
                "args": [
                    {
                        "name": "heading",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "heading: str"
                    },
                    {
                        "name": "size",
                        "types": [
                            "Size"
                        ],
                        "defaultValue": "Medium",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "size: Size = Medium"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a centered heading text element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param heading:</th><td class=\"field-body\">The text content for the heading</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">The size of the heading</td>\n</tr>\n</tbody>\n</table>\n<p>Supported <tt class=\"docutils literal\">size</tt> values are Small, Medium, and Large. By default uses\nthe value Medium.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">User information</span><span class=\"p\">  </span><span class=\"c\">size=Large</span><span class=\"p\">\n</span><span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Location</span><span class=\"p\">          </span><span class=\"c\">size=Small</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">  </span><span class=\"c\">address</span><span class=\"p\">           </span><span class=\"c\">label=User address</span><span class=\"p\">\n</span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a centered heading text element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 167
            },
            {
                "name": "Add hidden input",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a hidden input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result feild</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value for input</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a special hidden result field that is not visible\nto the user and always contains the given static value.</p>\n<p>Can be used to keep user input together with already known\nvalues such as user IDs, or to ensure that dialogs with differing\nelements all have the same fields in results.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add hidden input</span><span class=\"p\">   </span><span class=\"c\">user_id</span><span class=\"p\">   </span><span class=\"c\">${USER_ID}</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">     </span><span class=\"c\">username</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">         </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Enter user information</span><span class=\"p\">    </span><span class=\"c\">${result.user_id}</span><span class=\"p\">    </span><span class=\"c\">${result.username}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a hidden input element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 523
            },
            {
                "name": "Add icon",
                "args": [
                    {
                        "name": "variant",
                        "types": [
                            "Icon"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "variant: Icon"
                    },
                    {
                        "name": "size",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "48",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "size: int = 48"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add an icon element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param variant:</th><td class=\"field-body\">The icon type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">The size of the icon</td>\n</tr>\n</tbody>\n</table>\n<p>Adds an icon which can be used to indicate status\nor the type of dialog being presented.</p>\n<p>The currently supported icon types are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"21%\" />\n<col width=\"79%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Success</td>\n<td>A green check mark</td>\n</tr>\n<tr><td>Warning</td>\n<td>An orange warning triangle</td>\n</tr>\n<tr><td>Failure</td>\n<td>A red cross or X mark</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">size</tt> of the icon can also be changed,\nto a given height/width of pixels.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add icon</span><span class=\"p\">              </span><span class=\"c\">Warning</span><span class=\"p\">    </span><span class=\"c\">size=64</span><span class=\"p\">\n</span><span class=\"c\">Add heading</span><span class=\"p\">           </span><span class=\"c\">Do you want to delete this order?</span><span class=\"p\">\n</span><span class=\"c\">Add submit buttons</span><span class=\"p\">    </span><span class=\"c\">buttons=No,Yes</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add an icon element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 393
            },
            {
                "name": "Add image",
                "args": [
                    {
                        "name": "url_or_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url_or_path: str"
                    },
                    {
                        "name": "width",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width: int | None = None"
                    },
                    {
                        "name": "height",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "height: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add an image element, from a local file or remote URL</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param url_or_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The location of the image</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">The static width of the image, in pixels</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param height:</th><td class=\"field-body\">The static height of the image, in pixels</td>\n</tr>\n</tbody>\n</table>\n<p>Adds an inline image to the dialog, which can either\npoint to a local file path on the executing machine or to\na remote URL.</p>\n<p>By default the image is resized to fit the width of the dialog\nwindow, but the width and/or height can be explicitly defined\nto a custom value. If only one of the dimensions is given,\nthe other is automatically changed to maintain the correct aspect ratio.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add image</span><span class=\"p\">      </span><span class=\"c\">company-logo.png</span><span class=\"p\">\n</span><span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">To start, please press the Continue button</span><span class=\"p\">   </span><span class=\"c\">size=Small</span><span class=\"p\">\n</span><span class=\"c\">Add submit buttons</span><span class=\"p\">    </span><span class=\"c\">Continue</span><span class=\"p\">\n</span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add an image element, from a local file or remote URL",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 267
            },
            {
                "name": "Add link",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add an external URL link element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param url:</th><td class=\"field-body\">The URL for the link</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">A custom label text for the link</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a clickable link element, which opens the user's default\nbrowser to the given <tt class=\"docutils literal\">url</tt>. Optionally a <tt class=\"docutils literal\">label</tt> can be given\nwhich is shown as the link text, instead of the raw URL.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">An error occurred</span><span class=\"p\">\n</span><span class=\"c\">Add text</span><span class=\"p\">       </span><span class=\"c\">See link for documentation</span><span class=\"p\">\n</span><span class=\"c\">Add link</span><span class=\"p\">       </span><span class=\"c\">https://robocorp.com/docs</span><span class=\"p\">    </span><span class=\"c\">label=Troubleshooting</span><span class=\"p\">\n</span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add an external URL link element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 235
            },
            {
                "name": "Add password input",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    },
                    {
                        "name": "placeholder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "placeholder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a password input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param placeholder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Placeholder text in input field</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a text field that hides the user's input. The entered\ncontent will be available in the <tt class=\"docutils literal\">name</tt> field of the result.</p>\n<p>For customizing the look of the input, the <tt class=\"docutils literal\">label</tt> text can be given\nto add a descriptive label and the <tt class=\"docutils literal\">placholder</tt> text can be given\nto act as an example of the input value.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">Change password</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">        </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">label=Current username</span><span class=\"p\">\n</span><span class=\"c\">Add password input</span><span class=\"p\">    </span><span class=\"c\">password</span><span class=\"p\">    </span><span class=\"c\">label=New password</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Change user password</span><span class=\"p\">    </span><span class=\"c\">${result.username}</span><span class=\"p\">  </span><span class=\"c\">${result.password}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a password input element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 484
            },
            {
                "name": "Add radio buttons",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "options",
                        "types": [
                            "List[str]",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "options: List[str] | str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: str | None = None"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add radio button elements</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">List of drop-down options</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">The default selection</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for input field</td>\n</tr>\n</tbody>\n</table>\n<p>Creates a set of radio buttons with the given <tt class=\"docutils literal\">options</tt>. The selection\nthe user makes will be available in the <tt class=\"docutils literal\">name</tt> field of the result.</p>\n<p>The <tt class=\"docutils literal\">default</tt> argument can be one of the defined options,\nand the dialog automatically selects that option for the input.</p>\n<p>A custom <tt class=\"docutils literal\">label</tt> text can also be added.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Select user type</span><span class=\"p\">\n</span><span class=\"c\">Add radio buttons</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=user_type</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">options=Admin,Maintainer,Operator</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">default=Operator</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">label=User type</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">      </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">User type should be: ${result.user_type}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add radio button elements",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 735
            },
            {
                "name": "Add submit buttons",
                "args": [
                    {
                        "name": "buttons",
                        "types": [
                            "List[str]",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "buttons: List[str] | str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add custom submit buttons</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param buttons:</th><td class=\"field-body\">Submit button options</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">The primary button</td>\n</tr>\n</tbody>\n</table>\n<p>The dialog automatically creates a button for closing itself.\nIf there are no input fields, the button will say &quot;Close&quot;.\nIf there are one or more input fields, the button will say &quot;Submit&quot;.</p>\n<p>If the submit button should have a custom label or there should be\nmultiple options to choose from  when submitting, this keyword can\nbe used to replace the automatically generated ones.</p>\n<p>The result field will always be called <tt class=\"docutils literal\">submit</tt> and will contain\nthe pressed button text as a value.</p>\n<p>If one of the custom <tt class=\"docutils literal\">options</tt> should be the preferred option,\nthe <tt class=\"docutils literal\">default</tt> argument controls which one is highlighted with\nan accent color.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add icon</span><span class=\"p\">      </span><span class=\"c\">Warning</span><span class=\"p\">\n</span><span class=\"c\">Add heading</span><span class=\"p\">   </span><span class=\"c\">Delete user ${username}?</span><span class=\"p\">\n</span><span class=\"c\">Add submit buttons</span><span class=\"p\">    </span><span class=\"c\">buttons=No,Yes</span><span class=\"p\">    </span><span class=\"c\">default=Yes</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">$result.submit == &quot;Yes&quot;</span><span class=\"p\">\n    </span><span class=\"c\">Delete user</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Add custom submit buttons",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 825
            },
            {
                "name": "Add text",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "size",
                        "types": [
                            "Size"
                        ],
                        "defaultValue": "Medium",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "size: Size = Medium"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a text paragraph element, for larger bodies of text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">The text content for the paragraph</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">The size of the text</td>\n</tr>\n</tbody>\n</table>\n<p>Supported <tt class=\"docutils literal\">size</tt> values are Small, Medium, and Large. By default uses\nthe value Medium.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">   </span><span class=\"c\">An error occurred</span><span class=\"p\">\n</span><span class=\"c\">Add text</span><span class=\"p\">      </span><span class=\"c\">There was an error while requesting user information</span><span class=\"p\">\n</span><span class=\"c\">Add text</span><span class=\"p\">      </span><span class=\"c\">${error}</span><span class=\"p\">   </span><span class=\"c\">size=Small</span><span class=\"p\">\n</span><span class=\"c\">Run dialog</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a text paragraph element, for larger bodies of text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 201
            },
            {
                "name": "Add text input",
                "args": [
                    {
                        "name": "name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name: str"
                    },
                    {
                        "name": "label",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "label: str | None = None"
                    },
                    {
                        "name": "placeholder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "placeholder: str | None = None"
                    },
                    {
                        "name": "rows",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "rows: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add a text input element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of result field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param label:</th><td class=\"field-body\">Label for field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param placeholder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Placeholder text in input field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param rows:</th><td class=\"field-body\">Number of input rows</td>\n</tr>\n</tbody>\n</table>\n<p>Adds a text field that can be filled by the user. The entered\ncontent will be available in the <tt class=\"docutils literal\">name</tt> field of the result.</p>\n<p>For customizing the look of the input, the <tt class=\"docutils literal\">label</tt> text can be given\nto add a descriptive label and the <tt class=\"docutils literal\">placholder</tt> text can be given\nto act as an example of the input value.</p>\n<p>If the <tt class=\"docutils literal\">rows</tt> argument is given as a number, the input is converted\ninto a larger text area input with the given amount of rows by default.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">    </span><span class=\"c\">Send feedback</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">    </span><span class=\"c\">label=E-mail address</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">message</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">label=Feedback</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">placeholder=Enter feedback here</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">rows=5</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Send feedback message</span><span class=\"p\">    </span><span class=\"c\">${result.email}</span><span class=\"p\">  </span><span class=\"c\">${result.message}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add a text input element",
                "tags": [
                    "input"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 436
            },
            {
                "name": "Clear elements",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Remove all previously defined elements and start from a clean state</p>\n<p>By default this is done automatically when a dialog is created.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Please input user information</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${user}</span><span class=\"p\">   </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{users}</span><span class=\"p\">\n    </span><span class=\"c\">Run dialog</span><span class=\"p\">    </span><span class=\"c\">clear=False</span><span class=\"p\">\n    </span><span class=\"c\">Process page</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">Clear elements</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all previously defined elements and start from a clean state",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 148
            },
            {
                "name": "Close all dialogs",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close all dialogs opened by this library.</p>\n<p>See the keyword <tt class=\"docutils literal\">Close dialog</tt> for further information\nabout usage and implications.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${dialog1}=</span><span class=\"p\">    </span><span class=\"c\">Show dialog</span><span class=\"p\">\n</span><span class=\"c\">A keyword which runs during the dialog</span><span class=\"p\">\n\n</span><span class=\"c\">${dialog2}=</span><span class=\"p\">    </span><span class=\"c\">Show dialog</span><span class=\"p\">\n</span><span class=\"c\">A keyword that fails during the dialog</span><span class=\"p\">\n\n</span><span class=\"c\"># Close all dialogs without knowing which have been created\n[Teardown]</span><span class=\"p\">    </span><span class=\"c\">Close all dialogs</span>\n</pre>\n</div>\n",
                "shortdoc": "Close all dialogs opened by this library.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 1082
            },
            {
                "name": "Close dialog",
                "args": [
                    {
                        "name": "dialog",
                        "types": [
                            "Dialog"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dialog: Dialog"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close a dialog that has been created with the keyword\n<tt class=\"docutils literal\">Show dialog</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dialog:</th><td class=\"field-body\">An instance of a Dialog</td>\n</tr>\n</tbody>\n</table>\n<p>Calling this keyword is not required if the user correctly\nsubmits a dialog or closes it manually. However, it can be used\nto forcefully hide a dialog if the result is no longer relevant.</p>\n<p>If a forcefully closed dialog is waited, it will throw\nan exception to indicate that it was closed before receiving\na valid result.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Display notification dialog while operation runs\n${dialog}=</span><span class=\"p\">    </span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Please wait</span><span class=\"p\">\n</span><span class=\"c\">Run process that takes a while</span><span class=\"p\">\n</span><span class=\"c\">Close dialog</span><span class=\"p\">    </span><span class=\"c\">${dialog}</span>\n</pre>\n</div>\n",
                "shortdoc": "Close a dialog that has been created with the keyword ``Show dialog``.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 1056
            },
            {
                "name": "Run dialog",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "180",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 180"
                    },
                    {
                        "name": "options",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**options: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a dialog from all the defined elements and block\nuntil the user has handled it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Time to wait for dialog to complete, in seconds</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">Options for the dialog</td>\n</tr>\n</tbody>\n</table>\n<p>Returns a result object with all input values.\nThis keyword is a shorthand for the following expression:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Run dialog</span><span class=\"p\">\n    </span><span class=\"c\">[Arguments]</span><span class=\"p\">  </span><span class=\"c\">${timeout}=180</span><span class=\"p\">  </span><span class=\"c\">&amp;{options}</span><span class=\"p\">\n    </span><span class=\"c\">${dialog}=</span><span class=\"p\">   </span><span class=\"c\">Show dialog</span><span class=\"p\">     </span><span class=\"c\">&amp;{options}</span><span class=\"p\">\n    </span><span class=\"c\">${result}=</span><span class=\"p\">   </span><span class=\"c\">Wait dialog</span><span class=\"p\">     </span><span class=\"c\">${dialog}</span><span class=\"p\">  </span><span class=\"c\">timeout=${timeout}</span><span class=\"p\">\n    </span><span class=\"c\">[Return]</span><span class=\"p\">     </span><span class=\"c\">${result}</span>\n</pre>\n<p>For more information about possible options for opening the dialog,\nsee the documentation for the keyword <tt class=\"docutils literal\">Show dialog</tt>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add heading</span><span class=\"p\">     </span><span class=\"c\">Please enter your username</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">  </span><span class=\"c\">name=username</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">      </span><span class=\"c\">Run dialog</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">The username is: ${result.username}</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a dialog from all the defined elements and block until the user has handled it.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 873
            },
            {
                "name": "Show dialog",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "Dialog",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "title: str = Dialog"
                    },
                    {
                        "name": "height",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": "AUTO",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "height: int | str = AUTO"
                    },
                    {
                        "name": "width",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "480",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width: int = 480"
                    },
                    {
                        "name": "on_top",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "on_top: bool = False"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = True"
                    },
                    {
                        "name": "debug",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a new dialog with all the defined elements, and show\nit to the user. Does not block, but instead immediately returns\na new <tt class=\"docutils literal\">Dialog</tt> instance.</p>\n<p>The return value can later be used to wait for\nthe user to close the dialog and inspect the results.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">Title of dialog</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param height:</th><td class=\"field-body\">Height of dialog (in pixels or 'AUTO')</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">Width of dialog (in pixels)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param on_top:</th><td class=\"field-body\">Show dialog always on top of other windows</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param clear:</th><td class=\"field-body\">Remove all defined elements</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param debug:</th><td class=\"field-body\">Allow opening developer tools in Dialog window</td>\n</tr>\n</tbody>\n</table>\n<p>By default the window has the title <tt class=\"docutils literal\">Dialog</tt>, but it can be changed\nwith the argument <tt class=\"docutils literal\">title</tt> to any string.</p>\n<p>The <tt class=\"docutils literal\">height</tt> argument accepts a static number in pixels, but\ndefaults to the string value <tt class=\"docutils literal\">AUTO</tt>. In this mode the Dialog window\ntries to automatically resize itself to fit the defined content.</p>\n<p>In comparison, the <tt class=\"docutils literal\">width</tt> argument only accepts pixel values, as all\nelement types by default resize to fit the given window width.</p>\n<p>With the <tt class=\"docutils literal\">clear</tt> argument it's possible to control if defined elements\nshould be cleared after the dialog has been created. It can be set\nto <tt class=\"docutils literal\">False</tt> if the same content should be shown multiple times.</p>\n<p>In certain applications it's useful to have the dialog always be\non top of already opened applications. This can be set with the\nargument <tt class=\"docutils literal\">on_top</tt>, which is disabled by default.</p>\n<p>For development purposes the <tt class=\"docutils literal\">debug</tt> agument can be enabled to\nallow opening browser developer tools.</p>\n<p>If the dialog is still open when the execution ends, it's closed\nautomatically.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">name=username</span><span class=\"p\">    </span><span class=\"c\">label=Username</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">name=address</span><span class=\"p\">     </span><span class=\"c\">label=Address</span><span class=\"p\">\n</span><span class=\"c\">${dialog}=</span><span class=\"p\">    </span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Input form</span><span class=\"p\">\n</span><span class=\"c\">Open browser to form page</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Wait dialog</span><span class=\"p\">    </span><span class=\"c\">${dialog}</span><span class=\"p\">\n</span><span class=\"c\">Insert user information</span><span class=\"p\">      </span><span class=\"c\">${result.username}</span><span class=\"p\">  </span><span class=\"c\">${result.address}</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a new dialog with all the defined elements, and show it to the user. Does not block, but instead immediately returns a new ``Dialog`` instance.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 907
            },
            {
                "name": "Wait all dialogs",
                "args": [
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "300",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 300"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for all opened dialogs to be handled by the user.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Time to wait for dialogs to complete, in seconds</td>\n</tr>\n</tbody>\n</table>\n<p>Returns a list of results from all dialogs that have not been handled\nbefore calling this keyword, in the order the dialogs\nwere originally created.</p>\n<p>If any dialog fails, this keyword throws the corresponding exception\nimmediately and doesn't keep waiting for further results.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Create multiple dialogs\nShow dialog</span><span class=\"p\">    </span><span class=\"c\">title=One</span><span class=\"p\">\n</span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Two</span><span class=\"p\">\n</span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Three</span><span class=\"p\">\n\n</span><span class=\"c\"># Wait for all of them to complete\n&#64;{results}=</span><span class=\"p\">    </span><span class=\"c\">Wait all dialogs</span><span class=\"p\">\n\n</span><span class=\"c\"># Loop through results\nFOR</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{results}</span><span class=\"p\">\n    </span><span class=\"c\">Log many</span><span class=\"p\">    </span><span class=\"c\">&amp;{result}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for all opened dialogs to be handled by the user.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 1014
            },
            {
                "name": "Wait dialog",
                "args": [
                    {
                        "name": "dialog",
                        "types": [
                            "Dialog"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dialog: Dialog"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "300",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 300"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for a dialog to complete that has been created with the\nkeyword <tt class=\"docutils literal\">Show dialog</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dialog:</th><td class=\"field-body\">An instance of a Dialog</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Time to wait for dialog to complete, in seconds</td>\n</tr>\n</tbody>\n</table>\n<p>Blocks until a user has closed the dialog or until <tt class=\"docutils literal\">timeout</tt>\namount of seconds has been reached.</p>\n<p>If the user submitted the dialog, returns a result object.\nIf the user closed the dialog window or <tt class=\"docutils literal\">timeout</tt> was reached,\nraises an exception.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">name=username</span><span class=\"p\">    </span><span class=\"c\">label=Username</span><span class=\"p\">\n</span><span class=\"c\">Add text input</span><span class=\"p\">    </span><span class=\"c\">name=address</span><span class=\"p\">     </span><span class=\"c\">label=Address</span><span class=\"p\">\n</span><span class=\"c\">${dialog}=</span><span class=\"p\">    </span><span class=\"c\">Show dialog</span><span class=\"p\">    </span><span class=\"c\">title=Input form</span><span class=\"p\">\n</span><span class=\"c\">Open browser to form page</span><span class=\"p\">\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Wait dialog</span><span class=\"p\">    </span><span class=\"c\">${dialog}</span><span class=\"p\">\n</span><span class=\"c\">Insert user information</span><span class=\"p\">      </span><span class=\"c\">${result.username}</span><span class=\"p\">  </span><span class=\"c\">${result.address}</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for a dialog to complete that has been created with the keyword ``Show dialog``.",
                "tags": [
                    "dialog"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Dialogs\\library.py",
                "lineno": 985
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "Icon",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Icon variants</p>\n</div>\n",
                    "members": [
                        {
                            "name": "Success",
                            "value": "success"
                        },
                        {
                            "name": "Warning",
                            "value": "warning"
                        },
                        {
                            "name": "Failure",
                            "value": "failure"
                        }
                    ]
                },
                {
                    "name": "Size",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Element size options</p>\n</div>\n",
                    "members": [
                        {
                            "name": "Small",
                            "value": "small"
                        },
                        {
                            "name": "Medium",
                            "value": "medium"
                        },
                        {
                            "name": "Large",
                            "value": "large"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Email.Exchange": {
        "name": "RPA.Email.Exchange",
        "doc": "<div class=\"document\">\n<p><cite>Exchange</cite> is a library for sending, reading, and deleting emails.\n<cite>Exchange</cite> is interfacing with Exchange Web Services (EWS).</p>\n<p>For more information about server settings, see\n<a class=\"reference external\" href=\"https://support.microsoft.com/en-us/office/server-settings-you-ll-need-from-your-email-provider-c82de912-adcc-4787-8283-45a1161f3cc3\">this Microsoft support article</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Email.Exchange</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize</span><span class=\"p\">  </span><span class=\"s\">username=</span><span class=\"p\">${</span><span class=\"nv\">ACCOUNT</span><span class=\"p\">}  </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">PASSWORD</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">ACCOUNT</span><span class=\"p\">}              </span><span class=\"s\">ACCOUNT_NAME</span><span class=\"p\">\n${</span><span class=\"nv\">PASSWORD</span><span class=\"p\">}             </span><span class=\"s\">ACCOUNT_PASSWORD</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}    </span><span class=\"s\">RECIPIENT</span><span class=\"p\">\n${</span><span class=\"nv\">IMAGES</span><span class=\"p\">}               </span><span class=\"s\">myimage.png</span><span class=\"p\">\n${</span><span class=\"nv\">ATTACHMENTS</span><span class=\"p\">}          </span><span class=\"s\">C:</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">mydocument.pdf</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Task of sending email</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">  </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...           </span><span class=\"s\">subject=Exchange Message from RPA Robot</span><span class=\"p\">\n    ...           </span><span class=\"s\">body=&lt;p&gt;Exchange RPA Robot message body&lt;br&gt;&lt;img src='myimage.png'/&gt;&lt;/p&gt;</span><span class=\"p\">\n    ...           </span><span class=\"s\">save=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...           </span><span class=\"s\">html=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...           </span><span class=\"s\">images=</span><span class=\"p\">${</span><span class=\"nv\">IMAGES</span><span class=\"p\">}\n    ...           </span><span class=\"s\">cc=EMAIL_ADDRESS</span><span class=\"p\">\n    ...           </span><span class=\"s\">bcc=EMAIL_ADDRESS</span><span class=\"p\">\n    ...           </span><span class=\"s\">attachments=</span><span class=\"p\">${</span><span class=\"nv\">ATTACHMENTS</span><span class=\"p\">}\n\n</span><span class=\"gu\">Task of listing messages</span><span class=\"p\">\n    </span><span class=\"c\"># Attachments are saved specifically with a keyword Save Attachments\n</span><span class=\"p\">    ${</span><span class=\"nv\">messages</span><span class=\"p\">}=    </span><span class=\"nf\">List Messages</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">msg</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">messages</span><span class=\"p\">}\n        </span><span class=\"nf\">Log Many</span><span class=\"p\">    ${</span><span class=\"nv\">msg</span><span class=\"p\">}\n        ${</span><span class=\"nv\">attachments</span><span class=\"p\">}=    </span><span class=\"nf\">Run Keyword If</span><span class=\"p\">    </span><span class=\"s\">&quot;</span><span class=\"p\">${</span><span class=\"nv\">msg</span><span class=\"p\">}</span><span class=\"s\">[subject]&quot;==&quot;about my orders&quot;</span><span class=\"p\">\n        ...    </span><span class=\"s\">Save Attachments</span><span class=\"p\">\n        ...    ${</span><span class=\"nv\">msg</span><span class=\"p\">}\n        ...    </span><span class=\"s\">save_dir=</span><span class=\"p\">${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">savedir</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"c\"># Using save_dir all attachments in listed messages are saved\n</span><span class=\"p\">    ${</span><span class=\"nv\">messages</span><span class=\"p\">}=    </span><span class=\"nf\">List Messages</span><span class=\"p\">\n    ...    </span><span class=\"s\">INBOX/Problems/sub1</span><span class=\"p\">\n    ...    </span><span class=\"s\">criterion=subject:about my orders</span><span class=\"p\">\n    ...    </span><span class=\"s\">save_dir=</span><span class=\"p\">${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">savedir2</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">msg</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">messages</span><span class=\"p\">}\n        </span><span class=\"nf\">Log Many</span><span class=\"p\">    ${</span><span class=\"nv\">msg</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Task of moving messages</span><span class=\"p\">\n    </span><span class=\"nf\">Move Messages</span><span class=\"p\">    </span><span class=\"s\">criterion=subject:about my orders</span><span class=\"p\">\n    ...    </span><span class=\"s\">source=INBOX/Processed Purchase Invoices/sub2</span><span class=\"p\">\n    ...    </span><span class=\"s\">target=INBOX/Problems/sub1</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Email.Exchange</span> <span class=\"kn\">import</span> <span class=\"n\">Exchange</span>\n\n<span class=\"n\">ex_account</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_NAME&quot;</span>\n<span class=\"n\">ex_password</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_PASSWORD&quot;</span>\n\n<span class=\"n\">mail</span> <span class=\"o\">=</span> <span class=\"n\">Exchange</span><span class=\"p\">()</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">ex_account</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">ex_password</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n    <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s2\">&quot;RECIPIENT&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">&quot;Message from RPA Python&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">&quot;RPA Python message body&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:02",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
        "lineno": 32,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Authorize",
                "args": [
                    {
                        "name": "username",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "username: str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    },
                    {
                        "name": "autodiscover",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autodiscover: bool = True"
                    },
                    {
                        "name": "access_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "DELEGATE",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "access_type: str = DELEGATE"
                    },
                    {
                        "name": "server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "server: str | None = None"
                    },
                    {
                        "name": "primary_smtp_address",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "primary_smtp_address: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to Exchange account</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">account username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">account password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autodiscover:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use autodiscover or set it off</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param accesstype:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">default &quot;DELEGATE&quot;, other option &quot;IMPERSONATION&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param server:</th><td class=\"field-body\">required for configuration options</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param primary_smtp_address:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">by default set to username, but can be\nset to be different than username</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Connect to Exchange account",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 119
            },
            {
                "name": "Create Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "parent_folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parent_folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the new folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 330
            },
            {
                "name": "Delete Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "parent_folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parent_folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 350
            },
            {
                "name": "Empty Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "parent_folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parent_folder: str | None = None"
                    },
                    {
                        "name": "delete_sub_folders",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delete_sub_folders: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Empty email folder of all items</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delete_sub_folders:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">delete sub folders or not, by default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Empty email folder of all items",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 397
            },
            {
                "name": "List Messages",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "criterion",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str | None = None"
                    },
                    {
                        "name": "contains",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "contains: bool = False"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "100",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 100"
                    },
                    {
                        "name": "save_dir",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_dir: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List messages in the account inbox. Order by descending\nreceived time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the email folder, default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of messages to list</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save_dir:</th><td class=\"field-body\">set to path where attachments should be saved,\ndefault None (attachments are not saved)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List messages in the account inbox. Order by descending received time.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 155
            },
            {
                "name": "List Unread Messages",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str | None = None"
                    },
                    {
                        "name": "criterion",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str | None = None"
                    },
                    {
                        "name": "contains",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "contains: bool = False"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "100",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 100"
                    },
                    {
                        "name": "save_dir",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_dir: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List unread messages in the account inbox. Order by descending\nreceived time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the email folder, default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of messages to list</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save_dir:</th><td class=\"field-body\">set to path where attachments should be saved,\ndefault None (attachments are not saved)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List unread messages in the account inbox. Order by descending received time.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 189
            },
            {
                "name": "Move Message",
                "args": [
                    {
                        "name": "msg",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "msg: dict"
                    },
                    {
                        "name": "target",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move a message into target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param msg:</th><td class=\"field-body\">dictionary of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">path to target folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises AttributeError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if <cite>msg</cite> is not a dictionary containing\n<cite>id</cite> and <cite>changekey</cite> attributes</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${messages}=</span><span class=\"p\">    </span><span class=\"c\">List Messages</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">INBOX</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">criterion=subject:about my orders</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${msg}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{messages}</span><span class=\"p\">\n    </span><span class=\"c\">Run Keyword If</span><span class=\"p\">    </span><span class=\"c\">&quot;${msg}[sender][email_address]&quot;==&quot;${priority_account}&quot;</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Move Message</span><span class=\"p\">    </span><span class=\"c\">${msg}</span><span class=\"p\">    </span><span class=\"c\">target=INBOX / Problems / priority</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Move a message into target folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 454
            },
            {
                "name": "Move Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "source",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source: str | None = None"
                    },
                    {
                        "name": "target",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target: str | None = None"
                    },
                    {
                        "name": "contains",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "contains: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move message(s) from source folder to target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">move messages matching this criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">target folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean result of operation, True if 1+ items were moved else False</td>\n</tr>\n</tbody>\n</table>\n<p>Criterion examples:</p>\n<ul class=\"simple\">\n<li>subject:my message subject</li>\n<li>body:something in body</li>\n<li>sender:sender&#64;domain.com</li>\n</ul>\n</div>\n",
                "shortdoc": "Move message(s) from source folder to target folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 419
            },
            {
                "name": "Rename Folder",
                "args": [
                    {
                        "name": "oldname",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "oldname: str | None = None"
                    },
                    {
                        "name": "newname",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "newname: str | None = None"
                    },
                    {
                        "name": "parent_folder",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parent_folder: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Rename email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param oldname:</th><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newname:</th><td class=\"field-body\">new name for the folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parent_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the parent folder, by default INBOX</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Rename email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 369
            },
            {
                "name": "Save Attachments",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "message: dict"
                    },
                    {
                        "name": "save_dir",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_dir: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save attachments in message into given directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">dictionary containing message details</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save_dir:</th><td class=\"field-body\">filepath where attachments will be saved</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of saved attachments</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save attachments in message into given directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 612
            },
            {
                "name": "Save Message",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "message: dict"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save email as .eml file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">dictionary containing message details</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\"></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save email as .eml file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 621
            },
            {
                "name": "Send Message",
                "args": [
                    {
                        "name": "recipients",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "recipients: str"
                    },
                    {
                        "name": "subject",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "subject: str = "
                    },
                    {
                        "name": "body",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "body: str = "
                    },
                    {
                        "name": "attachments",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "attachments: str | None = None"
                    },
                    {
                        "name": "html",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "html: bool = False"
                    },
                    {
                        "name": "images",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "images: str | None = None"
                    },
                    {
                        "name": "cc",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cc: str | None = None"
                    },
                    {
                        "name": "bcc",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bcc: str | None = None"
                    },
                    {
                        "name": "save",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Keyword for sending message through connected Exchange account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">message subject, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">message body, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to attach, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param html:</th><td class=\"field-body\">if message content is in HTML, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param images:</th><td class=\"field-body\">list of filepaths for inline use, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param cc:</th><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param bcc:</th><td class=\"field-body\">list of email addresses, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save:</th><td class=\"field-body\">is sent message saved to Sent messages folder or not,\ndefaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Email addresses can be prefixed with <tt class=\"docutils literal\">ex:</tt> to indicate an Exchange\naccount address.</p>\n<p>Recipients is a <cite>required</cite> parameter.</p>\n</div>\n",
                "shortdoc": "Keyword for sending message through connected Exchange account.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 218
            },
            {
                "name": "Wait For Message",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 5.0"
                    },
                    {
                        "name": "interval",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "1.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "interval: float = 1.0"
                    },
                    {
                        "name": "contains",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "contains: bool = False"
                    },
                    {
                        "name": "save_dir",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_dir: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into INBOX.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">wait for message matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param contains:</th><td class=\"field-body\">if matching should be done using <cite>contains</cite> matching\nand not <cite>equals</cite> matching, default <cite>False</cite> is means <cite>equals</cite> matching</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save_dir:</th><td class=\"field-body\">set to path where attachments should be saved,\ndefault None (attachments are not saved)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Wait for email matching `criterion` to arrive into INBOX.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\Exchange.py",
                "lineno": 515
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Email.ImapSmtp": {
        "name": "RPA.Email.ImapSmtp",
        "doc": "<div class=\"document\">\n<p><cite>ImapSmtp</cite> is a library for sending, reading, and deleting emails.\n<cite>ImapSmtp</cite> is interfacing with SMTP and IMAP protocols.</p>\n<p><strong>Troubleshooting</strong></p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt>Authentication error with Gmail - &quot;Application-specific password required&quot;</dt>\n<dd>see. <a class=\"reference external\" href=\"https://support.google.com/mail/answer/185833?hl=en\">https://support.google.com/mail/answer/185833?hl=en</a></dd>\n</dl>\n</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>It is highly recommended to secure your passwords and take care\nthat they are not stored in version control by mistake.\nSee <tt class=\"docutils literal\">RPA.Robocorp.Vault</tt> to see how to store secrets in\nRobocorp Vault.</p>\n<p>When sending HTML content with IMG tags, the <tt class=\"docutils literal\">src</tt> filenames must match\nthe base image name given with the <tt class=\"docutils literal\">images</tt> parameter.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Email.ImapSmtp</span><span class=\"p\">   </span><span class=\"s\">smtp_server=smtp.gmail.com</span><span class=\"p\">  </span><span class=\"s\">smtp_port=587</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize</span><span class=\"p\">  </span><span class=\"s\">account=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}  </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_PASSWORD</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}        </span><span class=\"s\">ACCOUNT_NAME</span><span class=\"p\">\n${</span><span class=\"nv\">GMAIL_PASSWORD</span><span class=\"p\">}       </span><span class=\"s\">ACCOUNT_PASSWORD</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}    </span><span class=\"s\">RECIPIENT</span><span class=\"p\">\n${</span><span class=\"nv\">BODY_IMG1</span><span class=\"p\">}            ${</span><span class=\"nv\">IMAGEDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png</span><span class=\"p\">\n${</span><span class=\"nv\">BODY_IMG2</span><span class=\"p\">}            ${</span><span class=\"nv\">IMAGEDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.png</span><span class=\"p\">\n${</span><span class=\"nv\">EMAIL_BODY</span><span class=\"p\">}     </span><span class=\"s\">&lt;h1&gt;Heading&lt;/h1&gt;&lt;p&gt;Status: &lt;img src='approved.png' alt='approved image'/&gt;&lt;/p&gt;</span><span class=\"p\">\n...               </span><span class=\"s\">&lt;p&gt;INVOICE: &lt;img src='invoice.png' alt='invoice image'/&gt;&lt;/p&gt;</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Sending email</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">  </span><span class=\"s\">sender=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}\n    ...           </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...           </span><span class=\"s\">subject=Message from RPA Robot</span><span class=\"p\">\n    ...           </span><span class=\"s\">body=RPA Robot message body</span><span class=\"p\">\n\n</span><span class=\"gu\">Sending HTML Email With Image</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]     </span><span class=\"s\">Sending email with HTML content and attachment</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">\n    ...                 </span><span class=\"s\">sender=</span><span class=\"p\">${</span><span class=\"nv\">GMAIL_ACCOUNT</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT_ADDRESS</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">subject=HTML email with body images (2) plus one attachment</span><span class=\"p\">\n    ...                 </span><span class=\"s\">body=</span><span class=\"p\">${</span><span class=\"nv\">EMAIL_BODY</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">html=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">images=</span><span class=\"p\">${</span><span class=\"nv\">BODY_IMG1</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">BODY_IMG2</span><span class=\"p\">}\n    ...                 </span><span class=\"s\">attachments=example.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Email.ImapSmtp</span> <span class=\"kn\">import</span> <span class=\"n\">ImapSmtp</span>\n\n<span class=\"n\">gmail_account</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_NAME&quot;</span>\n<span class=\"n\">gmail_password</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ACCOUNT_PASSWORD&quot;</span>\n<span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">gmail_account</span>\n\n<span class=\"n\">mail</span> <span class=\"o\">=</span> <span class=\"n\">ImapSmtp</span><span class=\"p\">(</span><span class=\"n\">smtp_server</span><span class=\"o\">=</span><span class=\"s2\">&quot;smtp.gmail.com&quot;</span><span class=\"p\">,</span> <span class=\"n\">smtp_port</span><span class=\"o\">=</span><span class=\"mi\">587</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"o\">=</span><span class=\"n\">gmail_account</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">gmail_password</span><span class=\"p\">)</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n    <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">gmail_account</span><span class=\"p\">,</span>\n    <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s2\">&quot;RECIPIENT&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s2\">&quot;Message from RPA Python&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s2\">&quot;RPA Python message body&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:03",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
        "lineno": 94,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "smtp_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_server: str | None = None"
                    },
                    {
                        "name": "smtp_port",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "587",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_port: int = 587"
                    },
                    {
                        "name": "imap_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_server: str | None = None"
                    },
                    {
                        "name": "imap_port",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "993",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_port: int = 993"
                    },
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str = utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 171
            }
        ],
        "keywords": [
            {
                "name": "Add Gmail Labels",
                "args": [
                    {
                        "name": "labels",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "labels"
                    },
                    {
                        "name": "criterion",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "criterion"
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_folder: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add GMail labels to messages matching criterion and if given,\nsource folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param labels:</th><td class=\"field-body\">comma separated list of labels to add</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">label messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">look for messages in this folder, default all folders</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">status of the operation</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add Gmail Labels</span><span class=\"p\">  </span><span class=\"c\">customer1</span><span class=\"p\">   </span><span class=\"c\">SUBJECT &quot;order confirmation&quot;</span><span class=\"p\">\n</span><span class=\"c\">Add Gmail Labels</span><span class=\"p\">  </span><span class=\"c\">wip</span><span class=\"p\">         </span><span class=\"c\">SUBJECT &quot;order confirmation&quot;</span><span class=\"p\">   </span><span class=\"c\">customerfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Add GMail labels to messages matching criterion and if given, source folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1348
            },
            {
                "name": "Authorize",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "smtp_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_server: str | None = None"
                    },
                    {
                        "name": "imap_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_server: str | None = None"
                    },
                    {
                        "name": "smtp_port",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_port: int | None = None"
                    },
                    {
                        "name": "imap_port",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_port: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Authorize user to SMTP and IMAP servers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">user account as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">user password as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server port, defaults to None (587 for SMTP)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server port, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Will use separately set credentials or those given in keyword call.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">smtp_server=smtp.gmail.com</span><span class=\"p\">  </span><span class=\"c\">smtp_port=587</span>\n</pre>\n</div>\n",
                "shortdoc": "Authorize user to SMTP and IMAP servers.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 322
            },
            {
                "name": "Authorize Imap",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "imap_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_server: str | None = None"
                    },
                    {
                        "name": "imap_port",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "imap_port: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Authorize to IMAP server.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">IMAP account name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">IMAP account password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param imap_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">IMAP server port, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Can be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword <tt class=\"docutils literal\">Set Credentials</tt> has been called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize IMAP</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">imap.gmail.com</span><span class=\"p\">  </span><span class=\"c\">993</span>\n</pre>\n</div>\n",
                "shortdoc": "Authorize to IMAP server.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 277
            },
            {
                "name": "Authorize Smtp",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "smtp_server",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_server: str | None = None"
                    },
                    {
                        "name": "smtp_port",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "smtp_port: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Authorize to SMTP server.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">SMTP account name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">SMTP account password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_server:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server address, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param smtp_port:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SMTP server port, defaults to None (587 for SMTP)</td>\n</tr>\n</tbody>\n</table>\n<p>Can be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword <tt class=\"docutils literal\">Set Credentials</tt> has been called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Authorize SMTP</span><span class=\"p\">    </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">  </span><span class=\"c\">smtp.gmail.com</span><span class=\"p\">  </span><span class=\"c\">587</span>\n</pre>\n</div>\n",
                "shortdoc": "Authorize to SMTP server.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 231
            },
            {
                "name": "Create Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the new folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Folder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n",
                "shortdoc": "Create email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1094
            },
            {
                "name": "Delete Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Folder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1066
            },
            {
                "name": "Delete Message",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete single message from server based on criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>If criterion does not return exactly 1 message then delete is not done.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Message</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;Greetings RPA developer&quot;</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete single message from server based on criterion.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 704
            },
            {
                "name": "Delete Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete messages from server based on criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">maximum number of message to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT Greetings</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete messages from server based on criterion.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 725
            },
            {
                "name": "Do Message Actions",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "actions",
                        "types": [
                            "list"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "actions: list = None"
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_folder: str = None"
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_folder: str = None"
                    },
                    {
                        "name": "labels",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "labels: str = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int = None"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Do actions to messages matching criterion and if given,\nsource folder</p>\n<p>Actions can be:</p>\n<ul class=\"simple\">\n<li>msg_copy</li>\n<li>msg_delete</li>\n<li>msg_flag</li>\n<li>msg_unflag</li>\n<li>msg_read</li>\n<li>msg_unread</li>\n<li>msg_save</li>\n<li>msg_attachment_save</li>\n<li>glabel_add</li>\n<li>glabel_remove</li>\n</ul>\n<p>Result object contains following attributes:</p>\n<ul class=\"simple\">\n<li>actions_done, number of messages on which action was performed</li>\n<li>message_count, number of messages matching criterion</li>\n<li>ids, message ids matching criterion</li>\n<li>uids, dictionary of message uids and message content</li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">perform actions on messages matching this</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param actions:</th><td class=\"field-body\">list of actions to perform on matching messages</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">look for messages in this folder, default all folders</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">can be file path or email folder\n(for example action: msg_copy)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param labels:</th><td class=\"field-body\">comma separated list of labels (for example action: glabel_add)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">maximum number of messages (for example action: msg_delete)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">to control if file should overwrite\n(for example action: msg_attachment_save)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${actions}=</span><span class=\"p\">   </span><span class=\"c\">Create List</span><span class=\"p\">  </span><span class=\"c\">msg_unflag</span><span class=\"p\">  </span><span class=\"c\">msg_read</span><span class=\"p\">  </span><span class=\"c\">msg_save</span><span class=\"p\">  </span><span class=\"c\">msg_attachment_save</span><span class=\"p\">\n</span><span class=\"c\">Do Message Actions</span><span class=\"p\">    </span><span class=\"c\">SUBJECT &quot;Order confirmation&quot;</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">                   </span><span class=\"c\">${actions}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">                   </span><span class=\"c\">source_folder=XXX</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">                   </span><span class=\"c\">target_folder=${CURDIR}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">                   </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Do actions to messages matching criterion and if given, source folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1390
            },
            {
                "name": "Flag Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = None"
                    },
                    {
                        "name": "unflag",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "unflag: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mark messages as <cite>flagged</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param unflag:</th><td class=\"field-body\">to mark messages as not <cite>flagged</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${flagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">    </span><span class=\"c\">Flag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span><span class=\"p\">\n</span><span class=\"c\">${unflagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Flag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span><span class=\"p\">  </span><span class=\"c\">unflag=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Mark messages as `flagged`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1122
            },
            {
                "name": "Get Folder List",
                "args": [
                    {
                        "name": "subdirectory",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "subdirectory: str = None"
                    },
                    {
                        "name": "pattern",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pattern: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get list of folders on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param subdirectory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list subdirectories for this folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">list folders matching this pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of folders</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">\n</span><span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">  </span><span class=\"c\">pattern=important</span><span class=\"p\">\n</span><span class=\"c\">&#64;{folders}</span><span class=\"p\">  </span><span class=\"c\">Get Folder List</span><span class=\"p\">  </span><span class=\"c\">subdirectory=sub</span>\n</pre>\n</div>\n",
                "shortdoc": "Get list of folders on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 971
            },
            {
                "name": "List Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_folder: str = None"
                    },
                    {
                        "name": "readonly",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "readonly: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return list of messages matching criterion.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list emails matching this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list messages from this folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param readonly:</th><td class=\"field-body\">set False if you want to mark matching messages as read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages</td>\n</tr>\n</tbody>\n</table>\n<p><em>Note.</em> listing messages without <cite>source_folder</cite> might take a long time</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">List Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{EMAILS}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Subject]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[From]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Date]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Delivered-To]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Received]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[Has-Attachments]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${email}[uid]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Return list of messages matching criterion.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 777
            },
            {
                "name": "Mark As Read",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = None"
                    },
                    {
                        "name": "unread",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "unread: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mark messages as <cite>read</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param unread:</th><td class=\"field-body\">to mark messages as not <cite>read</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${read}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Mark As Read</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n",
                "shortdoc": "Mark messages as `read`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1160
            },
            {
                "name": "Mark As Unread",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mark messages as not <cite>read</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${unread}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Mark As Unread</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n",
                "shortdoc": "Mark messages as not `read`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1182
            },
            {
                "name": "Move Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = None"
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_folder: str = None"
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_folder: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move messages from source folder to target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">move messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location of the messages, default <cite>INBOX</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">where messages should be move into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if all move operations succeeded, False if not</td>\n</tr>\n</tbody>\n</table>\n<div class=\"system-message\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">&lt;string&gt;</tt>, line 7)</p>\nField list ends without a blank line; unexpected unindent.</div>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Move Messages</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">criterion=SUBJECT &quot;order confirmation 32&quot;</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">target_folder=yyy</span><span class=\"p\">\n\n</span><span class=\"c\">${result}=</span><span class=\"p\">    </span><span class=\"c\">Move Messages</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">criterion=ALL</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">source_folder=yyy</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">target_folder=XXX</span>\n</pre>\n</div>\n",
                "shortdoc": "Move messages from source folder to target folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1242
            },
            {
                "name": "Move Messages By Ids",
                "args": [
                    {
                        "name": "message_ids",
                        "types": [
                            "str",
                            "List"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "message_ids: str | List"
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target_folder: str"
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source_folder: str"
                    },
                    {
                        "name": "use_gmail_search",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_gmail_search: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move message by their Message-ID's from source folder to target folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param message_ids:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">one Message-ID as string or list of Message-IDs</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location of the messages, default <cite>INBOX</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">where messages should be move into</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_gmail_search:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set to True to use <cite>Rfc822msgid</cite> search, default\nis <cite>HEADER Message-ID</cite> search</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if all move operations succeeded, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Move message by their Message-ID's from source folder to target folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1291
            },
            {
                "name": "Remove Gmail Labels",
                "args": [
                    {
                        "name": "labels",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "labels"
                    },
                    {
                        "name": "criterion",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "criterion"
                    },
                    {
                        "name": "source_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_folder: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove GMail labels to messages matching criterion and if given,\nsource folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param labels:</th><td class=\"field-body\">comma separated list of labels to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">unlabel messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">look for messages in this folder, default all folders</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">status of the operation</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove Gmail Labels</span><span class=\"p\">  </span><span class=\"c\">wip</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;order confirmation&quot;</span><span class=\"p\">\n</span><span class=\"c\">Remove Gmail Labels</span><span class=\"p\">  </span><span class=\"c\">wip</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;order confirmation&quot;</span><span class=\"p\">  </span><span class=\"c\">customerfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove GMail labels to messages matching criterion and if given, source folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1369
            },
            {
                "name": "Rename Folder",
                "args": [
                    {
                        "name": "oldname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "oldname: str = None"
                    },
                    {
                        "name": "newname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "newname: str = None"
                    },
                    {
                        "name": "suppress_error",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "suppress_error: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Rename email folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param oldname:</th><td class=\"field-body\">current folder name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newname:</th><td class=\"field-body\">new name for the folder</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param suppress_error:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">to silence warning message, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Rename Folder</span><span class=\"p\">   </span><span class=\"c\">subfolder</span><span class=\"p\">   </span><span class=\"c\">filtered</span>\n</pre>\n</div>\n",
                "shortdoc": "Rename email folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1032
            },
            {
                "name": "Save Attachment",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "dict",
                            "Message"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "message: dict | Message"
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "target_folder: str"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "overwrite: bool"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save mail attachment of single given email into local folder</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">message item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local folder for saving attachments to (needs to exist),\ndefaults to user's home directory if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">overwrite existing file is True, defaults to False</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">List Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{emails}</span><span class=\"p\">\n    </span><span class=\"c\">Run Keyword If</span><span class=\"p\">   </span><span class=\"c\">${email}[Has-Attachments] == True</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">              </span><span class=\"c\">Save Attachment</span><span class=\"p\">  </span><span class=\"c\">${email}</span><span class=\"p\">  </span><span class=\"c\">target_folder=${CURDIR}</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Save mail attachment of single given email into local folder",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 851
            },
            {
                "name": "Save Attachments",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_folder: str = None"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save mail attachments of emails matching criterion into local folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">attachments are saved for mails matching this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">local folder for saving attachments to (needs to exist),\ndefaults to user's home directory if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">overwrite existing file is True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of saved attachments</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${numsaved}</span><span class=\"p\">  </span><span class=\"c\">Save Attachments</span><span class=\"p\">   </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">          </span><span class=\"c\">target_folder=${CURDIR}${/}messages</span><span class=\"p\">  </span><span class=\"c\">overwrite=True</span>\n</pre>\n</div>\n",
                "shortdoc": "Save mail attachments of emails matching criterion into local folder.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 824
            },
            {
                "name": "Save Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "target_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_folder: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save messages based on criteria and store them to target folder\nwith attachment files.</p>\n<p>Does not save message if <cite>target_folder</cite> is not given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filter messages based on this, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to folder where message are saved, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if success, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Save Messages</span><span class=\"p\">  </span><span class=\"c\">SUBJECT Important message</span><span class=\"p\">  </span><span class=\"c\">target_folder=${USERDIR}${/}messages</span>\n</pre>\n</div>\n",
                "shortdoc": "Save messages based on criteria and store them to target folder with attachment files.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 748
            },
            {
                "name": "Select Folder",
                "args": [
                    {
                        "name": "folder_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "INBOX",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "folder_name: str = INBOX"
                    },
                    {
                        "name": "readonly",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "readonly: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Select folder by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param folder_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the folder to select</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param readonly:</th><td class=\"field-body\">if set to True then message flags are not modified</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">message count in the selected folder</td>\n</tr>\n</tbody>\n</table>\n<p>Returns number of messages in the folder or\nexception if folder does not exist on the server.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Select Folder</span><span class=\"p\">   </span><span class=\"c\">subfolder</span>\n</pre>\n</div>\n",
                "shortdoc": "Select folder by name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1005
            },
            {
                "name": "Send Message",
                "args": [
                    {
                        "name": "sender",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sender: str"
                    },
                    {
                        "name": "recipients",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "recipients: str"
                    },
                    {
                        "name": "subject",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "subject: str = "
                    },
                    {
                        "name": "body",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "body: str = "
                    },
                    {
                        "name": "attachments",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "attachments: str | None = None"
                    },
                    {
                        "name": "html",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "html: bool = False"
                    },
                    {
                        "name": "images",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "images: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send SMTP email</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sender:</th><td class=\"field-body\">who is sending, ie. 'from'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">who is receiving, ie. 'to'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">mail subject field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">mail body content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to attach, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param html:</th><td class=\"field-body\">if message content is in HTML, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param images:</th><td class=\"field-body\">list of filepaths for inline use, defaults to []</td>\n</tr>\n</tbody>\n</table>\n<p>Valid sender values:</p>\n<ul class=\"simple\">\n<li>First Lastname &lt;<a class=\"reference external\" href=\"mailto:address&#64;domain\">address&#64;domain</a>&gt;</li>\n<li><a class=\"reference external\" href=\"mailto:address&#64;domain\">address&#64;domain</a></li>\n</ul>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Send Message</span><span class=\"p\">  </span><span class=\"c\">sender&#64;domain.com</span><span class=\"p\">  </span><span class=\"c\">recipient&#64;domain.com</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">subject=Greetings Software Robot Developer</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">body=${email_body}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">           </span><span class=\"c\">attachments=${CURDIR}${/}report.pdf</span>\n</pre>\n</div>\n",
                "shortdoc": "Send SMTP email",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 361
            },
            {
                "name": "Send Smtp Hello",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Send hello message to SMTP server.</p>\n<p>Required step when creating SMTP connection.</p>\n</div>\n",
                "shortdoc": "Send hello message to SMTP server.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 353
            },
            {
                "name": "Set Credentials",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set credentials</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">user account as string, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">user password as string, defaults to None</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Credentials</span><span class=\"p\">   </span><span class=\"c\">${username}</span><span class=\"p\">   </span><span class=\"c\">${password}</span><span class=\"p\">\n</span><span class=\"c\">Authorize</span>\n</pre>\n</div>\n",
                "shortdoc": "Set credentials",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 214
            },
            {
                "name": "Unflag Messages",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Mark messages as not <cite>flagged</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">mark messages matching criterion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">successful operations (int), matching messages (int)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${unflagged}</span><span class=\"p\">  </span><span class=\"c\">${oftotal}</span><span class=\"p\">  </span><span class=\"c\">Unflag Messages</span><span class=\"p\">   </span><span class=\"c\">SUBJECT rpa</span>\n</pre>\n</div>\n",
                "shortdoc": "Mark messages as not `flagged`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 1145
            },
            {
                "name": "Wait For Message",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str = "
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 5.0"
                    },
                    {
                        "name": "interval",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "1.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "interval: float = 1.0"
                    },
                    {
                        "name": "readonly",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "readonly: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into mailbox.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message filter to wait for, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param readonly:</th><td class=\"field-body\">set False if you want to mark matching messages as read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{emails}</span><span class=\"p\">  </span><span class=\"c\">Wait For Message</span><span class=\"p\">  </span><span class=\"c\">SUBJECT &quot;rpa task&quot;</span><span class=\"p\">  </span><span class=\"c\">timeout=300</span><span class=\"p\">  </span><span class=\"c\">interval=10</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for email matching `criterion` to arrive into mailbox.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Email\\ImapSmtp.py",
                "lineno": 921
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Excel.Application": {
        "name": "RPA.Excel.Application",
        "doc": "<div class=\"document\">\n<p><cite>Excel.Application</cite> is a library for controlling an Excel application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">             </span><span class=\"nn\">RPA.Excel.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">          </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Teardown</span><span class=\"p\">       </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Manipulate Excel application</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">           </span><span class=\"s\">workbook.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Set Active Worksheet</span><span class=\"p\">    </span><span class=\"s\">sheetname=new stuff</span><span class=\"p\">\n    </span><span class=\"nf\">Write To Cells</span><span class=\"p\">          </span><span class=\"s\">row=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">column=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">value=my data</span><span class=\"p\">\n    </span><span class=\"nf\">Save Excel</span><span class=\"p\">\n\n</span><span class=\"gu\">Run Excel Macro</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">   </span><span class=\"s\">orders_with_macro.xlsm</span><span class=\"p\">\n    </span><span class=\"nf\">Run Macro</span><span class=\"p\">       </span><span class=\"s\">Sheet1.CommandButton1_Click</span><span class=\"p\">\n\n</span><span class=\"gu\">Export Workbook as PDF</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">           </span><span class=\"s\">workbook.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Export as PDF</span><span class=\"p\">           </span><span class=\"s\">workbook.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"s1\">'workbook.xlsx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">set_active_worksheet</span><span class=\"p\">(</span><span class=\"n\">sheetname</span><span class=\"o\">=</span><span class=\"s1\">'new stuff'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_to_cells</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'new data'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">save_excel</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">quit_application</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:03",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
        "lineno": 39,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "autoexit",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autoexit: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 89
            }
        ],
        "keywords": [
            {
                "name": "Add New Sheet",
                "args": [
                    {
                        "name": "sheetname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sheetname: str"
                    },
                    {
                        "name": "tabname",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tabname: str | None = None"
                    },
                    {
                        "name": "create_workbook",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "create_workbook: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add new worksheet to workbook. Workbook is created by default if\nit does not exist.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param tabname:</th><td class=\"field-body\">name for tab (deprecated)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param create_workbook:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">create workbook if True, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">error is raised if workbook does not exist and\n<cite>create_workbook</cite> is False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Add new worksheet to workbook. Workbook is created by default if it does not exist.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 192
            },
            {
                "name": "Add New Workbook",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Adds new workbook for Excel application</p>\n</div>\n",
                "shortdoc": "Adds new workbook for Excel application",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 143
            },
            {
                "name": "Close Document",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 121
            },
            {
                "name": "Export As Pdf",
                "args": [
                    {
                        "name": "pdf_filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pdf_filename: str"
                    },
                    {
                        "name": "excel_filename",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "excel_filename: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Export Excel as PDF file</p>\n<p>If Excel filename is not given, the currently open workbook\nwill be exported as PDF.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pdf_filename:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">PDF filename to save</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param excel_filename:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Excel filename to open</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Export Excel as PDF file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 390
            },
            {
                "name": "Find First Available Cell",
                "args": [
                    {
                        "name": "worksheet",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "worksheet: Any | None = None"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "row: int = 1"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column: int = 1"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find first available free cell</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple (row, column) or (None, None) if not found</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Find first available free cell",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 237
            },
            {
                "name": "Find First Available Row",
                "args": [
                    {
                        "name": "worksheet",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "worksheet: Any | None = None"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "row: int = 1"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column: int = 1"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find first available free row</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">row or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Find first available free row",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 222
            },
            {
                "name": "Open Application",
                "args": [
                    {
                        "name": "visible",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "visible: bool = False"
                    },
                    {
                        "name": "display_alerts",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "display_alerts: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open the Excel application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open the Excel application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 102
            },
            {
                "name": "Open Workbook",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open Excel by filename</p>\n<p>By default sets active worksheet to sheet number 1</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to filename</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open Excel by filename",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 151
            },
            {
                "name": "Quit Application",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Quit the application.</p>\n</div>\n",
                "shortdoc": "Quit the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 132
            },
            {
                "name": "Read From Cells",
                "args": [
                    {
                        "name": "worksheet",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "worksheet: Any | None = None"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "row: int | None = None"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read value from cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Read value from cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 299
            },
            {
                "name": "Run Macro",
                "args": [
                    {
                        "name": "macro_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "macro_name: str"
                    },
                    {
                        "name": "args",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Run Excel macro with given name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param macro_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><p class=\"first\">macro to run</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>args:</th><td class=\"field-body\"><div class=\"first system-message\" id=\"id1\">\n<p class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">&lt;string&gt;</tt>, line 4); <em><a href=\"#id2\">backlink</a></em></p>\n<p>Inline emphasis start-string without end-string.</p>\n</div>\n<p class=\"last\">arguments to pass to macro</p>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Run Excel macro with given name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 375
            },
            {
                "name": "Save Excel",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Saves Excel file</p>\n</div>\n",
                "shortdoc": "Saves Excel file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 325
            },
            {
                "name": "Save Excel As",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "autofit",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autofit: bool = False"
                    },
                    {
                        "name": "file_format",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_format=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save Excel with name if workbook is open</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">where to save file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param autofit:</th><td class=\"field-body\">autofit cell widths if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">format of file</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> Changing the file extension for the path does not\naffect the actual format. To use an older format, use\nthe <tt class=\"docutils literal\">file_format</tt> argument with one of the following values:</p>\n<p><a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat\">https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat</a></p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Save workbook in modern format\nSave excel as</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Save workbook in Excel 97 format (format from above URL)\nSave excel as</span><span class=\"p\">    </span><span class=\"c\">legacy.xls</span><span class=\"p\">   </span><span class=\"c\">file_format=${56}</span>\n</pre>\n</div>\n",
                "shortdoc": "Save Excel with name if workbook is open",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 333
            },
            {
                "name": "Set Active Worksheet",
                "args": [
                    {
                        "name": "sheetname",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sheetname: str | None = None"
                    },
                    {
                        "name": "sheetnumber",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sheetnumber: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set active worksheet by either its sheet number or name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of Excel sheet, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetnumber:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">index of Excel sheet, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set active worksheet by either its sheet number or name",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 175
            },
            {
                "name": "Write To Cells",
                "args": [
                    {
                        "name": "worksheet",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "worksheet: Any | None = None"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "row: int | None = None"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column: int | None = None"
                    },
                    {
                        "name": "value",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "value: str | None = None"
                    },
                    {
                        "name": "number_format",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "number_format: str | None = None"
                    },
                    {
                        "name": "formula",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "formula: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Write value, number_format and/or formula into cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">possible value to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">possible number format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param formula:</th><td class=\"field-body\">possible format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Write value, number_format and/or formula into cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Application.py",
                "lineno": 261
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Excel.Files": {
        "name": "RPA.Excel.Files",
        "doc": "<div class=\"document\">\n<p>The <cite>Excel.Files</cite> library can be used to read and write Excel\nfiles without the need to start the actual Excel application.</p>\n<p>It supports both legacy <tt class=\"docutils literal\">.xls</tt> files and modern <tt class=\"docutils literal\">.xlsx</tt> files.</p>\n<p><strong>Note:</strong> To run macros or load password protected worksheets,\nplease use the Excel application library.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>A common use-case is to load an existing Excel file as a table,\nwhich can be iterated over later in a Robot Framework keyword or task:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Read orders as table</span><span class=\"p\">\n    </span><span class=\"nf\">Open workbook</span><span class=\"p\">    ${</span><span class=\"nv\">ORDERS_FILE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}=    </span><span class=\"nf\">Read worksheet</span><span class=\"p\">   </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">orders</span><span class=\"p\">}=       </span><span class=\"nf\">Create table</span><span class=\"p\">     ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">orders</span><span class=\"p\">}\n    [</span><span class=\"kn\">Teardown</span><span class=\"p\">]       </span><span class=\"nf\">Close workbook</span>\n</pre>\n<p>Processing all worksheets in the Excel file and checking row count:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}   </span><span class=\"s\">/path/to/excel.xlsx</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Rows in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]      </span><span class=\"nf\">Open Workbook</span><span class=\"p\">    ${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}=   </span><span class=\"nf\">List Worksheets</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}\n        ${</span><span class=\"nv\">count</span><span class=\"p\">}=  </span><span class=\"nf\">Get row count in the sheet</span><span class=\"p\">   ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">Worksheet '</span><span class=\"p\">${</span><span class=\"nv\">sheet</span><span class=\"p\">}</span><span class=\"s\">' has </span><span class=\"p\">${</span><span class=\"nv\">count</span><span class=\"p\">}</span><span class=\"s\"> rows</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Get row count in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]      ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">sheet</span><span class=\"p\">}=        </span><span class=\"nf\">Read Worksheet</span><span class=\"p\">   ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">rows</span><span class=\"p\">}=         </span><span class=\"nf\">Get Length</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">rows</span><span class=\"p\">}</span>\n</pre>\n<p>Creating a new Excel file with a dictionary:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">    </span><span class=\"s\">20</span><span class=\"p\">\n        &amp;{</span><span class=\"nv\">row</span><span class=\"p\">}=       </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">\n        ...           </span><span class=\"s\">Row No</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}\n        ...           </span><span class=\"s\">Amount</span><span class=\"p\">   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">row</span><span class=\"p\">}  </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p>Creating a new Excel file with a list:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Variables ***</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">heading</span><span class=\"p\">}   </span><span class=\"s\">Row No</span><span class=\"p\">   </span><span class=\"s\">Amount</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">rows</span><span class=\"p\">}      ${</span><span class=\"nv\">heading</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">   </span><span class=\"s\">1</span><span class=\"p\">  </span><span class=\"s\">20</span><span class=\"p\">\n        &#64;{</span><span class=\"nv\">row</span><span class=\"p\">}=         </span><span class=\"nf\">Create List</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append To List</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}  ${</span><span class=\"nv\">row</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be imported directly into Python.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Files</span> <span class=\"kn\">import</span> <span class=\"n\">Files</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">read_excel_worksheet</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">worksheet</span><span class=\"p\">):</span>\n    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span>\n    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">(</span><span class=\"n\">worksheet</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">close_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:03",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
        "lineno": 61,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Append Rows To Worksheet",
                "args": [
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    },
                    {
                        "name": "header",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header=False"
                    },
                    {
                        "name": "start",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "start=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Append values to the end of the worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Rows of values to append</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">Set rows according to existing header row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Start of data, NOTE: Only required when headers is True</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">content</tt> argument can be of any tabular format. Typically\nthis is a Table object created by the <tt class=\"docutils literal\">RPA.Tables</tt> library,\nbut it can also be a list of lists, or a list of dictionaries.</p>\n<p>If the <tt class=\"docutils literal\">header</tt> flag is enabled, the existing header in the worksheet\nis used to insert values in the correct columns. This assumes that\nthat source data has this data available.</p>\n<p>If the header is not on the first row of the worksheet,\nthe <tt class=\"docutils literal\">start</tt> argument can be used to give the correct row index.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Append an existing Table object\nOpen workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xls</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n\n</span><span class=\"c\"># Append to a worksheet with headers on row 5\nOpen workbook</span><span class=\"p\">    </span><span class=\"c\">customers.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">header=${TRUE}</span><span class=\"p\">   </span><span class=\"c\">start=5</span>\n</pre>\n</div>\n",
                "shortdoc": "Append values to the end of the worksheet.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 397
            },
            {
                "name": "Close Workbook",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close the active workbook.</p>\n</div>\n",
                "shortdoc": "Close the active workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 260
            },
            {
                "name": "Create Workbook",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    },
                    {
                        "name": "fmt",
                        "types": [],
                        "defaultValue": "xlsx",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fmt=xlsx"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create and open a new Excel workbook.</p>\n<p>Automatically also creates a new worksheet with the name &quot;Sheet&quot;.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Default save path for workbook</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format of workbook, i.e. xlsx or xls</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Create modern format workbook\nCreate workbook</span><span class=\"p\">    </span><span class=\"c\">fmt=xlsx</span><span class=\"p\">\n</span><span class=\"c\">Save workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Create legacy format workbook\nCreate workbook</span><span class=\"p\">    </span><span class=\"c\">fmt=xls</span><span class=\"p\">\n</span><span class=\"c\">Save workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xls</span>\n</pre>\n</div>\n",
                "shortdoc": "Create and open a new Excel workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 201
            },
            {
                "name": "Create Worksheet",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "content=None"
                    },
                    {
                        "name": "exist_ok",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "exist_ok=False"
                    },
                    {
                        "name": "header",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a new worksheet in the current workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of new worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Optional content for worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exist_ok:</th><td class=\"field-body\">If <cite>False</cite>, raise an error if name is already in use</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If content is provided, write headers to worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open workbook</span><span class=\"p\">       </span><span class=\"c\">customers.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Create worksheet</span><span class=\"p\">    </span><span class=\"c\">Orders</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a new worksheet in the current workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 331
            },
            {
                "name": "Find Empty Row",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find the first empty row after existing content,\nand return the row number.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Append rows to worksheet</span><span class=\"p\">     </span><span class=\"c\">${rows}</span><span class=\"p\">\n</span><span class=\"c\">${next}=</span><span class=\"p\">    </span><span class=\"c\">Find empty row</span><span class=\"p\">\n</span><span class=\"c\">Insert image to worksheet</span><span class=\"p\">    </span><span class=\"c\">${next}</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">    </span><span class=\"c\">screenshot.png</span>\n</pre>\n</div>\n",
                "shortdoc": "Find the first empty row after existing content, and return the row number.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 464
            },
            {
                "name": "Get Active Worksheet",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get the name of the worksheet which is currently active.</p>\n</div>\n",
                "shortdoc": "Get the name of the worksheet which is currently active.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 306
            },
            {
                "name": "Get Cell Value",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a cell value in the given worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to read, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Read header names\n${column1}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">\n</span><span class=\"c\">${column2}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">B</span><span class=\"p\">\n</span><span class=\"c\">${column3}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">C</span>\n</pre>\n</div>\n",
                "shortdoc": "Get a cell value in the given worksheet.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 481
            },
            {
                "name": "Get Worksheet Value",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Alias for keyword <tt class=\"docutils literal\">Get cell value</tt>, see the original keyword\nfor documentation.</p>\n</div>\n",
                "shortdoc": "Alias for keyword ``Get cell value``, see the original keyword for documentation.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 598
            },
            {
                "name": "Insert Image To Worksheet",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "scale",
                        "types": [],
                        "defaultValue": "1.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "scale=1.0"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Insert an image into the given cell.</p>\n<p>The <tt class=\"docutils literal\">path</tt> argument should be a local file path to the image file.</p>\n<p>By default the image is inserted in the original size, but it can\nbe scaled with the <tt class=\"docutils literal\">scale</tt> argument. It's scaled with a factor\nwhere the value <tt class=\"docutils literal\">1.0</tt> is the default.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scale:</th><td class=\"field-body\">Scale of image</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create worksheet</span><span class=\"p\">    </span><span class=\"c\">Order</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">     </span><span class=\"c\">${details}</span><span class=\"p\">\n</span><span class=\"c\">${last_row}=</span><span class=\"p\">    </span><span class=\"c\">Find empty row</span><span class=\"p\">\n</span><span class=\"c\">Insert image to worksheet</span><span class=\"p\">    </span><span class=\"c\">${last_row}</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">    </span><span class=\"c\">screenshot.png</span>\n</pre>\n</div>\n",
                "shortdoc": "Insert an image into the given cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 560
            },
            {
                "name": "List Worksheets",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List all names of worksheets in the given workbook.</p>\n</div>\n",
                "shortdoc": "List all names of worksheets in the given workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 296
            },
            {
                "name": "Open Workbook",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open an existing Excel workbook.</p>\n<p>Opens the workbook in memory and sets it as the active workbook.\nThis library can only have one workbook open at a time, and\nany previously opened workbooks are closed first.</p>\n<p>The file can be in either <tt class=\"docutils literal\">.xlsx</tt> or <tt class=\"docutils literal\">.xlsx</tt> format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to Excel file</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open workbook</span><span class=\"p\">    </span><span class=\"c\">path/to/file.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span>\n</pre>\n</div>\n",
                "shortdoc": "Open an existing Excel workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 235
            },
            {
                "name": "Read Worksheet",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    },
                    {
                        "name": "header",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header=False"
                    },
                    {
                        "name": "start",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "start=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read the content of a worksheet into a list of dictionaries.</p>\n<p>Each key in the dictionary will be either values from the header row,\nor Excel-style column letters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Workbook</span><span class=\"p\">   </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${rows}=</span><span class=\"p\">        </span><span class=\"c\">Read Worksheet</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">\n</span><span class=\"c\">Close Workbook</span>\n</pre>\n</div>\n",
                "shortdoc": "Read the content of a worksheet into a list of dictionaries.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 354
            },
            {
                "name": "Read Worksheet As Table",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    },
                    {
                        "name": "header",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header=False"
                    },
                    {
                        "name": "trim",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim=True"
                    },
                    {
                        "name": "start",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "start=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read the content of a worksheet into a Table container. Allows\nsorting/filtering/manipulating using the <tt class=\"docutils literal\">RPA.Tables</tt> library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Remove all empty rows from the end of the worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Row index to start reading data from (1-indexed)</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open Workbook</span><span class=\"p\">   </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${table}=</span><span class=\"p\">       </span><span class=\"c\">Read Worksheet As Table</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">\n</span><span class=\"c\">Close Workbook</span>\n</pre>\n</div>\n",
                "shortdoc": "Read the content of a worksheet into a Table container. Allows sorting/filtering/manipulating using the ``RPA.Tables`` library.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 375
            },
            {
                "name": "Remove Worksheet",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove a worksheet from the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to remove</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Remove last worksheet\nOpen workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${sheets}=</span><span class=\"p\">       </span><span class=\"c\">List worksheets</span><span class=\"p\">\n</span><span class=\"c\">Remove worksheet</span><span class=\"p\">    </span><span class=\"c\">${sheets}[-1]</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove a worksheet from the active workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 431
            },
            {
                "name": "Rename Worksheet",
                "args": [
                    {
                        "name": "src_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "src_name"
                    },
                    {
                        "name": "dst_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dst_name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Rename an existing worksheet in the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param src_name:</th><td class=\"field-body\">Current name of worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dst_name:</th><td class=\"field-body\">Future name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create workbook</span><span class=\"p\">\n</span><span class=\"c\">Rename worksheet</span><span class=\"p\">    </span><span class=\"c\">Sheet</span><span class=\"p\">    </span><span class=\"c\">Orders</span>\n</pre>\n</div>\n",
                "shortdoc": "Rename an existing worksheet in the active workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 448
            },
            {
                "name": "Save Workbook",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save the active workbook.</p>\n<p><strong>Note:</strong> No changes to the workbook are saved to the actual file unless\nthis keyword is called.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to save to. If not given, uses path given\nwhen opened or created.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save the active workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 267
            },
            {
                "name": "Set Active Worksheet",
                "args": [
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the active worksheet.</p>\n<p>This keyword can be used to set the default worksheet for keywords,\nwhich removes the need to specify the worksheet name for each keyword.\nIt can always be overridden on a per-keyword basis.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Index or name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Open workbook</span><span class=\"p\">    </span><span class=\"c\">complex.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Set active worksheet</span><span class=\"p\">    </span><span class=\"c\">Customers</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">    </span><span class=\"c\">${rows}</span>\n</pre>\n</div>\n",
                "shortdoc": "Set the active worksheet.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 311
            },
            {
                "name": "Set Cell Format",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "fmt",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "fmt"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set number format for cell.</p>\n<p>Does not affect the values themselves, but changes how the values\nare displayed when opening with an external application such as\nMicrosoft Excel or LibreOffice Calc.</p>\n<p>The <tt class=\"docutils literal\">fmt</tt> argument accepts all format code values that\nare supported by the aforementioned applications.</p>\n<p>Some examples of valid values:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"20%\" />\n<col width=\"80%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Format</th>\n<th class=\"head\">Explanation</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>0.00</td>\n<td>Number with two decimal precision</td>\n</tr>\n<tr><td>0%</td>\n<td>Percentage without decimals</td>\n</tr>\n<tr><td>MM/DD/YY</td>\n<td>Date with month, day, and year</td>\n</tr>\n<tr><td>&#64;</td>\n<td>Text value</td>\n</tr>\n<tr><td>BOOLEAN</td>\n<td>Boolean value</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set value to have one decimal precision\nSet cell value</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">B</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">\n</span><span class=\"c\">Set cell format</span><span class=\"p\">   </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">B</span><span class=\"p\">    </span><span class=\"c\">00.0</span>\n</pre>\n</div>\n",
                "shortdoc": "Set number format for cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 527
            },
            {
                "name": "Set Cell Value",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    },
                    {
                        "name": "fmt",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fmt=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set a cell value in the given worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format code for cell (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set a value in the first row and column\nSet cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">Some value</span><span class=\"p\">\n</span><span class=\"c\">Set cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">    </span><span class=\"c\">Some value</span><span class=\"p\">\n\n</span><span class=\"c\"># Set a value with cell formatting\nSet cell value</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">B</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">fmt=0%</span>\n</pre>\n</div>\n",
                "shortdoc": "Set a cell value in the given worksheet.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 500
            },
            {
                "name": "Set Worksheet Value",
                "args": [
                    {
                        "name": "row",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row"
                    },
                    {
                        "name": "column",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column"
                    },
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    },
                    {
                        "name": "fmt",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fmt=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Alias for keyword <tt class=\"docutils literal\">Set cell value</tt>, see the original keyword\nfor documentation.</p>\n</div>\n",
                "shortdoc": "Alias for keyword ``Set cell value``, see the original keyword for documentation.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 604
            },
            {
                "name": "Worksheet Exists",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return True if worksheet with given name is in workbook.</p>\n</div>\n",
                "shortdoc": "Return True if worksheet with given name is in workbook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Excel\\Files.py",
                "lineno": 301
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.FTP": {
        "name": "RPA.FTP",
        "doc": "<div class=\"document\">\n<p><cite>FTP</cite> library can be used to access an FTP server,\nand interact with files.</p>\n<p>The library is based on Python's built-in <a class=\"reference external\" href=\"https://docs.python.org/3/library/ftplib.html\">ftplib</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.FTP</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">HOST</span><span class=\"p\">}       </span><span class=\"s\">127.0.0.1</span><span class=\"p\">\n${</span><span class=\"nv\">PORT</span><span class=\"p\">}       </span><span class=\"s\">27345</span><span class=\"p\">\n${</span><span class=\"nv\">USER</span><span class=\"p\">}       </span><span class=\"s\">user</span><span class=\"p\">\n${</span><span class=\"nv\">PASS</span><span class=\"p\">}       </span><span class=\"s\">12345</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">List files on the server directory</span><span class=\"p\">\n    </span><span class=\"nf\">Connect</span><span class=\"p\">   ${</span><span class=\"nv\">HOST</span><span class=\"p\">}  ${</span><span class=\"nv\">PORT</span><span class=\"p\">}  ${</span><span class=\"nv\">USER</span><span class=\"p\">}  ${</span><span class=\"nv\">PASS</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}  </span><span class=\"nf\">List Files</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.FTP</span> <span class=\"kn\">import</span> <span class=\"n\">FTP</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">FTP</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"mi\">27345</span><span class=\"p\">,</span> <span class=\"s1\">'user'</span><span class=\"p\">,</span> <span class=\"s1\">'12345'</span><span class=\"p\">)</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:03",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
        "lineno": 39,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Abort",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Abort a file transfer in progress</p>\n</div>\n",
                "shortdoc": "Abort a file transfer in progress",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 276
            },
            {
                "name": "Close",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close connection to the server unilaterally</p>\n</div>\n",
                "shortdoc": "Close connection to the server unilaterally",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 154
            },
            {
                "name": "Connect",
                "args": [
                    {
                        "name": "host",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "host: str"
                    },
                    {
                        "name": "port",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "21",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "port: int = 21"
                    },
                    {
                        "name": "user",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "tls",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tls: bool = False"
                    },
                    {
                        "name": "transfer",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "passive",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "transfer: str = passive"
                    },
                    {
                        "name": "keyfile",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "keyfile: str | None = None"
                    },
                    {
                        "name": "certfile",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "certfile: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int | None = None"
                    },
                    {
                        "name": "source_address",
                        "types": [
                            "Tuple[str, int]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_address: Tuple[str, int] | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param host:</th><td class=\"field-body\">address of the server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param port:</th><td class=\"field-body\">port of the server, defaults to 21</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">login name, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">login password, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param tls:</th><td class=\"field-body\">connect using TLS support, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param transfer:</th><td class=\"field-body\">mode of the transfer, defaults to &quot;passive&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keyfile:</th><td class=\"field-body\">path to private key file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param certfile:</th><td class=\"field-body\">path to certificate file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">a timeout in seconds for the connection attempt</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_address:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">socket to bind to as its source address before connecting</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises AuthenticationException:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on authentication error with the server</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Connect to FTP server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 90
            },
            {
                "name": "Cwd",
                "args": [
                    {
                        "name": "dirname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dirname: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Change working directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Change working directory on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 199
            },
            {
                "name": "Delete",
                "args": [
                    {
                        "name": "filepath",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filepath: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">path to server file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete file on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 239
            },
            {
                "name": "Download",
                "args": [
                    {
                        "name": "remotefile",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "remotefile: str"
                    },
                    {
                        "name": "localfile",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "localfile: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Download file from FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param remotefile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to remote file on the server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param localfile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the downloaded file on the local filesystem,\nif <cite>None</cite> will have same name as remote file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Download file from FTP server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 171
            },
            {
                "name": "File Size",
                "args": [
                    {
                        "name": "filepath",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filepath: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return byte size of the file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">path to server file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Return byte size of the file on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 267
            },
            {
                "name": "Get Welcome Message",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get server welcome message</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">welcome message</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get server welcome message",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 281
            },
            {
                "name": "List Files",
                "args": [
                    {
                        "name": "dirname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "dirname: str = "
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List files on the server directory</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List files on the server directory",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 228
            },
            {
                "name": "Mkd",
                "args": [
                    {
                        "name": "dirname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dirname: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a new directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create a new directory on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 212
            },
            {
                "name": "Pwd",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get current working directory on the server</p>\n</div>\n",
                "shortdoc": "Get current working directory on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 207
            },
            {
                "name": "Quit",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Send QUIT command to the server and close connection</p>\n</div>\n",
                "shortdoc": "Send QUIT command to the server and close connection",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 144
            },
            {
                "name": "Rename",
                "args": [
                    {
                        "name": "fromname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "fromname: str"
                    },
                    {
                        "name": "toname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "toname: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Rename file on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param fromname:</th><td class=\"field-body\">current name of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param toname:</th><td class=\"field-body\">new name for the file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Rename file on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 247
            },
            {
                "name": "Rmd",
                "args": [
                    {
                        "name": "dirname",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "dirname: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove directory on the server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">name of the directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Remove directory on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 220
            },
            {
                "name": "Send Command",
                "args": [
                    {
                        "name": "command",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "command: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Execute command on the server</p>\n<p>List of FTP commands:\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/List_of_FTP_commands\">https://en.wikipedia.org/wiki/List_of_FTP_commands</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param command:</th><td class=\"field-body\">name of the command to send</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Execute command on the server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 256
            },
            {
                "name": "Set Ascii Mode",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Set transfer mode to ASCII</p>\n</div>\n",
                "shortdoc": "Set transfer mode to ASCII",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 303
            },
            {
                "name": "Set Binary Mode",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Set transfer mode to BINARY</p>\n</div>\n",
                "shortdoc": "Set transfer mode to BINARY",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 307
            },
            {
                "name": "Set Debug Level",
                "args": [
                    {
                        "name": "level",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "level: int = 0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set debug level for the library</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param level:</th><td class=\"field-body\">integer value of debug level, defaults to 0</td>\n</tr>\n</tbody>\n</table>\n<p>0 - no debugging output\n1 - moderate amount of debugging\n2+ - higher amount of debugging</p>\n</div>\n",
                "shortdoc": "Set debug level for the library",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 289
            },
            {
                "name": "Upload",
                "args": [
                    {
                        "name": "localfile",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "localfile: str"
                    },
                    {
                        "name": "remotefile",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "remotefile: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upload file to FTP server</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param localfile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to file to upload</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param remotefile:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of uploaded file in the server</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Upload file to FTP server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FTP.py",
                "lineno": 161
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.FileSystem": {
        "name": "RPA.FileSystem",
        "doc": "<div class=\"document\">\n<p>The <cite>FileSystem</cite> library can be used to interact with files and directories\non the local computer. It can inspect and list files, remove and create them,\nread contents from files, and write data out.</p>\n<p>It shadows the built-in <cite>OperatingSystem</cite> library but contains keywords\nwhich are more RPA-oriented.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The library allows, for instance, iterating over files and inspecting them.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.FileSystem</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Delete large files</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    </span><span class=\"s\">archive/orders/</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">FILES</span><span class=\"p\">}\n        </span><span class=\"nf\">Run keyword if</span><span class=\"p\">    ${</span><span class=\"nv\">file.size</span><span class=\"p\">}</span><span class=\"s\"> &gt; 10**8</span><span class=\"p\">    </span><span class=\"s\">Remove file</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Read process output</span><span class=\"p\">\n    </span><span class=\"nf\">Start external program</span><span class=\"p\">\n    </span><span class=\"nf\">Wait until modified</span><span class=\"p\">    </span><span class=\"s\">process.log</span><span class=\"p\">\n    ${</span><span class=\"nv\">output</span><span class=\"p\">}=  </span><span class=\"nf\">Read file</span><span class=\"p\">  </span><span class=\"s\">process.log</span><span class=\"p\">\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]    ${</span><span class=\"nv\">output</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used inside Python.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.FileSystem</span> <span class=\"kn\">import</span> <span class=\"n\">FileSystem</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">move_to_archive</span><span class=\"p\">():</span>\n    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">FileSystem</span><span class=\"p\">()</span>\n\n    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">find_files</span><span class=\"p\">(</span><span class=\"s2\">&quot;**/*.xlsx&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_directory</span><span class=\"p\">(</span><span class=\"s2\">&quot;archive&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">move_files</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">,</span> <span class=\"s2\">&quot;archive&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:03",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
        "lineno": 70,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Absolute Path",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns the absolute path to a file, and resolves symlinks.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path that will be resolved</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">absolute path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns the absolute path to a file, and resolves symlinks.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 512
            },
            {
                "name": "Append To Binary File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Appends binary content to the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to append</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Appends binary content to the given file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 330
            },
            {
                "name": "Append To File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Appends text to the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to append to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to append</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of appended content</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Appends text to the given file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 317
            },
            {
                "name": "Change File Extension",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "extension",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "extension"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Replaces file extension for file at given path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to rename</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param extension:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">new extension, e.g. .xlsx</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Replaces file extension for file at given path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 495
            },
            {
                "name": "Copy Directory",
                "args": [
                    {
                        "name": "source",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Copy directory from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">path to source directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to copy destination</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Copy directory from source path to destination path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 427
            },
            {
                "name": "Copy File",
                "args": [
                    {
                        "name": "source",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Copy a file from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">path to source file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to copy destination</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Copy a file from source path to destination path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 395
            },
            {
                "name": "Copy Files",
                "args": [
                    {
                        "name": "sources",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sources"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Copy multiple files to destination folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sources:</th><td class=\"field-body\">list of source files</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to destination folder</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Copy multiple files to destination folder.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 410
            },
            {
                "name": "Create Binary File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "content=None"
                    },
                    {
                        "name": "overwrite",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Creates a new binary file, and writes content if any is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to write to file (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Creates a new binary file, and writes content if any is given.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 303
            },
            {
                "name": "Create Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "parents",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "parents=False"
                    },
                    {
                        "name": "exist_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "exist_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Creates a directory and (optionally) non-existing parent directories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to new directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param parents:</th><td class=\"field-body\">create missing parent directories</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exist_ok:</th><td class=\"field-body\">continue without errors if directory already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Creates a directory and (optionally) non-existing parent directories.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 342
            },
            {
                "name": "Create File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "content=None"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    },
                    {
                        "name": "overwrite",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Creates a new text file, and writes content if any is given.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">content to write to file (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of written content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Creates a new text file, and writes content if any is given.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 288
            },
            {
                "name": "Does Directory Exist",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given directory exists, False if not.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given directory exists, False if not.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 213
            },
            {
                "name": "Does Directory Not Exist",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the directory does not exist, False if it does.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the directory does not exist, False if it does.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 220
            },
            {
                "name": "Does File Exist",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given file exists, False if not.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given file exists, False if not.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 199
            },
            {
                "name": "Does File Not Exist",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the file does not exist, False if it does.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the file does not exist, False if it does.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 206
            },
            {
                "name": "Empty Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes all the files in the given directory.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">directory to remove files from</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Removes all the files in the given directory.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 384
            },
            {
                "name": "Find Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    },
                    {
                        "name": "include_dirs",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_dirs=True"
                    },
                    {
                        "name": "include_files",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_files=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find files recursively according to a pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">search path in glob format pattern,\ne.g. <em>.xls or *</em>/orders.txt</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_dirs:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include directories in results</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_files:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include files in results</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of paths that match the pattern</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Find files recursively according to a pattern.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 125
            },
            {
                "name": "Get File Creation Date",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns the creation time in seconds.\nNote: Linux sets this whenever file metadata changes</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns the creation time in seconds. Note: Linux sets this whenever file metadata changes",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 550
            },
            {
                "name": "Get File Extension",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns the suffix for the file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns the suffix for the file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 535
            },
            {
                "name": "Get File Modified Date",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns the modified time in seconds.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns the modified time in seconds.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 542
            },
            {
                "name": "Get File Name",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns only the filename portion of a path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns only the filename portion of a path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 528
            },
            {
                "name": "Get File Owner",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return the name of the user who owns the file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Return the name of the user who owns the file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 567
            },
            {
                "name": "Get File Size",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns the file size in bytes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns the file size in bytes.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 559
            },
            {
                "name": "Is Directory Empty",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given directory has no files or subdirectories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given directory has no files or subdirectories.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 227
            },
            {
                "name": "Is Directory Not Empty",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given directory has any files or subdirectories.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given directory has any files or subdirectories.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 238
            },
            {
                "name": "Is File Empty",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given file has no content, i.e. has zero size.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given file has no content, i.e. has zero size.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 245
            },
            {
                "name": "Is File Not Empty",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Returns True if the given file has content, i.e. larger than zero size.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to inspected file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Returns True if the given file has content, i.e. larger than zero size.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 255
            },
            {
                "name": "Join Path",
                "args": [
                    {
                        "name": "parts",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*parts"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Joins multiple parts of a path together.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param parts:</th><td class=\"field-body\">Components of the path, e.g. dir, subdir, filename.ext</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Joins multiple parts of a path together.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 504
            },
            {
                "name": "List Directories In Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Lists all the directories in the given directory, relative to it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory for search, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Lists all the directories in the given directory, relative to it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 164
            },
            {
                "name": "List Files In Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Lists all the files in the given directory, relative to it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory for search, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Lists all the files in the given directory, relative to it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 156
            },
            {
                "name": "Log Directory Tree",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Logs all the files in the directory recursively.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">base directory to start from, defaults to current working dir</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Logs all the files in the directory recursively.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 172
            },
            {
                "name": "Move Directory",
                "args": [
                    {
                        "name": "source",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    },
                    {
                        "name": "overwrite",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move a directory from source path to destination path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source directory path for moving</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination directory if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Move a directory from source path to destination path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 478
            },
            {
                "name": "Move File",
                "args": [
                    {
                        "name": "source",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    },
                    {
                        "name": "overwrite",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move a file from source path to destination path,\noptionally overwriting the destination.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source file path for moving</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination file if it already exists</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Move a file from source path to destination path, optionally overwriting the destination.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 443
            },
            {
                "name": "Move Files",
                "args": [
                    {
                        "name": "sources",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sources"
                    },
                    {
                        "name": "destination",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "destination"
                    },
                    {
                        "name": "overwrite",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Move multiple files to the destination folder.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sources:</th><td class=\"field-body\">list of files to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param destination:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to move destination</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param overwrite:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">replace destination files if they already exist</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Move multiple files to the destination folder.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 462
            },
            {
                "name": "Normalize Path",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes redundant separators or up-level references from path.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path that will be normalized</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">path to file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Removes redundant separators or up-level references from path.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 520
            },
            {
                "name": "Read Binary File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Reads a file in binary mode and returns the content.\nDoes not attempt to decode the content in any way.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to read</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Reads a file in binary mode and returns the content. Does not attempt to decode the content in any way.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 271
            },
            {
                "name": "Read File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Reads a file as text, with given <cite>encoding</cite>, and returns the content.&quot;</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Reads a file as text, with given `encoding`, and returns the content.\"",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 262
            },
            {
                "name": "Remove Directory",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "recursive",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "recursive=False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes the given directory, and optionally everything it contains.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recursive:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">remove all subdirectories and files</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Removes the given directory, and optionally everything it contains.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 373
            },
            {
                "name": "Remove File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes the given file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to the file to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ignore non-existent file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Removes the given file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 351
            },
            {
                "name": "Remove Files",
                "args": [
                    {
                        "name": "paths",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*paths"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes multiple files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param paths:</th><td class=\"field-body\">paths to files to be removed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ignore non-existent files</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Removes multiple files.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 363
            },
            {
                "name": "Run Keyword If File Exists",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "keyword",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>If file exists at <cite>path</cite>, execute given keyword with arguments.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file to inspect</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keyword:</th><td class=\"field-body\">Robot Framework keyword to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">arguments to keyword</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Run keyword if file exists</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">Process orders</span>\n</pre>\n</div>\n",
                "shortdoc": "If file exists at `path`, execute given keyword with arguments.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 633
            },
            {
                "name": "Touch File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Creates a file with no content, or if file already exists,\nupdates the modification and access times.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to file which is touched</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Creates a file with no content, or if file already exists, updates the modification and access times.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 280
            },
            {
                "name": "Wait Until Created",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=5.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Poll path until it exists, or raise exception if timeout\nis reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Poll path until it exists, or raise exception if timeout is reached.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 598
            },
            {
                "name": "Wait Until Modified",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=5.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Poll path until it has been modified after the keyword was called,\nor raise exception if timeout is reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Poll path until it has been modified after the keyword was called, or raise exception if timeout is reached.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 610
            },
            {
                "name": "Wait Until Removed",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=5.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Poll path until it doesn't exist, or raise exception if timeout\nis reached.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to poll</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">time in seconds until keyword fails</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Poll path until it doesn't exist, or raise exception if timeout is reached.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\FileSystem.py",
                "lineno": 623
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.HTTP": {
        "name": "RPA.HTTP",
        "doc": "<p>RPA Framework HTTP library that extends functionality of RequestsLibrary, for more information see: <a href=\"https://github.com/MarketSquare/robotframework-requests\">https://github.com/MarketSquare/robotframework-requests</a></p>",
        "version": "0.9.2",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\HTTP.py",
        "lineno": 11,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Initialize self.  See help(type(self)) for accurate signature.</p>",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\HTTP.py",
                "lineno": 19
            }
        ],
        "keywords": [
            {
                "name": "Create Client Cert Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers={}"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies={}"
                    },
                    {
                        "name": "client_certs",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "client_certs=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    },
                    {
                        "name": "proxies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxies=None"
                    },
                    {
                        "name": "verify",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify=False"
                    },
                    {
                        "name": "debug",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug=0"
                    },
                    {
                        "name": "max_retries",
                        "types": [],
                        "defaultValue": "3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_retries=3"
                    },
                    {
                        "name": "backoff_factor",
                        "types": [],
                        "defaultValue": "0.1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backoff_factor=0.1"
                    },
                    {
                        "name": "disable_warnings",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "disable_warnings=0"
                    },
                    {
                        "name": "retry_status_list",
                        "types": [],
                        "defaultValue": "[]",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_status_list=[]"
                    },
                    {
                        "name": "retry_method_list",
                        "types": [],
                        "defaultValue": "['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_method_list=['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']"
                    }
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>client_certs</code> ['client certificate', 'client key'] PEM files containing the client key and certificate</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 191
            },
            {
                "name": "Create Custom Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    },
                    {
                        "name": "auth",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "auth"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers={}"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies={}"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    },
                    {
                        "name": "proxies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxies=None"
                    },
                    {
                        "name": "verify",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify=False"
                    },
                    {
                        "name": "debug",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug=0"
                    },
                    {
                        "name": "max_retries",
                        "types": [],
                        "defaultValue": "3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_retries=3"
                    },
                    {
                        "name": "backoff_factor",
                        "types": [],
                        "defaultValue": "0.1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backoff_factor=0.1"
                    },
                    {
                        "name": "disable_warnings",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "disable_warnings=0"
                    },
                    {
                        "name": "retry_status_list",
                        "types": [],
                        "defaultValue": "[]",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_status_list=[]"
                    },
                    {
                        "name": "retry_method_list",
                        "types": [],
                        "defaultValue": "['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_method_list=['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']"
                    }
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> A Custom Authentication object to be passed on to the requests library. <a href=\"http://docs.python-requests.org/en/master/user/advanced/#custom-authentication\">http://docs.python-requests.org/en/master/user/advanced/#custom-authentication</a></p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 277
            },
            {
                "name": "Create Digest Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    },
                    {
                        "name": "auth",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "auth"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers={}"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies={}"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    },
                    {
                        "name": "proxies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxies=None"
                    },
                    {
                        "name": "verify",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify=False"
                    },
                    {
                        "name": "debug",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug=0"
                    },
                    {
                        "name": "max_retries",
                        "types": [],
                        "defaultValue": "3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_retries=3"
                    },
                    {
                        "name": "backoff_factor",
                        "types": [],
                        "defaultValue": "0.1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backoff_factor=0.1"
                    },
                    {
                        "name": "disable_warnings",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "disable_warnings=0"
                    },
                    {
                        "name": "retry_status_list",
                        "types": [],
                        "defaultValue": "[]",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_status_list=[]"
                    },
                    {
                        "name": "retry_method_list",
                        "types": [],
                        "defaultValue": "['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_method_list=['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']"
                    }
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 361
            },
            {
                "name": "Create Ntlm Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    },
                    {
                        "name": "auth",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "auth"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers={}"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies={}"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    },
                    {
                        "name": "proxies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxies=None"
                    },
                    {
                        "name": "verify",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify=False"
                    },
                    {
                        "name": "debug",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug=0"
                    },
                    {
                        "name": "max_retries",
                        "types": [],
                        "defaultValue": "3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_retries=3"
                    },
                    {
                        "name": "backoff_factor",
                        "types": [],
                        "defaultValue": "0.1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backoff_factor=0.1"
                    },
                    {
                        "name": "disable_warnings",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "disable_warnings=0"
                    },
                    {
                        "name": "retry_status_list",
                        "types": [],
                        "defaultValue": "[]",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_status_list=[]"
                    },
                    {
                        "name": "retry_method_list",
                        "types": [],
                        "defaultValue": "['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_method_list=['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']"
                    }
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> ['DOMAIN', 'username', 'password'] for NTLM Authentication</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided. Defaults to False.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 439
            },
            {
                "name": "Create Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "url",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers={}"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "{}",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies={}"
                    },
                    {
                        "name": "auth",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "auth=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    },
                    {
                        "name": "proxies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "proxies=None"
                    },
                    {
                        "name": "verify",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify=False"
                    },
                    {
                        "name": "debug",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "debug=0"
                    },
                    {
                        "name": "max_retries",
                        "types": [],
                        "defaultValue": "3",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_retries=3"
                    },
                    {
                        "name": "backoff_factor",
                        "types": [],
                        "defaultValue": "0.1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "backoff_factor=0.1"
                    },
                    {
                        "name": "disable_warnings",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "disable_warnings=0"
                    },
                    {
                        "name": "retry_status_list",
                        "types": [],
                        "defaultValue": "[]",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_status_list=[]"
                    },
                    {
                        "name": "retry_method_list",
                        "types": [],
                        "defaultValue": "['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "retry_method_list=['GET', 'OPTIONS', 'DELETE', 'PUT', 'HEAD', 'TRACE']"
                    }
                ],
                "doc": "<p>Create Session: create a HTTP session to a server</p>\n<p><code>alias</code> Robot Framework alias to identify the session</p>\n<p><code>url</code> Base url of the server</p>\n<p><code>headers</code> Dictionary of default headers</p>\n<p><code>cookies</code> Dictionary of cookies</p>\n<p><code>auth</code> List of username &amp; password for HTTP Basic Auth</p>\n<p><code>timeout</code> Connection timeout</p>\n<p><code>proxies</code> Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</p>\n<p><code>verify</code> Whether the SSL cert will be verified. A CA_BUNDLE path can also be provided.</p>\n<p><code>debug</code> Enable http verbosity option more information <a href=\"https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel\">https://docs.python.org/2/library/httplib.html#httplib.HTTPConnection.set_debuglevel</a></p>\n<p><code>max_retries</code> Number of maximum retries each connection should attempt. By default it will retry 3 times in case of connection errors only. A 0 value will disable any kind of retries regardless of other retry settings. In case the number of retries is reached a retry exception is raised.</p>\n<p><code>disable_warnings</code> Disable requests warning useful when you have large number of testcases</p>\n<p><code>backoff_factor</code> Introduces a delay time between retries that is longer after each retry. eg. if backoff_factor is set to 0.1 the sleep between attemps will be: 0.0, 0.2, 0.4 More info here: <a href=\"https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html\">https://urllib3.readthedocs.io/en/latest/reference/urllib3.util.html</a></p>\n<p><code>retry_method_list</code> List of uppercased HTTP method verbs where retries are allowed. By default retries are allowed only on HTTP requests methods that are considered to be idempotent (multiple requests with the same parameters end with the same state). eg. set to ['POST', 'GET'] to retry only those kind of requests.</p>\n<p><code>retry_status_list</code> List of integer HTTP status codes that, if returned, a retry is attempted. eg. set to [502, 503] to retry requests if those status are returned. Note that max_retries must be greater than 0.</p>",
                "shortdoc": "Create Session: create a HTTP session to a server",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 109
            },
            {
                "name": "DELETE",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a DELETE request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a DELETE request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "Delete All Sessions",
                "args": [],
                "doc": "<p>Removes all the session objects</p>",
                "shortdoc": "Removes all the session objects",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 544
            },
            {
                "name": "DELETE On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a DELETE request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a DELETE request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Delete Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "data",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data=None"
                    },
                    {
                        "name": "json",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json=None"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#DELETE%20On%20Session\" class=\"name\">DELETE On Session</a> instead.</p>\n<p>Send a DELETE request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the DELETE request to</p>\n<p><code>json</code> a value that will be json encoded and sent as request data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `DELETE On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 261
            },
            {
                "name": "Download",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "target_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_file: str | None = None"
                    },
                    {
                        "name": "verify",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify: bool | str = True"
                    },
                    {
                        "name": "force_new_session",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "force_new_session: bool = False"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = False"
                    },
                    {
                        "name": "stream",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "stream: bool = False"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>An alias for the <code>HTTP Get</code> keyword.</p>\n<p>The difference in use is that the URL is always downloaded based on the URL path (even without <code>target_file</code>). If there is a filename in the path, then that is used as <code>target_file</code> to save to. By default, the filename will be \"downloaded.html\".</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code>, a CA_BUNDLE path can also be provided</p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>\n<p><code>stream</code> if <code>False</code>, the response content will be immediately downloaded</p>",
                "shortdoc": "An alias for the ``HTTP Get`` keyword.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\HTTP.py",
                "lineno": 104
            },
            {
                "name": "GET",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a GET request.</p>\n<p>The endpoint used to retrieve the resource is the <code>url</code>, while query string parameters can be passed as string, dictionary (or list of tuples or bytes) through the <code>params</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> here is a list:</p>\n<table border=\"1\">\n<tr>\n<td><code>data</code></td>\n<td>Dictionary, list of tuples, bytes, or file-like object to send in the body of the request.</td>\n</tr>\n<tr>\n<td><code>json</code></td>\n<td>A JSON serializable Python object to send in the body of the request.</td>\n</tr>\n<tr>\n<td><code>headers</code></td>\n<td>Dictionary of HTTP Headers to send with the request.</td>\n</tr>\n<tr>\n<td><code>cookies</code></td>\n<td>Dict or CookieJar object to send with the request.</td>\n</tr>\n<tr>\n<td><code>files</code></td>\n<td>Dictionary of file-like-objects (or <code>{'name': file-tuple}</code>) for multipart encoding upload.</td>\n</tr>\n<tr>\n<td><code>file-tuple</code></td>\n<td>can be a 2-tuple <code>('filename', fileobj)</code>, 3-tuple <code>('filename', fileobj, 'content_type')</code> or a 4-tuple <code>('filename', fileobj, 'content_type', custom_headers)</code>, where <code>'content-type'</code> is a string defining the content type of the given file and <code>custom_headers</code> a dict-like object containing additional headers to add for the file.</td>\n</tr>\n<tr>\n<td><code>auth</code></td>\n<td>Auth tuple to enable Basic/Digest/Custom HTTP Auth.</td>\n</tr>\n<tr>\n<td><code>timeout</code></td>\n<td>How many seconds to wait for the server to send data before giving up, as a float, or a <code>(connect timeout, read timeout)</code> tuple.</td>\n</tr>\n<tr>\n<td><code>allow_redirects</code></td>\n<td>Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>proxies</code></td>\n<td>Dictionary mapping protocol or protocol and host to the URL of the proxy (e.g. {'http': 'foo.bar:3128', '<a href=\"http://host.name\">http://host.name</a>': 'foo.bar:4012'})</td>\n</tr>\n<tr>\n<td><code>verify</code></td>\n<td>Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use. Defaults to <code>True</code>. Warning: if a session has been created with <code>verify=False</code> any other requests will not verify the SSL certificate.</td>\n</tr>\n<tr>\n<td><code>stream</code></td>\n<td>if <code>False</code>, the response content will be immediately downloaded.</td>\n</tr>\n<tr>\n<td><code>cert</code></td>\n<td>if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.</td>\n</tr>\n</table>\n<p>For more updated and complete information verify the official Requests api documentation: <a href=\"https://requests.readthedocs.io/en/latest/api/\">https://requests.readthedocs.io/en/latest/api/</a></p>",
                "shortdoc": "Sends a GET request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "Get Current Session Alias",
                "args": [],
                "doc": "<p>Get request session alias that was used with the <code>HTTP Get</code> keyword.</p>\n<p>Return name of session alias.</p>",
                "shortdoc": "Get request session alias that was used with the ``HTTP Get`` keyword.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\HTTP.py",
                "lineno": 97
            },
            {
                "name": "Get File For Streaming Upload",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    }
                ],
                "doc": "<p>Opens and returns a file descriptor of a specified file to be passed as <code>data</code> parameter to other requests keywords.</p>\n<p>This allows streaming upload of large files without reading them into memory.</p>\n<p>File descriptor is binary mode and read only. Requests keywords will automatically close the file, if used outside this library it's up to the caller to close it.</p>",
                "shortdoc": "Opens and returns a file descriptor of a specified file to be passed as ``data`` parameter to other requests keywords.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\RequestsKeywords.py",
                "lineno": 141
            },
            {
                "name": "GET On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a GET request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the resource is the <code>url</code>, while query string parameters can be passed as string, dictionary (or list of tuples or bytes) through the <code>params</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a GET request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Get Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "data",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data=None"
                    },
                    {
                        "name": "json",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json=None"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a> instead.</p>\n<p>Send a GET request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the GET request to</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as GET data or binary data that is sent as the raw body content</p>\n<p><code>json</code> a value that will be json encoded and sent as GET data if data is not specified</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `GET On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 36
            },
            {
                "name": "HEAD",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a HEAD request.</p>\n<p>The endpoint used to retrieve the HTTP headers is the <code>url</code>.</p>\n<p><code>allow_redirects</code> parameter is not provided, it will be set to <span class=\"name\">False</span> (as opposed to the default behavior).</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a HEAD request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "HEAD On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a HEAD request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the HTTP headers is the <code>url</code>.</p>\n<p><code>allow_redirects</code> parameter is not provided, it will be set to <span class=\"name\">False</span> (as opposed to the default behavior).</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a HEAD request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Head Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#HEAD%20On%20Session\" class=\"name\">HEAD On Session</a> instead.</p>\n<p>Send a HEAD request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the HEAD request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `HEAD On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 308
            },
            {
                "name": "Http Get",
                "args": [
                    {
                        "name": "url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "url: str"
                    },
                    {
                        "name": "target_file",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_file: str | None = None"
                    },
                    {
                        "name": "verify",
                        "types": [
                            "bool",
                            "str"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "verify: bool | str = True"
                    },
                    {
                        "name": "force_new_session",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "force_new_session: bool = False"
                    },
                    {
                        "name": "overwrite",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "overwrite: bool = False"
                    },
                    {
                        "name": "stream",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "stream: bool = False"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>A helper method for <code>Get Request</code> that will create a session, perform GET request, and store the target file, if set by the <code>target_file</code> parameter.</p>\n<p>The old session will be used if the URL scheme and the host are the same as previously, e.g., '<a href=\"https://www.google.fi\">https://www.google.fi</a>' part of the URL.</p>\n<p><code>url</code> target URL for GET request</p>\n<p><code>target_file</code> filepath to save request content, default <code>None</code></p>\n<p><code>verify</code> if SSL verification should be done, default <code>True</code>, a CA_BUNDLE path can also be provided</p>\n<p><code>force_new_session</code> if new HTTP session should be created, default <code>False</code></p>\n<p><code>overwrite</code> used together with <code>target_file</code>, if <code>True</code> will overwrite the target file, default <code>False</code></p>\n<p><code>stream</code> if <code>False</code>, the response content will be immediately downloaded</p>\n<p>Returns request response.</p>",
                "shortdoc": "A helper method for ``Get Request`` that will create a session, perform GET request, and store the target file, if set by the ``target_file`` parameter.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\HTTP.py",
                "lineno": 26
            },
            {
                "name": "OPTIONS",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a OPTIONS request.</p>\n<p>The endpoint used to retrieve the resource is the <code>url</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a OPTIONS request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "OPTIONS On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a OPTIONS request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to retrieve the resource is the <code>url</code>.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a OPTIONS request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Options Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#OPTIONS%20On%20Session\" class=\"name\">OPTIONS On Session</a> instead.</p>\n<p>Send an OPTIONS request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the OPTIONS request to</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `OPTIONS On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 344
            },
            {
                "name": "PATCH",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a PUT request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a PUT request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "PATCH On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a PATCH request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a PATCH request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Patch Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "data",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data=None"
                    },
                    {
                        "name": "json",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json=None"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "files",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#PATCH%20On%20Session\" class=\"name\">PATCH On Session</a> instead.</p>\n<p>Send a PATCH request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PATCH request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PATCH data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PATCH data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to PATCH to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `PATCH On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 147
            },
            {
                "name": "POST",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a POST request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a POST request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "POST On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a POST request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a POST request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Post Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "data",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data=None"
                    },
                    {
                        "name": "json",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json=None"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "files",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#POST%20On%20Session\" class=\"name\">POST On Session</a> instead.</p>\n<p>Send a POST request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the POST request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as POST data or binary data that is sent as the raw body content or passed as such for multipart form data if <code>files</code> is also defined or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as POST data if files or data is not specified</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>files</code> a dictionary of file names containing file data to POST to the server</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `POST On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 88
            },
            {
                "name": "PUT",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a PUT request.</p>\n<p>The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a PUT request.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 136
            },
            {
                "name": "PUT On Session",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sends a PUT request on a previously created HTTP Session.</p>\n<p>Session will be identified using the <code>alias</code> name. The endpoint used to send the request is the <code>url</code> parameter, while its body can be passed using <code>data</code> or <code>json</code> parameters.</p>\n<p><code>data</code> can be a dictionary, list of tuples, bytes, or file-like object. If you want to pass a json body pass a dictionary as <code>json</code> parameter.</p>\n<p>By default this keyword fails if a status code with error values is returned in the response, this behavior can be modified using the <code>expected_status</code> and <code>msg</code> parameters, read more about it in <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword documentation. In order to disable this implicit assert mechanism you can pass as <code>expected_status</code> the values <code>any</code> or <code>anything</code>.</p>\n<p>Other optional requests arguments can be passed using <code>**kwargs</code> see the <a href=\"#GET\" class=\"name\">GET</a> keyword for the complete list.</p>",
                "shortdoc": "Sends a PUT request on a previously created HTTP Session.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\utils.py",
                "lineno": 149
            },
            {
                "name": "Put Request",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "uri",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "uri"
                    },
                    {
                        "name": "data",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data=None"
                    },
                    {
                        "name": "json",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "json=None"
                    },
                    {
                        "name": "params",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "params=None"
                    },
                    {
                        "name": "files",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files=None"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "allow_redirects",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "allow_redirects=None"
                    },
                    {
                        "name": "timeout",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout=None"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use <a href=\"#PUT%20On%20Session\" class=\"name\">PUT On Session</a> instead.</p>\n<p>Send a PUT request on the session object found using the given <span class=\"name\">alias</span></p>\n<p><code>alias</code> that will be used to identify the Session object in the cache</p>\n<p><code>uri</code> to send the PUT request to</p>\n<p><code>data</code> a dictionary of key-value pairs that will be urlencoded and sent as PUT data or binary data that is sent as the raw body content or file descriptor retrieved by Get File For Streaming Upload</p>\n<p><code>json</code> a value that will be json encoded and sent as PUT data if data is not specified</p>\n<p><code>headers</code> a dictionary of headers to use with the request</p>\n<p><code>allow_redirects</code> Boolean. Set to True if POST/PUT/DELETE redirect following is allowed.</p>\n<p><code>params</code> url parameters to append to the uri</p>\n<p><code>timeout</code> connection timeout</p>",
                "shortdoc": "*DEPRECATED* Please use `PUT On Session` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 205
            },
            {
                "name": "Request Should Be Successful",
                "args": [
                    {
                        "name": "response",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "response=None"
                    }
                ],
                "doc": "<p>Fails if response status code is a client or server error (4xx, 5xx).</p>\n<p><code>response</code> is the output of other requests keywords like <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a>. If omitted the last response will be used.</p>\n<p>In case of failure an HTTPError will be automatically raised.</p>\n<p>For a more versatile assert keyword see <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a>.</p>",
                "shortdoc": "Fails if response status code is a client or server error (4xx, 5xx).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\RequestsKeywords.py",
                "lineno": 124
            },
            {
                "name": "Session Exists",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    }
                ],
                "doc": "<p>Return True if the session has been already created</p>\n<p><code>alias</code> that has been used to identify the Session object in the cache</p>",
                "shortdoc": "Return True if the session has been already created",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 532
            },
            {
                "name": "Status Should Be",
                "args": [
                    {
                        "name": "expected_status",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected_status"
                    },
                    {
                        "name": "response",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "response=None"
                    },
                    {
                        "name": "msg",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "msg=None"
                    }
                ],
                "doc": "<p>Fails if response status code is different than the expected.</p>\n<p><code>expected_status</code> could be the code number as an integer or as string. But it could also be a named status code like 'ok', 'created', 'accepted' or 'bad request', 'not found' etc.</p>\n<p><code>response</code> is the output of other requests keywords like <a href=\"#GET\" class=\"name\">GET</a> or <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a>. If omitted the last response will be used.</p>\n<p>In case of failure an HTTPError will be automatically raised. A custom failure message <code>msg</code> can be added like in built-in keywords.</p>\n<p>New requests keywords like <a href=\"#GET\" class=\"name\">GET</a> or <a href=\"#GET%20On%20Session\" class=\"name\">GET On Session</a> (starting from 0.8 version) already have an implicit assert mechanism that, by default, verifies the response status code. <a href=\"#Status%20Should%20Be\" class=\"name\">Status Should Be</a> keyword can be useful when you disable implicit assert using <code>expected_status=anything</code>.</p>\n<p>For example when you have a nested keyword that is used for both OK and ERROR responses:</p>\n<pre>\n  <b>*</b> Test Cases <b>*</b>\n\n  Test Get Request And Make Sure Is A 404 Response\n      ${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=notfound\n      Status Should Be    404    ${resp}\n      Should Be Equal As Strings  NOT FOUND  ${resp.reason}\n\n  Test Get Request And Make Sure Is OK\n      ${resp}=            GET Custom Keyword That Returns OK or ERROR Response  case=pass\n      Status Should Be    200    ${resp}\n      Should Be Equal As Strings  OK  ${resp.reason}\n\n  <b>*</b> Keywords <b>*</b>\n\n  GET Custom Keyword That Returns OK or ERROR Response\n  [Arguments]  $case\n       [...]\n      IF $case == notfound\n          $resp=     GET [...] expected_status=Anything\n          [Return]   $resp\n      ELSE\n       [...]\n</pre>",
                "shortdoc": "Fails if response status code is different than the expected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\RequestsKeywords.py",
                "lineno": 76
            },
            {
                "name": "To Json",
                "args": [
                    {
                        "name": "content",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content"
                    },
                    {
                        "name": "pretty_print",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pretty_print=False"
                    }
                ],
                "doc": "<p><b>DEPRECATED</b> Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.</p>\n<p>Convert a string to a JSON object</p>\n<p><code>content</code> String content to convert into JSON</p>\n<p><code>pretty_print</code> If defined, will output JSON is pretty print format</p>",
                "shortdoc": "*DEPRECATED* Please use ${resp.json()} instead. Have a look at the improved HTML output as pretty printing replacement.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\DeprecatedKeywords.py",
                "lineno": 15
            },
            {
                "name": "Update Session",
                "args": [
                    {
                        "name": "alias",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "alias"
                    },
                    {
                        "name": "headers",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "headers=None"
                    },
                    {
                        "name": "cookies",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "cookies=None"
                    }
                ],
                "doc": "<p>Updates HTTP Session Headers and Cookies.</p>\n<p>Session will be identified using the <code>alias</code> name. Dictionary of <code>headers</code> and <code>cookies</code> to be updated and merged into session data.</p>",
                "shortdoc": "Updates HTTP Session Headers and Cookies.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RequestsLibrary\\SessionKeywords.py",
                "lineno": 552
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Images": {
        "name": "RPA.Images",
        "doc": "<div class=\"document\">\n<p><cite>Images</cite> is a library for general image manipulation.\nFor image-based desktop automation, use the <tt class=\"docutils literal\">RPA.Desktop</tt> library.</p>\n<p><strong>Coordinates</strong></p>\n<p>The coordinates used in the library are pairs of x and y values that\nrepresent pixels. The upper left corner of the image or screen\nis (0, 0). The x-coordinate increases towards the right, and the y-coordinate\nincreases towards the bottom.</p>\n<p>Regions are represented as tuples of (left, top, right, bottom). For example,\na 400 by 200-pixel region in the upper left corner would be (0, 0, 400, 200).</p>\n<p><strong>Template matching</strong></p>\n<p>Template matching refers to an operation where the (potential) location of\na smaller image is searched from a larger image. It can be used for verifying\ncertain conditions or locating UI elements for desktop or web automation.</p>\n<p><strong>Requirements</strong></p>\n<p>The default installation depends on <a class=\"reference external\" href=\"https://python-pillow.org/\">Pillow</a>\nlibrary, which is used for general image manipulation operations.</p>\n<p>For more robust and faster template matching, the library can use a combination\nof <a class=\"reference external\" href=\"https://numpy.org/\">NumPy</a> and <a class=\"reference external\" href=\"https://opencv.org/\">OpenCV</a>.\nThey can be installed by opting in to the <cite>cv</cite> dependency:</p>\n<p><tt class=\"docutils literal\">pip install rpaframework[cv]</tt></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Images</cite> library can be imported and used directly in Robot Framework,\nfor instance, for capturing screenshots or verifying something on the screen.</p>\n<p>Desktop automation based on images should be done using the corresponding\ndesktop library, i.e. <tt class=\"docutils literal\">RPA.Desktop</tt>.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Images</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Should show success</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]    </span><span class=\"s\">Raises ImageNotFoundError if success image is not on screen</span><span class=\"p\">\n    </span><span class=\"nf\">Find template on screen</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">success.png</span><span class=\"p\">\n\n</span><span class=\"gu\">Save screenshot to results</span><span class=\"p\">\n    [</span><span class=\"kn\">Documentation</span><span class=\"p\">]    </span><span class=\"s\">Saves screenshot of desktop with unique name</span><span class=\"p\">\n    ${</span><span class=\"nv\">timestamp</span><span class=\"p\">}=      </span><span class=\"nf\">Get current date</span><span class=\"p\">    </span><span class=\"s\">result_format=%H%M%S</span><span class=\"p\">\n    </span><span class=\"nf\">Take screenshot</span><span class=\"p\">    </span><span class=\"s\">filename=</span><span class=\"p\">${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">desktop_</span><span class=\"p\">${</span><span class=\"nv\">timestamp</span><span class=\"p\">}</span><span class=\"s\">.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Images</span> <span class=\"kn\">import</span> <span class=\"n\">Images</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">draw_matches_on_image</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">):</span>\n    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">find_template_in_image</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">show_region_in_image</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"p\">)</span>\n\n    <span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;matches.png&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Images.py",
        "lineno": 68,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Crop Image",
                "args": [
                    {
                        "name": "image",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image"
                    },
                    {
                        "name": "region",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "region"
                    },
                    {
                        "name": "filename",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Crop an existing image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">Image to crop</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">Region to crop image to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Save cropped image to filename</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Crop an existing image.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Images.py",
                "lineno": 145
            },
            {
                "name": "Find Template In Image",
                "args": [
                    {
                        "name": "image",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image"
                    },
                    {
                        "name": "template",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "template"
                    },
                    {
                        "name": "region",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "region=None"
                    },
                    {
                        "name": "limit",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit=None"
                    },
                    {
                        "name": "tolerance",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tolerance=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Attempt to find the template from the given image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">Path to image or Image instance, used to search from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param template:</th><td class=\"field-body\">Path to image or Image instance, used to search with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">Limit returned results to maximum of <cite>limit</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">Area to search from. Can speed up search significantly.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param tolerance:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Tolerance for matching, value between 0.1 and 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of matching regions</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ImageNotFoundError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">No match was found</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Attempt to find the template from the given image.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Images.py",
                "lineno": 163
            },
            {
                "name": "Get Pixel Color In Image",
                "args": [
                    {
                        "name": "image",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image"
                    },
                    {
                        "name": "point",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "point"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get the RGB value of a pixel in the image.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to get pixel from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param point:</th><td class=\"field-body\">coordinates for pixel or Point object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get the RGB value of a pixel in the image.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Images.py",
                "lineno": 225
            },
            {
                "name": "Show Region In Image",
                "args": [
                    {
                        "name": "image",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image"
                    },
                    {
                        "name": "region",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "region"
                    },
                    {
                        "name": "color",
                        "types": [],
                        "defaultValue": "red",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "color=red"
                    },
                    {
                        "name": "width",
                        "types": [],
                        "defaultValue": "5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "width=5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Draw a rectangle onto the image around the given region.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param image:</th><td class=\"field-body\">image to draw onto</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">coordinates for region or Region object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param color:</th><td class=\"field-body\">color of rectangle</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">line width of rectangle</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Draw a rectangle onto the image around the given region.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Images.py",
                "lineno": 210
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.JSON": {
        "name": "RPA.JSON",
        "doc": "<div class=\"document\">\n<p><cite>JSON</cite> is a library for manipulating <a class=\"reference external\" href=\"http://json.org/\">JSON</a> files and strings.</p>\n<p>JSON is a common data interchange format inspired by a subset of\nthe Javascript programming language, but these days is a de facto\nstandard in modern web APIs and is language agnostic.</p>\n<p><strong>Serialization</strong></p>\n<p>The term <cite>serialization</cite> refers to the process of converting\nRobot Framework or Python types to JSON or the other way around.</p>\n<p>Basic types can be easily converted between the domains,\nand the mapping is as follows:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"65%\" />\n<col width=\"35%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">JSON</th>\n<th class=\"head\">Python</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>object</td>\n<td>dict</td>\n</tr>\n<tr><td>array</td>\n<td>list</td>\n</tr>\n<tr><td>string</td>\n<td>str</td>\n</tr>\n<tr><td>number (int)</td>\n<td>int</td>\n</tr>\n<tr><td>number (real)</td>\n<td>float</td>\n</tr>\n<tr><td>true</td>\n<td>True</td>\n</tr>\n<tr><td>false</td>\n<td>False</td>\n</tr>\n<tr><td>null</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n<p><strong>About JSONPath</strong></p>\n<p>Reading and writing values from/to JSON serializable objects is done\nusing <a class=\"reference external\" href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a>. It's a syntax designed to quickly and easily refer to\nspecific elements in a JSON structure.</p>\n<p>Compared to Python's normal dictionary access, JSONPath expressions can\ntarget multiple elements through features such as conditionals and wildcards,\nwhich can simplify many JSON-related operations. It's analogous to XPath\nfor XML structures.</p>\n<p><strong>Syntax example</strong></p>\n<p>For this example consider the following structure:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n  <span class=\"nt\">&quot;clients&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Johnny Example&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;john&#64;example.com&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;orders&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span> <span class=\"mf\">103.20</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span> <span class=\"mf\">98.99</span><span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Jane Example&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;jane&#64;example.com&quot;</span><span class=\"p\">,</span>\n      <span class=\"nt\">&quot;orders&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Waypath 321&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span> <span class=\"mf\">22.00</span><span class=\"p\">},</span>\n          <span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span> <span class=\"mf\">2330.01</span><span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In the simplest case JSONPath can replace nested access:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># First order of first client, with direct dictionary access\n${value}=</span><span class=\"p\">    </span><span class=\"c\">Set variable</span><span class=\"p\">    </span><span class=\"c\">${json}[&quot;clients&quot;][0][&quot;orders&quot;][0]</span><span class=\"p\">\n\n</span><span class=\"c\"># JSONPath access\n${value}=</span><span class=\"p\">    </span><span class=\"c\">Get value from JSON</span><span class=\"p\">    </span><span class=\"c\">${json}</span><span class=\"p\">    </span><span class=\"c\">$.clients[0].orders[0]</span>\n</pre>\n<p>But the power comes from complicated expressions:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Find delivery addresses for all orders\n${prices}=</span><span class=\"p\">        </span><span class=\"c\">Get values from JSON</span><span class=\"p\">    </span><span class=\"c\">$..address</span><span class=\"p\">\n\n</span><span class=\"c\"># Find orders that cost over 100\n${expensives}=</span><span class=\"p\">    </span><span class=\"c\">Get values from JSON</span><span class=\"p\">    </span><span class=\"c\">$..orders[?(&#64;.price&gt;100)]</span>\n</pre>\n<p><strong>Supported Expressions</strong></p>\n<p>The supported syntax elements are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"21%\" />\n<col width=\"79%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Element</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>$</td>\n<td>Root object/element</td>\n</tr>\n<tr><td>&#64;</td>\n<td>Current object/element</td>\n</tr>\n<tr><td>. or []</td>\n<td>Child operator</td>\n</tr>\n<tr><td>..</td>\n<td>Recursive descent</td>\n</tr>\n<tr><td>*</td>\n<td>Wilcard, any element</td>\n</tr>\n<tr><td>[n]</td>\n<td>Array index</td>\n</tr>\n<tr><td>[a:b:c]</td>\n<td>Array slice (start, end, step)</td>\n</tr>\n<tr><td>[a,b]</td>\n<td>Union of indices or names</td>\n</tr>\n<tr><td>?()</td>\n<td>Apply a filter expression</td>\n</tr>\n<tr><td>()</td>\n<td>Script expression</td>\n</tr>\n</tbody>\n</table>\n<p>There are a multitude of different script expressions\nin addition to the elements listed above, which can\nbe seen in the <a class=\"reference external\" href=\"http://goessner.net/articles/JsonPath/\">aforementioned article</a>.</p>\n<p>For further library usage examples, see the individual keywords.</p>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
        "lineno": 14,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Add to JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "expr",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expr: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add items into a JSON serializable object and return the result.</p>\n<p>If the target is a list, the values are appended to the end.\nIf the target is a dict, the keys are either added or updated.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">values to either append or update</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Change the name value for all people\n&amp;{before}=</span><span class=\"p\">    </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"c\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{person}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">      </span><span class=\"c\">Name=John</span><span class=\"p\">\n</span><span class=\"c\">&amp;{after}=</span><span class=\"p\">     </span><span class=\"c\">Add to JSON</span><span class=\"p\">    </span><span class=\"c\">${before}</span><span class=\"p\">   </span><span class=\"c\">$.People</span><span class=\"p\">    </span><span class=\"c\">${person}</span>\n</pre>\n</div>\n",
                "shortdoc": "Add items into a JSON serializable object and return the result.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 230
            },
            {
                "name": "Convert JSON to String",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Convert a JSON serializable object to a string and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${obj}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">Key=Value</span><span class=\"p\">\n</span><span class=\"c\">${json}=</span><span class=\"p\">   </span><span class=\"c\">Convert JSON to string</span><span class=\"p\">    </span><span class=\"c\">${obj}</span><span class=\"p\">\n</span><span class=\"c\">Should be equal</span><span class=\"p\">    </span><span class=\"c\">${json}</span><span class=\"p\">     </span><span class=\"c\">{&quot;Key&quot;: &quot;Value&quot;}</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert a JSON serializable object to a string and return it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 196
            },
            {
                "name": "Convert String to JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Convert a string to a JSON serializable object and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${json}=</span><span class=\"p\">    </span><span class=\"c\">Set variable</span><span class=\"p\">    </span><span class=\"c\">{&quot;Key&quot;: &quot;Value&quot;}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{obj}=</span><span class=\"p\">     </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">    </span><span class=\"c\">${json}</span><span class=\"p\">\n</span><span class=\"c\">Should be equal</span><span class=\"p\">    </span><span class=\"c\">${obj.Key}</span><span class=\"p\">    </span><span class=\"c\">Value</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert a string to a JSON serializable object and return it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 213
            },
            {
                "name": "Delete from JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "expr",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expr: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete values from a JSON serializable object and return the result.\nWill delete all values that match the expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Delete all people\n&amp;{before}=</span><span class=\"p\">    </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"c\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{after}=</span><span class=\"p\">     </span><span class=\"c\">Delete from JSON</span><span class=\"p\">    </span><span class=\"c\">${before}</span><span class=\"p\">   </span><span class=\"c\">$.People[*]</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete values from a JSON serializable object and return the result. Will delete all values that match the expression.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 338
            },
            {
                "name": "Get value from JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "expr",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expr: str"
                    },
                    {
                        "name": "default",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default: Any | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a single value from a JSON serializable object that matches the given expression.</p>\n<p>Raises a ValueError if there is more than one match.\nReturns the given default argument (or None) if there\nwere no matches.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the name value for the first person\n&amp;{people}=</span><span class=\"p\">    </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"c\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n</span><span class=\"c\">${first}=</span><span class=\"p\">     </span><span class=\"c\">Get value from JSON</span><span class=\"p\">      </span><span class=\"c\">${people}</span><span class=\"p\">   </span><span class=\"c\">$.People[0].Name</span>\n</pre>\n</div>\n",
                "shortdoc": "Get a single value from a JSON serializable object that matches the given expression.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 259
            },
            {
                "name": "Get values from JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "expr",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expr: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all values from a JSON serializable object that match the given expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get all the names for all people\n&amp;{people}=</span><span class=\"p\">    </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"c\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n</span><span class=\"c\">&#64;{names}=</span><span class=\"p\">     </span><span class=\"c\">Get values from JSON</span><span class=\"p\">     </span><span class=\"c\">${people}</span><span class=\"p\">   </span><span class=\"c\">$.People[*].Name</span>\n</pre>\n</div>\n",
                "shortdoc": "Get all values from a JSON serializable object that match the given expression.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 292
            },
            {
                "name": "Load JSON from file",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Load JSON data from a file, and return it as JSON serializable object.\nDepending on the input file the object can be either a dictionary,\na list, or a scalar value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">file character encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{auth}=</span><span class=\"p\">    </span><span class=\"c\">Load JSON from file</span><span class=\"p\">    </span><span class=\"c\">auth.json</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Current auth token: ${auth.token}</span>\n</pre>\n</div>\n",
                "shortdoc": "Load JSON data from a file, and return it as JSON serializable object. Depending on the input file the object can be either a dictionary, a list, or a scalar value.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 142
            },
            {
                "name": "Save JSON to file",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "indent",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "indent: int | None = None"
                    },
                    {
                        "name": "encoding",
                        "types": [],
                        "defaultValue": "utf-8",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding=utf-8"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save a JSON serializable object or a string containg\na JSON value into a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to output file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param indent:</th><td class=\"field-body\">if given this value is used for json file indent</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">file character encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Save dictionary to file\n${john}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">name=John</span><span class=\"p\">    </span><span class=\"c\">mail=john&#64;example.com</span><span class=\"p\">\n</span><span class=\"c\">Save JSON to file</span><span class=\"p\">    </span><span class=\"c\">${john}</span><span class=\"p\">    </span><span class=\"c\">john.json</span><span class=\"p\">\n\n</span><span class=\"c\"># Save string to file\n${mark}=</span><span class=\"p\">    </span><span class=\"c\">Set variable</span><span class=\"p\">    </span><span class=\"c\">{&quot;name&quot;: &quot;Mark&quot;, &quot;mail&quot;: &quot;mark&#64;example.com&quot;}</span><span class=\"p\">\n</span><span class=\"c\">Save JSON to file</span><span class=\"p\">    </span><span class=\"c\">${mark}</span><span class=\"p\">    </span><span class=\"c\">mark.json</span>\n</pre>\n</div>\n",
                "shortdoc": "Save a JSON serializable object or a string containg a JSON value into a file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 163
            },
            {
                "name": "Update value to JSON",
                "args": [
                    {
                        "name": "doc",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "doc: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    },
                    {
                        "name": "expr",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expr: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Dict[str, typing.Any]",
                            "List[typing.Any]",
                            "str",
                            "int",
                            "float",
                            "bool",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Dict[str, typing.Any] | List[typing.Any] | str | int | float | bool | None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Update existing values in a JSON serializable object and return the result.\nWill change all values that match the expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value for the matching item(s)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Change the name key for all people\n&amp;{before}=</span><span class=\"p\">    </span><span class=\"c\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"c\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{after}=</span><span class=\"p\">     </span><span class=\"c\">Update value to JSON</span><span class=\"p\">     </span><span class=\"c\">${before}</span><span class=\"p\">   </span><span class=\"c\">$.People[*].Name</span><span class=\"p\">    </span><span class=\"c\">JohnMalkovich</span>\n</pre>\n</div>\n",
                "shortdoc": "Update existing values in a JSON serializable object and return the result. Will change all values that match the expression.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JSON.py",
                "lineno": 311
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.JavaAccessBridge": {
        "name": "RPA.JavaAccessBridge",
        "doc": "<div class=\"document\">\n<p>Java application UI automation library using <a class=\"reference external\" href=\"https://www.oracle.com/java/technologies/javase/javase-tech-access-bridge.html\">Java Access Bridge technology</a>.</p>\n<p>Library is at the beta level at the moment so feedback is highly appreciated.</p>\n<p>The library utilizes <a class=\"reference external\" href=\"https://github.com/robocorp/java-access-bridge-wrapper\">java-access-bridge-wrapper</a> package to interact with\nJava UI. Currently only the 64-bit Windows OS is supported.</p>\n<p><strong>Steps to enable</strong></p>\n<blockquote>\n<ol class=\"arabic simple\">\n<li>Enable the Java Access Bridge in Windows</li>\n<li>Set environment variable <cite>RC_JAVA_ACCESS_BRIDGE_DLL</cite> as an absolute path to <cite>WindowsAccessBridge-64.dll</cite>.\nIt is also possible to give DLL location as library initialization parameter <cite>access_bridge_path</cite>.</li>\n</ol>\n<pre class=\"code console literal-block\">\n<span class=\"go\">C:\\path\\to\\java\\bin\\jabswitch -enable\nset RC_JAVA_ACCESS_BRIDGE_DLL=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll</span>\n</pre>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.JavaAccessBridge</span><span class=\"p\">   </span><span class=\"s\">access_bridge_path=C:\\path\\to\\Java\\bin\\WindowsAccessBridge-64.dll</span>\n</pre>\n</blockquote>\n<p><strong>About Java wrapper callbacks and actions</strong></p>\n<p>There might be a compability issue with callbacks and actions on target Java application. Possible reasons:</p>\n<ul class=\"simple\">\n<li>target application is executed with 32-bit Java</li>\n<li>target application does not support callbacks and/or actions</li>\n</ul>\n<p>Workaround for this situation is to initialize <cite>JavaAccessBridge</cite> library with parameter <cite>ignore_callbacks=True</cite>.\nThen application's element information is still accessible and any actions on those elements can be performed\nwith <cite>RPA.Desktop</cite> library.</p>\n<p><em>Note.</em> There are still keywords, for example. <cite>Call Element Action</cite>, which will cause error if used in this situation.\nTo be fixed in future release.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.JavaAccessBridge</span><span class=\"p\">   </span><span class=\"s\">ignore_callbacks=True</span>\n</pre>\n<p><strong>Locating elements</strong></p>\n<p>To automate actions on the Java application, the robot needs locations to various elements\nusing a feature called <cite>locators</cite>. Locator describes properties of an element.</p>\n<p>At the moment library contains basic level support for locators.</p>\n<p>The common locator types are <cite>name</cite> and <cite>role</cite>.</p>\n<p>To identify element with more than one property <cite>and</cite> can be used, for example:</p>\n<blockquote>\n<pre class=\"code console literal-block\">\n<span class=\"go\">role:push button and name:Clear</span>\n</pre>\n</blockquote>\n<p>To address element within parent element <cite>&gt;</cite> can be used, for example:</p>\n<blockquote>\n<pre class=\"code console literal-block\">\n<span class=\"go\">name:Find Purchase Orders &gt; name:NumberField</span>\n</pre>\n</blockquote>\n<p>Some keywords accept element as an parameter in place of locator.</p>\n<p><strong>Interacting with elements</strong></p>\n<p>By default application elements are interacted with Actions supported by the element.\nMost common example is <cite>click</cite> action supported by an button element.</p>\n<p>But because application and technology support for the actions might be limited, it is also\npossible to opt for interaction elements by their coordinates by giving keyword parameter\n<tt class=\"docutils literal\">action=False</tt> if parameter is available.</p>\n<p><strong>Inspecting elements</strong></p>\n<p>Inspecting Java application elements depends on what kind of Java UI framework the application\nhas been built with.</p>\n<p>The <a class=\"reference external\" href=\"https://accessibilityinsights.io/en/downloads/\">Accessibility Insights for Windows</a> can show element properties if application framework\nsupports Windows UI Automation (UIA), see more at <a class=\"reference external\" href=\"https://accessibilityinsights.io/docs/en/windows/reference/faq/#can-i-use-accessibility-insights-for-windows-on-a-windows-app-written-with-java\">using Accessibility Insights</a>.</p>\n<p>The Google's <a class=\"reference external\" href=\"https://github.com/google/access-bridge-explorer\">Access Bridge Explorer</a> can also be used for inspecting Java application elements.</p>\n<p><strong>Examples</strong></p>\n<p><em>robotframework</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.JavaAccessBridge</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">Process</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Write text into Swing application</span><span class=\"p\">\n    </span><span class=\"nf\">Start Process</span><span class=\"p\">    </span><span class=\"s\">java -jar BasicSwing.jar</span><span class=\"p\">\n    ...              </span><span class=\"s\">shell=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ...              </span><span class=\"s\">cwd=</span><span class=\"p\">${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}\n    </span><span class=\"nf\">Select Window</span><span class=\"p\">    </span><span class=\"s\">Chat Frame</span><span class=\"p\">\n    </span><span class=\"nf\">Type Text</span><span class=\"p\">    </span><span class=\"s\">role:text</span><span class=\"p\">\n    ...          </span><span class=\"s\">text for the textarea</span><span class=\"p\">\n    </span><span class=\"nf\">Type Text</span><span class=\"p\">    </span><span class=\"s\">role:text</span><span class=\"p\">\n    ...          </span><span class=\"s\">text for the input field</span><span class=\"p\">\n    ...          </span><span class=\"s\">index=1</span><span class=\"p\">\n    ...          </span><span class=\"s\">clear=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    </span><span class=\"nf\">Click Element</span><span class=\"p\">    </span><span class=\"s\">role:push button and name:Send</span>\n</pre>\n<p><em>Python</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JavaAccessBridge</span> <span class=\"kn\">import</span> <span class=\"n\">JavaAccessBridge</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"n\">jab</span> <span class=\"o\">=</span> <span class=\"n\">JavaAccessBridge</span><span class=\"p\">()</span>\n\n<span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;java&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-jar&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;BasicSwing.jar&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">cwd</span><span class=\"o\">=</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">close_fds</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">jab</span><span class=\"o\">.</span><span class=\"n\">select_window</span><span class=\"p\">(</span><span class=\"s2\">&quot;Chat Frame&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">jab</span><span class=\"o\">.</span><span class=\"n\">type_text</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;role:text&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;text for the textarea&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">enter</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">jab</span><span class=\"o\">.</span><span class=\"n\">type_text</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;role:text&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;text for the input field&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">clear</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"p\">)</span>\n<span class=\"n\">jab</span><span class=\"o\">.</span><span class=\"n\">click_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;role:push button and name:Send&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
        "lineno": 54,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "ignore_callbacks",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ignore_callbacks: bool = False"
                    },
                    {
                        "name": "access_bridge_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "access_bridge_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 205
            }
        ],
        "keywords": [
            {
                "name": "Application Refresh",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Refresh application element tree</p>\n<p>Might be required action after application element\nstructure changes after window refresh.</p>\n</div>\n",
                "shortdoc": "Refresh application element tree",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 617
            },
            {
                "name": "Call Element Action",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "action",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "action: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Call element action</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">name of the element action to call</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Call element action",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 575
            },
            {
                "name": "Click Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    },
                    {
                        "name": "action",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "action: bool = True"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 10"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">element to click</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param action:</th><td class=\"field-body\">call click action on element (default), or use coordinates</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout in seconds to find element</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Click element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 532
            },
            {
                "name": "Click Push Button",
                "args": [
                    {
                        "name": "button_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "button_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Click element of role <cite>push button</cite></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param button_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the button to click</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Click element of role `push button`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 662
            },
            {
                "name": "Get Element Actions",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get list of possible element actions</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get list of possible element actions",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 493
            },
            {
                "name": "Get Element Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get element text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get element text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 469
            },
            {
                "name": "Get Elements",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get matching elements</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">elements to get</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get matching elements",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 400
            },
            {
                "name": "Get Version Info",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get Java Access Bridge version information</p>\n</div>\n",
                "shortdoc": "Get Java Access Bridge version information",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 676
            },
            {
                "name": "Highlight Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Highlight an element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element to highlight</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Highlight an element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 507
            },
            {
                "name": "Press Keys",
                "args": [
                    {
                        "name": "keys",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*keys"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Press multiple keys down simultaneously</p>\n<p>See <a class=\"reference external\" href=\"https://rpaframework.org/libraries/desktop/index.html\">Desktop</a> library documentation for supported keys</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">keys to press</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Press multiple keys down simultaneously",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 626
            },
            {
                "name": "Print Element Tree",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "filename: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Print current element into log and possibly into a file</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to save element tree</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Print current element into log and possibly into a file",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 638
            },
            {
                "name": "Select Menu",
                "args": [
                    {
                        "name": "menu",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "menu: str"
                    },
                    {
                        "name": "menuitem",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "menuitem: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Select menu by clicking menu elements</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param menu:</th><td class=\"field-body\">name of the menu</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param menuitem:</th><td class=\"field-body\">name of the menu item</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Select menu by clicking menu elements",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 652
            },
            {
                "name": "Select Window",
                "args": [
                    {
                        "name": "title",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "title: str"
                    },
                    {
                        "name": "bring_foreground",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "bring_foreground: bool = True"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "30",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: int = 30"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Selects Java application window as target for the automation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">application window title</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bring_foreground:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if application is brought to foreground or not</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">selection timeout</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Selects Java application window as target for the automation",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 263
            },
            {
                "name": "Set Mouse Position",
                "args": [
                    {
                        "name": "element",
                        "types": [
                            "ContextNode"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element: ContextNode"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set mouse position to element center</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param element:</th><td class=\"field-body\">target element</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set mouse position to element center",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 348
            },
            {
                "name": "Shutdown Jab",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Call Java Access Bridge process shutdown</p>\n</div>\n",
                "shortdoc": "Call Java Access Bridge process shutdown",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 671
            },
            {
                "name": "Toggle Drop Down",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Toggle dropdown action on element</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element locator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Toggle dropdown action on element",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 606
            },
            {
                "name": "Type Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    },
                    {
                        "name": "clear",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clear: bool = False"
                    },
                    {
                        "name": "enter",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "enter: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Type text into coordinates defined by locator</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element if multiple are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param clear:</th><td class=\"field-body\">should element be cleared before typing</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">should enter key be pressed after typing</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Type text into coordinates defined by locator",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 360
            },
            {
                "name": "Wait Until Element Is Focused",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 0.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait until element is focused</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout in seconds to wait, default 0.5 seconds</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Wait until element is focused",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 450
            },
            {
                "name": "Wait Until Element Text Contains",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 0.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait until element text contains expected text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">element text should contain this</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout in seconds to wait, default 0.5 seconds</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Wait until element text contains expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 408
            },
            {
                "name": "Wait Until Element Text Equals",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "ContextNode",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: ContextNode | str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "index",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "index: int = 0"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 0.5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait until element text equals expected text</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">target element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">element text should match this</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">target element index if multiple are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout in seconds to wait, default 0.5 seconds</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Wait until element text equals expected text",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\JavaAccessBridge.py",
                "lineno": 429
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Netsuite": {
        "name": "RPA.Netsuite",
        "doc": "<div class=\"document\">\n<p><cite>Netsuite</cite> is a library for accessing Netsuite using NetSuite SOAP web service SuiteTalk.\nThe library extends the <a class=\"reference external\" href=\"https://github.com/fylein/netsuite-sdk-py\">netsuitesdk library</a>.</p>\n<p>More information available at <a class=\"reference external\" href=\"http://www.netsuite.com/portal/platform/developer/suitetalk.shtml\">NetSuite SOAP webservice SuiteTalk</a>.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Netsuite</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Netsuite</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get data from Netsuite and Store into Excel files</span><span class=\"p\">\n    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}=        </span><span class=\"nf\">Get Accounts</span><span class=\"p\">   </span><span class=\"s\">account_type=_expense</span><span class=\"p\">\n    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}=        </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">accounts</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows To Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">accounts</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span><span class=\"p\">       </span><span class=\"s\">netsuite_accounts.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Close Workbook</span><span class=\"p\">\n    ${</span><span class=\"nv\">bills</span><span class=\"p\">}=           </span><span class=\"nf\">Get Vendor Bills</span><span class=\"p\">\n    ${</span><span class=\"nv\">bills</span><span class=\"p\">}=           </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">bills</span><span class=\"p\">}\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows To Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">bills</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span><span class=\"p\">       </span><span class=\"s\">netsuite_bills.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Close Workbook</span><span class=\"p\">\n\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Authorize Netsuite</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=     </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">netsuite</span><span class=\"p\">\n    </span><span class=\"nf\">Connect</span><span class=\"p\">\n    ...        </span><span class=\"s\">account=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[ACCOUNT]</span><span class=\"p\">\n    ...        </span><span class=\"s\">consumer_key=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_KEY]</span><span class=\"p\">\n    ...        </span><span class=\"s\">consumer_secret=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_KEY]</span><span class=\"p\">\n    ...        </span><span class=\"s\">token_key=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[CONSUMER_SECRET]</span><span class=\"p\">\n    ...        </span><span class=\"s\">token_secret=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[TOKEN_KEY]</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Netsuite</span> <span class=\"kn\">import</span> <span class=\"n\">Netsuite</span>\n\n<span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">Netsuite</span><span class=\"p\">()</span>\n<span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n<span class=\"n\">accounts</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">get_accounts</span><span class=\"p\">()</span>\n<span class=\"n\">currencies</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">get_currencies</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
        "lineno": 34,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Connect",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "consumer_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "consumer_key: str | None = None"
                    },
                    {
                        "name": "consumer_secret",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "consumer_secret: str | None = None"
                    },
                    {
                        "name": "token_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_key: str | None = None"
                    },
                    {
                        "name": "token_secret",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token_secret: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Connect to Netsuite with credentials from environment\nvariables.</p>\n<p>Parameters are not logged into Robot Framework log.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ACCOUNT</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_CONSUMER_KEY</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_CONSUMER_SECRET</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_TOKEN_KEY</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">parameter or environment variable <cite>NS_TOKEN_SECRET</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Connect to Netsuite with credentials from environment variables.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 108
            },
            {
                "name": "Get Accounts",
                "args": [
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "100",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 100"
                    },
                    {
                        "name": "account_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account_type: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get Accounts of any type or specified type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of Accounts to return, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if None returns all account types, example. &quot;_expense&quot;,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">accounts</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get Accounts of any type or specified type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 268
            },
            {
                "name": "Get Classifications",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all Netsuite Classifications</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">classifications</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all Netsuite Classifications",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 317
            },
            {
                "name": "Get Currencies",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all Netsuite Currencies</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">currencies</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all Netsuite Currencies",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 293
            },
            {
                "name": "Get Currency",
                "args": [
                    {
                        "name": "currency_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "currency_id: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all a Netsuite Currency by its ID</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param currency_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the currency to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">currency</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all a Netsuite Currency by its ID",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 284
            },
            {
                "name": "Get Departments",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all Netsuite Departments</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">departments</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all Netsuite Departments",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 309
            },
            {
                "name": "Get Locations",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all Netsuite Locations</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">locations</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all Netsuite Locations",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 301
            },
            {
                "name": "Get Vendor Bills",
                "args": [
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 10"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get list of vendor bills</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of vendor bills to return, defaults to 10</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of vendor bills</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get list of vendor bills",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 334
            },
            {
                "name": "Get Vendors",
                "args": [
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 10"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get list of vendors</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">number of vendors to return, defaults to 10</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of vendors</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get list of vendors",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 325
            },
            {
                "name": "Login",
                "args": [
                    {
                        "name": "account",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account: str | None = None"
                    },
                    {
                        "name": "email",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "email: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "role",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "role: str | None = None"
                    },
                    {
                        "name": "appid",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "appid: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Login to Netsuite with credentials from environment variables</p>\n<p>Parameters are not logged into Robot Framework log.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param account:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ACCOUNT</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param email:</th><td class=\"field-body\">parameter or environment variable <cite>NS_EMAIL</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">parameter or environment variable <cite>NS_PASSWORD</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param role:</th><td class=\"field-body\">parameter or environment variable <cite>NS_ROLE</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param appid:</th><td class=\"field-body\">parameter or environment variable <cite>NS_APPID</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Login to Netsuite with credentials from environment variables",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 145
            },
            {
                "name": "Netsuite Get",
                "args": [
                    {
                        "name": "record_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "record_type: str = None"
                    },
                    {
                        "name": "internal_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "internal_id: str = None"
                    },
                    {
                        "name": "external_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "external_id: str = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all records of given type and internalId and/or externalId.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param record_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of Netsuite record to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param internal_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">internalId of the type, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param external_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">external_id of the type, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if record_type is not given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">records as a list or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all records of given type and internalId and/or externalId.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 182
            },
            {
                "name": "Netsuite Get All",
                "args": [
                    {
                        "name": "record_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "record_type: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all records of given type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param record_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of Netsuite record to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if record_type is not given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">records as a list or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all records of given type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 209
            },
            {
                "name": "Netsuite Search",
                "args": [
                    {
                        "name": "type_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "type_name: str"
                    },
                    {
                        "name": "search_value",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "search_value: str"
                    },
                    {
                        "name": "operator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "contains",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "operator: str = contains"
                    },
                    {
                        "name": "page_size",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "page_size: int = 5"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Search Netsuite for value from a type. Default operator is\n<cite>contains</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param type_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search target type name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_value:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">what to search for within type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">name of the operation, defaults to &quot;contains&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param page_size:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">result items within one page, defaults to 5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">paginated search object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Search Netsuite for value from a type. Default operator is `contains`.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 222
            },
            {
                "name": "Netsuite Search All",
                "args": [
                    {
                        "name": "type_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "type_name: str"
                    },
                    {
                        "name": "page_size",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "20",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "page_size: int = 20"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Search Netsuite for a type results.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param type_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search target type name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param page_size:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">result items within one page, defaults to 5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">paginated search object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Search Netsuite for a type results.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Netsuite.py",
                "lineno": 253
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Notifier": {
        "name": "RPA.Notifier",
        "doc": "<div class=\"document\">\n<p><cite>Notifier</cite> is a library interfacting with different notification services.</p>\n<p>Supported services:</p>\n<ul class=\"simple\">\n<li>email</li>\n<li>gmail</li>\n<li>pushover</li>\n<li>slack</li>\n<li>telegram</li>\n<li>twilio</li>\n</ul>\n<p>Services not supported yet:</p>\n<ul class=\"simple\">\n<li>gitter</li>\n<li>join</li>\n<li>mailgun</li>\n<li>pagerduty</li>\n<li>popcornnotify</li>\n<li>pushbullet</li>\n<li>simplepush</li>\n<li>statuspage</li>\n<li>zulip</li>\n</ul>\n<p>Read more at <a class=\"reference external\" href=\"https://notifiers.readthedocs.io/en/latest/\">https://notifiers.readthedocs.io/en/latest/</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">  </span><span class=\"nn\">RPA.Notifier</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">SLACK_WEBHOOK</span><span class=\"p\">}   </span><span class=\"s\">https://hooks.slack.com/services/WEBHOOKDETAILS</span><span class=\"p\">\n${</span><span class=\"nv\">CHANNEL</span><span class=\"p\">}         </span><span class=\"s\">notification-channel</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Lets notify</span><span class=\"p\">\n   </span><span class=\"nf\">Notify Slack</span><span class=\"p\">   </span><span class=\"s\">message from robot</span><span class=\"p\">  </span><span class=\"s\">channel=</span><span class=\"p\">${</span><span class=\"nv\">CHANNEL</span><span class=\"p\">}  </span><span class=\"s\">webhook_url=</span><span class=\"p\">${</span><span class=\"nv\">SLACK_WEBHOOK</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Notifier</span> <span class=\"kn\">import</span> <span class=\"n\">Notifier</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Notifier</span><span class=\"p\">()</span>\n\n<span class=\"n\">slack_attachments</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"p\">{</span>\n      <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;attachment 1&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;fallback&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;liverpool logo&quot;</span><span class=\"p\">,</span>\n      <span class=\"s2\">&quot;image_url&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;https://upload.wikimedia.org/wikipedia/fi/thumb/c/cd/Liverpool_FC-n_logo.svg/1200px-Liverpool_FC-n_logo.svg.png&quot;</span><span class=\"p\">,</span>\n   <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">notify_slack</span><span class=\"p\">(</span>\n   <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'message for the Slack'</span><span class=\"p\">,</span>\n   <span class=\"n\">channel</span><span class=\"o\">=</span><span class=\"s2\">&quot;notification-channel&quot;</span><span class=\"p\">,</span>\n   <span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"n\">slack_webhook_url</span><span class=\"p\">,</span>\n   <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"n\">slack_attachments</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
        "lineno": 5,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Notify Email",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "to",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "to: str | None = None"
                    },
                    {
                        "name": "username",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "username: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using email service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param to:</th><td class=\"field-body\">target of email message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">email service username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">email service password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using email service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 159
            },
            {
                "name": "Notify Gmail",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "to",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "to: str | None = None"
                    },
                    {
                        "name": "username",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "username: str | None = None"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "password: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using Gmail service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param to:</th><td class=\"field-body\">target of email message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">GMail service username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">GMail service password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using Gmail service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 133
            },
            {
                "name": "Notify Pushover",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "user",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user: str | None = None"
                    },
                    {
                        "name": "token",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using Pushover service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">target user for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">service token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using Pushover service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 78
            },
            {
                "name": "Notify Slack",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "channel",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "channel: str | None = None"
                    },
                    {
                        "name": "webhook_url",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "webhook_url: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using Slack service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param channel:</th><td class=\"field-body\">target channel for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param webhook_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Slack webhook url</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using Slack service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 91
            },
            {
                "name": "Notify Telegram",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "chat_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "chat_id: str | None = None"
                    },
                    {
                        "name": "token",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using Telegram service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param chat_id:</th><td class=\"field-body\">target chat id for the notification</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">service token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using Telegram service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 114
            },
            {
                "name": "Notify Twilio",
                "args": [
                    {
                        "name": "message",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message: str | None = None"
                    },
                    {
                        "name": "number_from",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "number_from: str | None = None"
                    },
                    {
                        "name": "number_to",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "number_to: str | None = None"
                    },
                    {
                        "name": "account_sid",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account_sid: str | None = None"
                    },
                    {
                        "name": "token",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "token: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [
                            "dict"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs: dict"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Notify using Twilio service</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">notification message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_from:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number where the message comes from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_to:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number where the messages goes to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_sid:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Twilio account SID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param token:</th><td class=\"field-body\">Twilio account token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is notification was success, False if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Notify using Twilio service",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Notifier.py",
                "lineno": 185
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Outlook.Application": {
        "name": "RPA.Outlook.Application",
        "doc": "<div class=\"document\">\n<p><cite>Outlook.Application</cite> is a library for controlling the Outlook application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">                 </span><span class=\"nn\">RPA.Outlook.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">              </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">          </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">RECIPIENT</span><span class=\"p\">}            </span><span class=\"s\">address&#64;domain.com</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Send message</span><span class=\"p\">\n    </span><span class=\"nf\">Send Message</span><span class=\"p\">       </span><span class=\"s\">recipients=</span><span class=\"p\">${</span><span class=\"nv\">RECIPIENT</span><span class=\"p\">}\n    ...                </span><span class=\"s\">subject=This is the subject</span><span class=\"p\">\n    ...                </span><span class=\"s\">body=This is the message body</span><span class=\"p\">\n    </span><span class=\"nf\">..</span><span class=\"p\">                 </span><span class=\"s\">attachments=approved.png</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Outlook.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_message</span><span class=\"p\">():</span>\n    <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span>\n        <span class=\"n\">recipients</span><span class=\"o\">=</span><span class=\"s1\">'EMAILADDRESS_1, EMAILADDRESS_2'</span><span class=\"p\">,</span>\n        <span class=\"n\">subject</span><span class=\"o\">=</span><span class=\"s1\">'email subject'</span><span class=\"p\">,</span>\n        <span class=\"n\">body</span><span class=\"o\">=</span><span class=\"s1\">'email body message'</span><span class=\"p\">,</span>\n        <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"s1\">'../orders.csv'</span>\n</pre>\n<p>For more information, see: <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12\">https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2007/bb219950(v=office.12</a>)</p>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:04",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
        "lineno": 14,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Close Document",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
                "lineno": 86
            },
            {
                "name": "Open Application",
                "args": [
                    {
                        "name": "visible",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "visible: bool = False"
                    },
                    {
                        "name": "display_alerts",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "display_alerts: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open the Outlook application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open the Outlook application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
                "lineno": 69
            },
            {
                "name": "Quit Application",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Quit the application.</p>\n</div>\n",
                "shortdoc": "Quit the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
                "lineno": 93
            },
            {
                "name": "Send Message",
                "args": [
                    {
                        "name": "recipients",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "recipients: Any"
                    },
                    {
                        "name": "subject",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "subject: str"
                    },
                    {
                        "name": "body",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "body: str"
                    },
                    {
                        "name": "html_body",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "html_body: bool = False"
                    },
                    {
                        "name": "attachments",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "attachments: Any | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send message with Outlook</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param recipients:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of addresses</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param subject:</th><td class=\"field-body\">email subject</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param body:</th><td class=\"field-body\">email body</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param html_body:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True if body contains HTML, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachments:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">list of filepaths to include in the email, defaults to []</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if there were no errors</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Send message with Outlook",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
                "lineno": 101
            },
            {
                "name": "Wait For Message",
                "args": [
                    {
                        "name": "criterion",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "criterion: str | None = None"
                    },
                    {
                        "name": "timeout",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "5.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "timeout: float = 5.0"
                    },
                    {
                        "name": "interval",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "1.0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "interval: float = 1.0"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Wait for email matching <cite>criterion</cite> to arrive into mailbox.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param criterion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message filter to wait for, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">total time in seconds to wait for email, defaults to 5.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">time in seconds for new check, defaults to 1.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of messages or False</td>\n</tr>\n</tbody>\n</table>\n<p>Possible wait criterias are: SUBJECT, SENDER and BODY</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Wait for message</span><span class=\"p\">     </span><span class=\"c\">SUBJECT:rpa task calling</span><span class=\"p\">    </span><span class=\"c\">timeout=300</span><span class=\"p\">    </span><span class=\"c\">interval=10</span>\n</pre>\n</div>\n",
                "shortdoc": "Wait for email matching `criterion` to arrive into mailbox.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Outlook\\Application.py",
                "lineno": 200
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.PDF": {
        "name": "RPA.PDF",
        "doc": "<div class=\"document\">\n<p><cite>PDF</cite> is a library for managing PDF documents.</p>\n<p>It can be used to extract text from PDFs,\nadd watermarks to pages, and decrypt/encrypt documents.</p>\n<p>There is also limited support for updating form field values.</p>\n<p>Input PDF file can be passed as an argument to the keywords,\nor it can be omitted if you first call <cite>Open PDF</cite>. Reference\nto the current active PDF will be stored in the library instance.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Extract Data</span><span class=\"p\">\n    ${</span><span class=\"nv\">text</span><span class=\"p\">}=    </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">    </span><span class=\"s\">./tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Fill Form</span><span class=\"p\">\n    </span><span class=\"nf\">Open PDF</span><span class=\"p\">    </span><span class=\"s\">./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"nf\">Set Field Value</span><span class=\"p\">    </span><span class=\"s\">phone_nr</span><span class=\"p\">   </span><span class=\"s\">080123123</span><span class=\"p\">\n    </span><span class=\"nf\">Set Field Value</span><span class=\"p\">    </span><span class=\"s\">address</span><span class=\"p\">    </span><span class=\"s\">robot street 14</span><span class=\"p\">\n    </span><span class=\"nf\">Save Field Values</span><span class=\"p\">  </span><span class=\"s\">output_path=output.pdf</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">extract_data</span><span class=\"p\">():</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fill_form</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">,</span> <span class=\"mi\">080123123</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;address&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;robot street 14&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;output.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\__init__.py",
        "lineno": 9,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Add Files To Pdf",
                "args": [
                    {
                        "name": "files",
                        "types": [
                            "list",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files: list | None = None"
                    },
                    {
                        "name": "target_document",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "target_document: str | None = None"
                    },
                    {
                        "name": "append",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "append: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add images and/or pdfs to new PDF document</p>\n<p>Image formats supported are JPEG, PNG and GIF.</p>\n<p>The file can be added with extra properties by\ndenoting <cite>:</cite> at the end of the filename. Each\nproperty should be separated by comma.</p>\n<p>Supported extra properties for PDFs are:</p>\n<ul class=\"simple\">\n<li>page and/or page ranges</li>\n<li>no extras means that all source PDF pages are added\ninto new PDF</li>\n</ul>\n<p>Supported extra properties for images are:</p>\n<ul class=\"simple\">\n<li>format, the PDF page format, for example. Letter or A4</li>\n<li>rotate, how many degrees image is rotated counter-clockwise</li>\n<li>align, only possible value at the moment is center</li>\n<li>orientation, the PDF page orientation for the image, possible\nvalues P (portrait) or L (landscape)</li>\n<li>x/y, coordinates for adjusting image position on the page</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Add files to pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create List</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.pdf</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png:align=center</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:1</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png:x=0,y=0</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:2-10,15</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">landscape_image.png:rotate=-90,orientation=L</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">landscape_image.png:format=Letter</span><span class=\"p\">\n    </span><span class=\"nf\">Add Files To PDF</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">newdoc.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"n\">list_of_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'invoice.pdf'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'approved.png:align=center'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'robot.pdf:1'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'approved.png:x=0,y=0'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_files_to_pdf</span><span class=\"p\">(</span>\n        <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">list_of_files</span><span class=\"p\">,</span>\n        <span class=\"n\">target_document</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/output.pdf&quot;</span>\n    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of filepaths to add into PDF (can be either images or PDFs)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_document:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param append:</th><td class=\"field-body\">appends files to existing document if <cite>append</cite> is <cite>True</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Add images and/or pdfs to new PDF document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 989
            },
            {
                "name": "Add Watermark Image To Pdf",
                "args": [
                    {
                        "name": "image_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "image_path: str"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "output_path: str"
                    },
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "coverage",
                        "types": [
                            "float"
                        ],
                        "defaultValue": "0.2",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "coverage: float = 0.2"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add image to PDF which can be new or existing PDF.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Add Watermark Image To PDF</span><span class=\"p\">\n    ...             </span><span class=\"s\">image_path=approved.png</span><span class=\"p\">\n    ...             </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...             </span><span class=\"s\">output_path=output/output.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_watermark_image_to_pdf</span><span class=\"p\">(</span>\n        <span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;approved.png&quot;</span>\n        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span>\n        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/output.pdf&quot;</span>\n    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to image file to add into PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">filepath to source, if not given add image to currently\nactive PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param coverage:</th><td class=\"field-body\">how the watermark image should be scaled on page,\ndefaults to 0.2</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Add image to PDF which can be new or existing PDF.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 783
            },
            {
                "name": "Close All Pdfs",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Close all opened PDF file descriptors.</p>\n</div>\n",
                "shortdoc": "Close all opened PDF file descriptors.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 53
            },
            {
                "name": "Close Pdf",
                "args": [
                    {
                        "name": "source_pdf",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_pdf: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close PDF file descriptor for certain file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file descriptor for the file is not found.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Close PDF file descriptor for certain file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 60
            },
            {
                "name": "Convert",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "trim",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Parse source PDF into entities which can be\nused for text searches, for example.</p>\n<p>This is also used inside other PDF keywords.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Convert</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source PDF filepath.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Parse source PDF into entities which can be used for text searches, for example.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 389
            },
            {
                "name": "Decrypt Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "source_path: str"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "output_path: str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Decrypt PDF with password.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">success</span><span class=\"p\">}=  </span><span class=\"nf\">Decrypt PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">decrypt_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the decrypted pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">password as a string.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if decrypt was successful, else False or Exception.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on decryption errors.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Decrypt PDF with password.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 679
            },
            {
                "name": "Dump Pdf As Xml",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get PDFMiner format XML dump of the PDF</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">xml</span><span class=\"p\">}=  </span><span class=\"nf\">Dump PDF as XML</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">dump_pdf_as_xml</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">XML content as a string.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get PDFMiner format XML dump of the PDF",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 739
            },
            {
                "name": "Encrypt Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "user_pwd",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user_pwd: str = "
                    },
                    {
                        "name": "owner_pwd",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "owner_pwd: str | None = None"
                    },
                    {
                        "name": "use_128bit",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_128bit: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Encrypt a PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Encrypt PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">encrypt_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user_pwd:</th><td class=\"field-body\">allows opening and reading PDF with restrictions.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param owner_pwd:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">allows opening PDF without any restrictions, by\ndefault same <cite>user_pwd</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_128bit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">whether to 128bit encryption, when false 40bit\nencryption is used, default True.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Encrypt a PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 619
            },
            {
                "name": "Extract Pages From Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "pages",
                        "types": [
                            "List[int]",
                            "List[str]",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pages: List[int] | List[str] | str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Extract pages from source PDF and save to a new PDF document.</p>\n<p>Page numbers start from 1.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">pages</span><span class=\"p\">}=    </span><span class=\"nf\">Extract Pages From PDF</span><span class=\"p\">\n    ...          </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">output_path=/tmp/output.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">pages=5</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">extract_pages_from_pdf</span><span class=\"p\">(</span>\n        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"mi\">5</span>\n    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 0)\nif None then extracts all pages.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Extract pages from source PDF and save to a new PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 485
            },
            {
                "name": "Find Text",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "pagenum",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "1",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pagenum: int = 1"
                    },
                    {
                        "name": "direction",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "right",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "direction: str = right"
                    },
                    {
                        "name": "strict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "strict: bool = False"
                    },
                    {
                        "name": "regexp",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "regexp: str | None = None"
                    },
                    {
                        "name": "only_closest",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "only_closest: bool = True"
                    },
                    {
                        "name": "trim",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get closest text (value) to the anchor element.</p>\n<p>PDF needs to be parsed before elements can be found.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">value</span><span class=\"p\">}=  </span><span class=\"nf\">Find Text</span><span class=\"p\">    </span><span class=\"s\">text:Invoice Number</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">find_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;text:Invoice Number&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element to set anchor to. This can be prefixed with either\n<cite>text:</cite> or <cite>coords:</cite> to find the anchor by text or coordinates.\nDefault is <cite>text</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pagenum:</th><td class=\"field-body\">page number where search if performed on, default 1 (first).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param direction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">in which direction to search for text,\ndirections  'top'/'up', 'bottom'/'down', 'left' or 'right',\ndefaults to 'right'.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">if element margins should be used for matching points,\nused when direction is 'top' or 'bottom', default <cite>False</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param regexp:</th><td class=\"field-body\">expected format of value to match, defaults to None.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param only_closest:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">return all possible values or only the closest.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">set to <cite>False</cite> to match on raw texts, default <cite>True</cite>\nmeans whitespace is trimmed from the text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">all possible values, only the closest value, or an empty list.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get closest text (value) to the anchor element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\finder.py",
                "lineno": 34
            },
            {
                "name": "Get All Figures",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return all figures in the PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">figures</span><span class=\"p\">}=  </span><span class=\"nf\">Get All Figures</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">figures</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_all_figures</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of figures divided into pages.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Return all figures in the PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 742
            },
            {
                "name": "Get Input Fields",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "replace_none_value",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "replace_none_value: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get input fields in the PDF.</p>\n<p>Stores input fields internally so that they can be used without\nparsing the PDF again.</p>\n<p>Parameter <tt class=\"docutils literal\">replace_none_value</tt> is for convience to visualize fields.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">fields</span><span class=\"p\">}=  </span><span class=\"nf\">Get Input Fields</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_input_fields</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source filepath, defaults to None.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param replace_none_value:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if value is None replace it with key name,\ndefaults to False.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of input key values or <cite>None</cite>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get input fields in the PDF.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 441
            },
            {
                "name": "Get Number Of Pages",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get number of pages in the document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">page_count</span><span class=\"p\">}=    </span><span class=\"nf\">Get Number Of Pages</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">page_count</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_number_of_pages</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises PdfReadError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file is encrypted or other restrictions are in place</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get number of pages in the document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 331
            },
            {
                "name": "Get Pdf Info",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get metadata from a PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">metadata</span><span class=\"p\">}=    </span><span class=\"nf\">Get PDF Info</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_pdf_info</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source PDF.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of PDF information.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get metadata from a PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 232
            },
            {
                "name": "Get Text From Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "pages",
                        "types": [
                            "List[int]",
                            "List[str]",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pages: List[int] | List[str] | str | None = None"
                    },
                    {
                        "name": "details",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "details: bool = False"
                    },
                    {
                        "name": "trim",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get text from set of pages in source PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">text</span><span class=\"p\">}=    </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to get text (numbers start from 0).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param details:</th><td class=\"field-body\">set to <cite>True</cite> to return textboxes, default <cite>False</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">set to <cite>False</cite> to return raw texts, default <cite>True</cite>\nmeans whitespace is trimmed from the text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of pages and their texts.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get text from set of pages in source PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 423
            },
            {
                "name": "Html To Pdf",
                "args": [
                    {
                        "name": "content",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "content: str"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "output_path: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Generate a PDF file from HTML content.</p>\n<p>Note that input must be well-formed and valid HTML.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">HTML to PDF</span><span class=\"p\">    ${</span><span class=\"nv\">html_content_as_string</span><span class=\"p\">}  </span><span class=\"s\">/tmp/output.pdf</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">html_to_pdf</span><span class=\"p\">(</span><span class=\"n\">html_content_as_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">HTML content.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath where to save the PDF document.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Generate a PDF file from HTML content.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 187
            },
            {
                "name": "Is Pdf Encrypted",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Check if PDF is encrypted.</p>\n<p>Returns True even if PDF was decrypted.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">is_encrypted</span><span class=\"p\">}=    </span><span class=\"nf\">Is PDF Encrypted</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">is_encrypted</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">is_pdf_encrypted</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if file is encrypted.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Check if PDF is encrypted.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 291
            },
            {
                "name": "Open Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open a PDF document for reading.</p>\n<p>This is called automatically in the other PDF keywords\nwhen a path to the PDF file is given as an argument.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Open PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF is already open.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open a PDF document for reading.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 79
            },
            {
                "name": "Rotate Page",
                "args": [
                    {
                        "name": "pages",
                        "types": [
                            "List[int]",
                            "List[str]",
                            "str",
                            "None"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pages: List[int] | List[str] | str | None"
                    },
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "clockwise",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "clockwise: bool = True"
                    },
                    {
                        "name": "angle",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "90",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "angle: int = 90"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Rotate pages in source PDF document and save to target PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Rotate Page</span><span class=\"p\">\n    ...          </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">output_path=/tmp/output.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">pages=5</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">rotate_page</span><span class=\"p\">():</span>\n    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">rotate_page</span><span class=\"p\">(</span>\n        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"mi\">5</span>\n    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 0).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param clockwise:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directorion that page will be rotated to, default True.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param angle:</th><td class=\"field-body\">number of degrees to rotate, default 90.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Rotate pages in source PDF document and save to target PDF document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 547
            },
            {
                "name": "Save Field Values",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "output_path: str | None = None"
                    },
                    {
                        "name": "newvals",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "newvals: dict | None = None"
                    },
                    {
                        "name": "use_appearances_writer",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "use_appearances_writer: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save field values in PDF if it has fields.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Open PDF</span><span class=\"p\">    </span><span class=\"s\">./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"nf\">Set Field Value</span><span class=\"p\">    </span><span class=\"s\">phone_nr</span><span class=\"p\">    </span><span class=\"s\">077123123</span><span class=\"p\">\n    </span><span class=\"nf\">Save Field Values</span><span class=\"p\">    </span><span class=\"s\">output_path=./tmp/output.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Multiple operations</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">new_fields</span><span class=\"p\">}=       </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">\n    ...                  </span><span class=\"s\">phone_nr=077123123</span><span class=\"p\">\n    ...                  </span><span class=\"s\">title=dr</span><span class=\"p\">\n    </span><span class=\"nf\">Save Field Values</span><span class=\"p\">    </span><span class=\"s\">source_path=./tmp/sample.pdf</span><span class=\"p\">\n    ...                  </span><span class=\"s\">output_path=./tmp/output.pdf</span><span class=\"p\">\n    ...                  </span><span class=\"s\">newvals=</span><span class=\"p\">${</span><span class=\"nv\">new_fields</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">multiple_operations</span><span class=\"p\">():</span>\n    <span class=\"n\">new_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dr&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span>\n        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">newvals</span><span class=\"o\">=</span><span class=\"n\">new_fields</span>\n    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source PDF with fields to update.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">updated target PDF.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newvals:</th><td class=\"field-body\">new values when updating many at once.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_appearances_writer:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">for some PDF documents the updated\nfields won't show visible. Try to set this to <cite>True</cite> if you\nencounter problems.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save field values in PDF if it has fields.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 609
            },
            {
                "name": "Save Figure As Image",
                "args": [
                    {
                        "name": "figure",
                        "types": [
                            "Figure"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "figure: Figure"
                    },
                    {
                        "name": "images_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": ".",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "images_folder: str = ."
                    },
                    {
                        "name": "file_prefix",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_prefix: str = "
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Try to save the image data from Figure object, and return\nthe file name, if successful.</p>\n<p>Figure needs to have byte <cite>stream</cite> and that needs to be recognized\nas image format for successful save.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param figure:</th><td class=\"field-body\">PDF Figure object which will be saved as an image</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param images_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where image files will be created</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_prefix:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">image filename prefix</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">image filepath or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Try to save the image data from Figure object, and return the file name, if successful.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 922
            },
            {
                "name": "Save Figures As Images",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    },
                    {
                        "name": "images_folder",
                        "types": [
                            "str"
                        ],
                        "defaultValue": ".",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "images_folder: str = ."
                    },
                    {
                        "name": "pages",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pages: str | None = None"
                    },
                    {
                        "name": "file_prefix",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "file_prefix: str = "
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save figures from given PDF document as image files.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param images_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where image files will be created</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">target figures in the pages, can be single page or range,\ndefault <cite>None</cite> means that all pages are scanned for figures to save</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_prefix:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">image filename prefix</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of image filenames created</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save figures from given PDF document as image files.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 957
            },
            {
                "name": "Save Pdf",
                "args": [
                    {
                        "name": "output_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "output_path: str"
                    },
                    {
                        "name": "reader",
                        "types": [
                            "PdfFileReader"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "reader: PdfFileReader"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save the contents of a PyPDF2 reader to a new file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param reader:</th><td class=\"field-body\">a PyPDF2 reader.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save the contents of a PyPDF2 reader to a new file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 879
            },
            {
                "name": "Set Anchor To Element",
                "args": [
                    {
                        "name": "locator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator: str"
                    },
                    {
                        "name": "trim",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Sets anchor point in the document for further searches.</p>\n<p>This is used internally in the library.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n     ${</span><span class=\"nv\">success</span><span class=\"p\">}=  </span><span class=\"nf\">Set Anchor To Element</span><span class=\"p\">    </span><span class=\"s\">text:Invoice Number</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_anchor_to_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;text:Invoice Number&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">element to search for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">set to <cite>False</cite> to match on raw texts, default <cite>True</cite>\nmeans whitespace is trimmed from the text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if element was found.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Sets anchor point in the document for further searches.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\finder.py",
                "lineno": 123
            },
            {
                "name": "Set Convert Settings",
                "args": [
                    {
                        "name": "line_margin",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "line_margin: float | None = None"
                    },
                    {
                        "name": "word_margin",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "word_margin: float | None = None"
                    },
                    {
                        "name": "char_margin",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "char_margin: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Change settings for PDFMiner document conversion.</p>\n<p><cite>line_margin</cite> controls how textboxes are grouped - if conversion results in\ntexts grouped into one group then set this to lower value</p>\n<p><cite>word_margin</cite> controls how spaces are inserted between words - if conversion\nresults in text without spaces then set this to lower value</p>\n<p><cite>char_margin</cite> controls how characters are grouped into words - if conversion\nresults in individual characters instead of then set this to higher value</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param line_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between bounding lines, default 0.5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param word_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between words, default 0.1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param char_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between characters, default 2.0</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Set Convert Settings</span><span class=\"p\">  </span><span class=\"s\">line_margin=0.00000001</span><span class=\"p\">\n    ${</span><span class=\"nv\">texts</span><span class=\"p\">}=  </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">  </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_convert_settings</span><span class=\"p\">(</span><span class=\"n\">line_margin</span><span class=\"o\">=</span><span class=\"p\">)</span>\n    <span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
                "shortdoc": "Change settings for PDFMiner document conversion.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 775
            },
            {
                "name": "Set Field Value",
                "args": [
                    {
                        "name": "field_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "field_name: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Any"
                    },
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set value for field with given name on the active document.</p>\n<p>Tries to match on field identifier and its label.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Open PDF</span><span class=\"p\">    </span><span class=\"s\">./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"nf\">Set Field Value</span><span class=\"p\">    </span><span class=\"s\">phone_nr</span><span class=\"p\">    </span><span class=\"s\">077123123</span><span class=\"p\">\n    </span><span class=\"nf\">Save Field Values</span><span class=\"p\">    </span><span class=\"s\">output_path=./tmp/output.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param field_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">field to update.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">new value for the field.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source PDF filepath.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when field can't be found or more than 1 field matches\nthe given <cite>field_name</cite>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set value for field with given name on the active document.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\model.py",
                "lineno": 534
            },
            {
                "name": "Switch To Pdf",
                "args": [
                    {
                        "name": "source_path",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "source_path: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Switch library's current fileobject to already open file\nor open file if not opened.</p>\n<p>This is done automatically in the PDF library keywords.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Switch to PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/another.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span>\n    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">switch_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF filepath is not given and there are no active\nfile to activate.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Switch library's current fileobject to already open file or open file if not opened.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 368
            },
            {
                "name": "Template Html To Pdf",
                "args": [
                    {
                        "name": "template",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "template: str"
                    },
                    {
                        "name": "output_path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "output_path: str"
                    },
                    {
                        "name": "variables",
                        "types": [
                            "dict",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "variables: dict | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Use HTML template file to generate PDF file.</p>\n<p>It provides an easy method of generating a PDF document from an HTML formatted\ntemplate file.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}    </span><span class=\"s\">order.template</span><span class=\"p\">\n${</span><span class=\"nv\">PDF</span><span class=\"p\">}         </span><span class=\"s\">result.pdf</span><span class=\"p\">\n&amp;{</span><span class=\"nv\">DATA</span><span class=\"p\">}        </span><span class=\"s\">name=Robot Generated</span><span class=\"p\">\n...            </span><span class=\"s\">email=robot&#64;domain.com</span><span class=\"p\">\n...            </span><span class=\"s\">zip=00100</span><span class=\"p\">\n...            </span><span class=\"s\">items=Item 1, Item 2</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Create PDF from HTML template</span><span class=\"p\">\n    </span><span class=\"nf\">Template HTML to PDF</span><span class=\"p\">   ${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}  ${</span><span class=\"nv\">PDF</span><span class=\"p\">}  ${</span><span class=\"nv\">DATA</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;item 1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 3&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Robot Process&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;robot&#64;domain.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;zip&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;00100&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;items&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&lt;br/&gt;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">template_html_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;order.template&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;order.pdf&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param template:</th><td class=\"field-body\">filepath to the HTML template.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath where to save PDF document.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param variables:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dictionary of variables to fill into template, defaults to {}.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Use HTML template file to generate PDF file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\PDF\\keywords\\document.py",
                "lineno": 125
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Robocloud.Items": {
        "name": "RPA.Robocloud.Items",
        "doc": "<div class=\"document\">\n<p>A library for interacting with Control Room work items.</p>\n<p>Work items are used for managing data that go through multiple\nsteps and tasks inside a process. Each step of a process receives\ninput work items from the previous step, and creates output work items for\nthe next step.</p>\n<p><strong>Item structure</strong></p>\n<p>A work item's data payload is JSON and allows storing anything that is\nserializable. This library by default interacts with payloads that\nare a dictionary of key-value pairs, which it treats as individual\nvariables. These variables can be exposed to the Robot Framework task\nto be used directly.</p>\n<p>In addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp Control Room. Adding and using\nfiles with work items requires no additional setup from the user.</p>\n<p><strong>Loading inputs</strong></p>\n<p>The library automatically loads the first input work item, if the\nlibrary input argument <tt class=\"docutils literal\">autoload</tt> is truthy (default).</p>\n<p>After an input has been loaded its payload and files can be accessed\nthrough corresponding keywords, and optionally these values can be modified.</p>\n<p><strong>Creating outputs</strong></p>\n<p>It's possible to create multiple new work items as an output from a\ntask. With the keyword <tt class=\"docutils literal\">Create output work item</tt> a new empty item\nis created as a child for the currently loaded input.</p>\n<p>All created output items are sent into the input queue of the next\nstep in the process.</p>\n<p><strong>Active work item</strong></p>\n<p>Keywords that read or write from a work item always operate on the currently\nactive work item. Usually that is the input item that has been automatically\nloaded when the execution started, but the currently active item is changed\nwhenever the keywords <tt class=\"docutils literal\">Create output work item</tt> or <tt class=\"docutils literal\">Get input work item</tt>\nare called. It's also possible to change the active item manually with the\nkeyword <tt class=\"docutils literal\">Set current work item</tt>.</p>\n<p><strong>Saving changes</strong></p>\n<p>While a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the keyword <tt class=\"docutils literal\">Save work item</tt> is called.\nThis also applies to created output work items.</p>\n<p>It is recommended to defer saves until all changes have been made to prevent\nleaving work items in a half-modified state in case of failures.</p>\n<p><strong>Development and mocking</strong></p>\n<p>While Control Room is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the <tt class=\"docutils literal\">default_adapter</tt>\nargument for the library, or the <tt class=\"docutils literal\">RPA_WORKITEMS_ADAPTER</tt> environment\nvariable. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.</p>\n<p>The FileAdapter uses a local JSON file for input work items.\nIt's a list of work items, each of which has a data payload and files.</p>\n<p>An example of a local file with one work item:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;payload&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;variable1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a-string-value&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;variable2&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;files&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;file1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;path/to/file.ext&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Output work items (if any) are saved to an adjacent file\nwith the same name, but with the extension <tt class=\"docutils literal\">.output.json</tt>. You can specify\nthrough the &quot;RPA_OUTPUT_WORKITEM_PATH&quot; env var a different path and name for this\nfile.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example a task creates an output work item,\nand attaches some variables to it.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Save variables to Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Create output work item</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variables</span><span class=\"p\">    </span><span class=\"s\">user=Dude</span><span class=\"p\">    </span><span class=\"s\">mail=address&#64;company.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save work item</span>\n</pre>\n<p>In the next step of the process inside a different robot, we can use\npreviously saved work item variables. Also note how the input work item is\nloaded implicitly when the suite starts.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Use variables from Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Set task variables from work item</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Variables are now available: s</span><span class=\"p\">${</span><span class=\"nv\">user</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">mail</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used through Python, but it does not implicitly\nload the first work item.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">list_variables</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">):</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span>\n\n    <span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variables</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocloud\\Items.py",
        "lineno": 13,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocloud\\Items.py",
                "lineno": 16
            }
        ],
        "keywords": [
            {
                "name": "Add Work Item File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add given file to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file on disk</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Destination name for file. If not given, current name\nof local file is used.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not uploaded before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item file</span><span class=\"p\">    </span><span class=\"c\">output.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Add given file to work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1145
            },
            {
                "name": "Add Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add all files that match given pattern to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Path wildcard pattern</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item files</span><span class=\"p\">    </span><span class=\"c\">%{ROBOT_ROOT}/generated/*.csv</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Add all files that match given pattern to work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1213
            },
            {
                "name": "Clear Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Remove all data and files in the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Clear work item</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all data and files in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 927
            },
            {
                "name": "Create Output Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Create a new output work item.</p>\n<p>An output work item is always created as a child for an input item,\nand as such requires an input to be loaded.</p>\n<p>All changes to the work item are done locally, and are only sent\nto the output queue after the keyword <tt class=\"docutils literal\">Save work item</tt> is called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${customers}=</span><span class=\"p\">    </span><span class=\"c\">Load customer data</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${customer}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{customers}</span><span class=\"p\">\n    </span><span class=\"c\">Create output work item</span><span class=\"p\">\n    </span><span class=\"c\">Set work item variables</span><span class=\"p\">    </span><span class=\"c\">name=${customer.name}</span><span class=\"p\">    </span><span class=\"c\">id=${customer.id}</span><span class=\"p\">\n    </span><span class=\"c\">Save work item</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a new output work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 886
            },
            {
                "name": "Delete Work Item Variables",
                "args": [
                    {
                        "name": "names",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*names"
                    },
                    {
                        "name": "force",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "force=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete variable(s) from the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">Names of variables to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param force:</th><td class=\"field-body\">Ignore variables that don't exist in work item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete work item variables</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete variable(s) from the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1073
            },
            {
                "name": "Get Input Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Load the next work item from the input queue,\nand set it as the active work item.</p>\n<p>If the library import argument <tt class=\"docutils literal\">autoload</tt> is truthy (default),\nthis is called automatically when the Robot Framework suite\nstarts.</p>\n<dl class=\"docutils\">\n<dt><strong>NOTE</strong>: Currently only one input work item per execution is supported</dt>\n<dd>by Control Room.</dd>\n</dl>\n</div>\n",
                "shortdoc": "Load the next work item from the input queue, and set it as the active work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 865
            },
            {
                "name": "Get Work Item File",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get attached file from work item to disk.\nReturns the absolute path to the created file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Destination path of file. If not given, current\nworking directory is used.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Get work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Open workbook</span><span class=\"p\">    </span><span class=\"c\">${path}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get attached file from work item to disk. Returns the absolute path to the created file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1125
            },
            {
                "name": "Get Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    },
                    {
                        "name": "dirname",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "dirname=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">Destination directory, if not given robot root is used</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${paths}=</span><span class=\"p\">    </span><span class=\"c\">Get work item files</span><span class=\"p\">    </span><span class=\"c\">customer_*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${path}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{paths}</span><span class=\"p\">\n    </span><span class=\"c\">Handle customer file</span><span class=\"p\">    </span><span class=\"c\">${path}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1184
            },
            {
                "name": "Get Work Item Payload",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get the full JSON payload for a work item.</p>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${payload}=</span><span class=\"p\">    </span><span class=\"c\">Get work item payload</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Entire payload as dictionary: ${payload}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get the full JSON payload for a work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 941
            },
            {
                "name": "Get Work Item Variable",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "default",
                        "types": [],
                        "defaultValue": "<object object at 0x0000019664684860>",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default=<object object at 0x0000019664684860>"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a single variable value from the work item,\nor default value if defined and key does not exist.</p>\n<p>If key does not exist and default is not defined, raises <cite>KeyError</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Default value if key does not exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${username}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">default=guest</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a single variable value from the work item, or default value if defined and key does not exist.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 988
            },
            {
                "name": "Get Work Item Variables",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Read all variables from the current work item and\nreturn their names and values as a dictionary.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Username: ${variables}[username], Email: ${variables}[email]</span>\n</pre>\n</div>\n",
                "shortdoc": "Read all variables from the current work item and return their names and values as a dictionary.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1013
            },
            {
                "name": "List Work Item Files",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List the names of files attached to the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${names}=</span><span class=\"p\">    </span><span class=\"c\">List work item files</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Work item has files with names: ${names}</span>\n</pre>\n</div>\n",
                "shortdoc": "List the names of files attached to the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1112
            },
            {
                "name": "List Work Item Variables",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List the variable names for the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">List work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Available variables in work item: ${variables}</span>\n</pre>\n</div>\n",
                "shortdoc": "List the variable names for the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 974
            },
            {
                "name": "Remove Work Item File",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove attached file from work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not deleted before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove attached file from work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1165
            },
            {
                "name": "Remove Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes files attached to work item that match the given pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item files</span><span class=\"p\">    </span><span class=\"c\">*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Removes files attached to work item that match the given pattern.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1236
            },
            {
                "name": "Save Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Save the current data and files in the work item. If not saved,\nall changes are discarded when the library goes out of scope.</p>\n</div>\n",
                "shortdoc": "Save the current data and files in the work item. If not saved, all changes are discarded when the library goes out of scope.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 920
            },
            {
                "name": "Set Task Variables From Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Convert all variables in the current work item to\nRobot Framework task variables.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Work item has variable INPUT_URL\nSet task variables from work item</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">The variable is now available: ${INPUT_URL}</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert all variables in the current work item to Robot Framework task variables.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1095
            },
            {
                "name": "Set Work Item Payload",
                "args": [
                    {
                        "name": "payload",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "payload"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the full JSON payload for a work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param payload:</th><td class=\"field-body\">Content of payload, must be JSON-serializable</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${output}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">url=example.com</span><span class=\"p\">    </span><span class=\"c\">username=Mark</span><span class=\"p\">\n</span><span class=\"c\">Set work item payload</span><span class=\"p\">    </span><span class=\"c\">${output}</span>\n</pre>\n</div>\n",
                "shortdoc": "Set the full JSON payload for a work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 956
            },
            {
                "name": "Set Work Item Variable",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set a single variable value in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value of variable</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">MarkyMark</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Set a single variable value in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1037
            },
            {
                "name": "Set Work Item Variables",
                "args": [
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set multiple variables in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Pairs of variable names and values</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variables</span><span class=\"p\">    </span><span class=\"c\">username=MarkyMark</span><span class=\"p\">    </span><span class=\"c\">email=mark&#64;example.com</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Set multiple variables in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1055
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Robocloud.Secrets": {
        "name": "RPA.Robocloud.Secrets",
        "doc": "<div class=\"document\">\n<p><cite>Vault</cite> is a library for interacting with secrets stored in Robocorp\nVault (by default) or file-based secrets, which can be taken into use\nby setting some environment variables.</p>\n<p>Robocorp Vault works together with Robocorp Worker or Robocorp CLI (RCC).\nThe following three environment variables need to exist, and are set by\nRobocorp Worker automatically and can be set manually with Robocorp CLI.</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">RC_API_SECRET_HOST</tt>: URL to Robocorp Vault API</li>\n<li><tt class=\"docutils literal\">RC_API_SECRET_TOKEN</tt>: API Token for Robocorp Vault API</li>\n<li><tt class=\"docutils literal\">RC_WORKSPACE_ID</tt>: Control Room Workspace ID</li>\n</ul>\n<p>File-based secrets can be set by defining two environment variables.</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">RPA_SECRET_MANAGER</tt>: RPA.Robocorp.Vault.FileSecrets</li>\n<li><tt class=\"docutils literal\">RPA_SECRET_FILE</tt>: Absolute path to the secrets database file</li>\n</ul>\n<p>Example content of local secrets file:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;swaglabs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;standard_user&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;password&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;secret_sauce&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>OR</p>\n<pre class=\"code YAML literal-block\">\n<span class=\"nt\">swaglabs</span><span class=\"p\">:</span>\n    <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">standard_user</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">secret_sauce</span>\n</pre>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Collections</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Reading secrets</span><span class=\"p\">\n    ${</span><span class=\"nv\">secret</span><span class=\"p\">}=    </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">swaglabs</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">      ${</span><span class=\"nv\">secret</span><span class=\"p\">}\n\n</span><span class=\"gu\">Modifying secrets</span><span class=\"p\">\n    ${</span><span class=\"nv\">secret</span><span class=\"p\">}=          </span><span class=\"nf\">Get Secret</span><span class=\"p\">      </span><span class=\"s\">swaglabs</span><span class=\"p\">\n    ${</span><span class=\"nv\">level</span><span class=\"p\">}=           </span><span class=\"nf\">Set Log Level</span><span class=\"p\">   </span><span class=\"s\">NONE</span><span class=\"p\">\n    </span><span class=\"nf\">Set To Dictionary</span><span class=\"p\">   ${</span><span class=\"nv\">secret</span><span class=\"p\">}       </span><span class=\"s\">username</span><span class=\"p\">    </span><span class=\"s\">nobody</span><span class=\"p\">\n    </span><span class=\"nf\">Set Log Level</span><span class=\"p\">       ${</span><span class=\"nv\">level</span><span class=\"p\">}\n    </span><span class=\"nf\">Set Secret</span><span class=\"p\">          ${</span><span class=\"nv\">secret</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Secrets</span>\n\n<span class=\"n\">SECRETS</span> <span class=\"o\">=</span> <span class=\"n\">Secrets</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reading_secrets</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My secrets: </span><span class=\"si\">{</span><span class=\"n\">SECRETS</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s1\">'swaglabs'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">modifying_secrets</span><span class=\"p\">():</span>\n    <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">SECRETS</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;swaglabs&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">secret</span><span class=\"p\">[</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;nobody&quot;</span>\n    <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">set_secret</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocloud\\Secrets.py",
        "lineno": 14,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>The selected adapter can be set with the environment variable\n<tt class=\"docutils literal\">RPA_SECRET_MANAGER</tt>, or the keyword argument <tt class=\"docutils literal\">default_adapter</tt>.\nDefaults to Robocorp Vault if not defined.</p>\n<p>All other library arguments are passed to the adapter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param default_adapter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Override default secret adapter</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "The selected adapter can be set with the environment variable ``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``. Defaults to Robocorp Vault if not defined.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocloud\\Secrets.py",
                "lineno": 17
            }
        ],
        "keywords": [
            {
                "name": "Get Secret",
                "args": [
                    {
                        "name": "secret_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read a secret from the configured source, e.g. Robocorp Vault,\nand return it as a <tt class=\"docutils literal\">Secret</tt> object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param secret_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Name of secret</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Read a secret from the configured source, e.g. Robocorp Vault, and return it as a ``Secret`` object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
                "lineno": 550
            },
            {
                "name": "Set Secret",
                "args": [
                    {
                        "name": "secret",
                        "types": [
                            "Secret"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret: Secret"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Overwrite an existing secret with new values.</p>\n<dl class=\"docutils\">\n<dt>Note: Only allows modifying existing secrets, and replaces</dt>\n<dd>all values contained within it.</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param secret:</th><td class=\"field-body\">Secret as a <tt class=\"docutils literal\">Secret</tt> object, from e.g. <tt class=\"docutils literal\">Get Secret</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Overwrite an existing secret with new values.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
                "lineno": 558
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Robocorp.Process": {
        "name": "RPA.Robocorp.Process",
        "doc": "<div class=\"document\">\n<p>A library for interacting with Control Room (CR) Process API endpoints.</p>\n<p>See <a class=\"reference external\" href=\"https://robocorp.com/docs/control-room/operating-workforce\">https://robocorp.com/docs/control-room/operating-workforce</a> for information\nabout process run, step run and work item states.</p>\n<p>See <a class=\"reference external\" href=\"https://robocorp.com/docs/control-room/apis-and-webhooks\">https://robocorp.com/docs/control-room/apis-and-webhooks</a> for information\nabout Control Room APIs.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example a task creates two input work items,\nand starts a process with those items. This results in 2 different\nprocess runs in the Control Room.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.Process</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Initialize Process Library</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=  </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">ProcessAPI</span><span class=\"p\">\n    </span><span class=\"nf\">Set Credentials</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[workspace_id]</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[process_id]</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[apikey]</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Start process with work items</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Initialize Process Library</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">item1</span><span class=\"p\">}=  </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">  </span><span class=\"s\">fname=Mark</span><span class=\"p\">  </span><span class=\"s\">lname=Monkey</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">item2</span><span class=\"p\">}=  </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">  </span><span class=\"s\">fname=John</span><span class=\"p\">  </span><span class=\"s\">lname=Doe</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">items</span><span class=\"p\">}=  </span><span class=\"nf\">Create List</span><span class=\"p\">  ${</span><span class=\"nv\">item1</span><span class=\"p\">}   ${</span><span class=\"nv\">item2</span><span class=\"p\">}\n    </span><span class=\"nf\">Start Process</span><span class=\"p\">  </span><span class=\"s\">work_items=</span><span class=\"p\">${</span><span class=\"nv\">items</span><span class=\"p\">}  </span><span class=\"s\">batch=True</span>\n</pre>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example a task creates work item with files.\nTo include files in a work item, the item needs to be created\nbefore starting the process (note. different start keyword than above).</p>\n<p>In this example I am using same keywords and settings from above example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Start process with work items</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Initialize Process Library</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">data</span><span class=\"p\">}=  </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">  </span><span class=\"s\">fname=Mark</span><span class=\"p\">  </span><span class=\"s\">lname=Monkey</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}=  </span><span class=\"nf\">Create List</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">workdata.xlsx</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">other.csv</span><span class=\"p\">\n    ${</span><span class=\"nv\">item_id</span><span class=\"p\">}=    </span><span class=\"nf\">Create Input Work Item</span><span class=\"p\">\n    ...   </span><span class=\"s\">payload=</span><span class=\"p\">${</span><span class=\"nv\">data</span><span class=\"p\">}\n    ...   </span><span class=\"s\">files=</span><span class=\"p\">${</span><span class=\"nv\">files</span><span class=\"p\">}\n    </span><span class=\"nf\">Start Configured Process</span><span class=\"p\">\n    ...  </span><span class=\"s\">config_type=work_items</span><span class=\"p\">\n    ...  </span><span class=\"s\">extra_info=</span><span class=\"p\">${</span><span class=\"nv\">item_id</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>List work items in Control Room and retry failed items.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Process</span> <span class=\"kn\">import</span> <span class=\"n\">Process</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span>\n\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;ProcessAPI&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">Process</span><span class=\"p\">(</span>\n    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;workspace_id&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;process_id&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">retry_failed_items</span><span class=\"p\">():</span>\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">list_process_work_items</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;state&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;FAILED&quot;</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;FAILED work item: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">])</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">retry_work_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">])</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">retry_failed_items</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
        "lineno": 41,
        "tags": [
            "get",
            "post",
            "process",
            "retry",
            "runs",
            "set",
            "start",
            "work item"
        ],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    },
                    {
                        "name": "workspace_api_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_api_key: str | None = None"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 138
            }
        ],
        "keywords": [
            {
                "name": "Create Input Work Item",
                "args": [
                    {
                        "name": "payload",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "payload: Any | None = None"
                    },
                    {
                        "name": "files",
                        "types": [
                            "str",
                            "List",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "files: str | List | None = None"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create an input work item for a process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param payload:</th><td class=\"field-body\">work item data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">absolute filepaths as single string or list</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to which item belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create an input work item for a process",
                "tags": [
                    "post",
                    "process",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 275
            },
            {
                "name": "Get Process Id By Name",
                "args": [
                    {
                        "name": "process_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_name: str"
                    },
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a process id of the process by name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the process in the Control Room</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific Control Room workspace to which process belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get a process id of the process by name",
                "tags": [
                    "get",
                    "process"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 461
            },
            {
                "name": "Get Process Run Status",
                "args": [
                    {
                        "name": "process_run_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "process_run_id: str"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a process run status by run id</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_run_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">id of the process run</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to which runs belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get a process run status by run id",
                "tags": [
                    "get",
                    "process",
                    "runs"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 445
            },
            {
                "name": "Get Work Item",
                "args": [
                    {
                        "name": "workitem_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "workitem_id: str"
                    },
                    {
                        "name": "include_data",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_data: bool = False"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get work item from Control Room</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workitem_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">id of the work item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include work item payload and files in\nthe response (default False)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to which runs belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get work item from Control Room",
                "tags": [
                    "get",
                    "process",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 374
            },
            {
                "name": "List Process Runs",
                "args": [
                    {
                        "name": "run_state",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "run_state: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = 10"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List of runs related to a process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param run_state:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">state of runs to return (default all)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">number of runs to return (default 10)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to which runs belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List of runs related to a process",
                "tags": [
                    "get",
                    "process",
                    "runs"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 393
            },
            {
                "name": "List Process Runs In Workspace",
                "args": [
                    {
                        "name": "run_state",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "run_state: str | None = None"
                    },
                    {
                        "name": "limit",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "10",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "limit: int | None = 10"
                    },
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List all process runs in a workspace</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param run_state:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">state of runs to return (default all)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">number of runs to return (default 10)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific Control Room workspace to which process belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List all process runs in a workspace",
                "tags": [
                    "get",
                    "process",
                    "runs"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 419
            },
            {
                "name": "List Process Work Items",
                "args": [
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    },
                    {
                        "name": "include_data",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "include_data: bool = False"
                    },
                    {
                        "name": "item_state",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "item_state: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List work items belonging to a process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param include_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">include work item payload and files in\nthe response (default False)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param item_state:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">state of work items to return (default all)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to which items belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List work items belonging to a process",
                "tags": [
                    "get",
                    "process",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 350
            },
            {
                "name": "List Processes",
                "args": [
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>List all processes in a workspace</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific Control Room workspace to which process belongs to</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "List all processes in a workspace",
                "tags": [
                    "get",
                    "process"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 337
            },
            {
                "name": "Retry Work Item",
                "args": [
                    {
                        "name": "work_item_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "work_item_id: str"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Retry processing of work item in FAILED state</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param work_item_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the work item to retry</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to start</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Retry processing of work item in FAILED state",
                "tags": [
                    "post",
                    "process",
                    "retry",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 473
            },
            {
                "name": "Set Apikey",
                "args": [
                    {
                        "name": "apikey",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "apikey: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Workspace API access key</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param apikey:</th><td class=\"field-body\">workspace API access key</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set Workspace API access key",
                "tags": [
                    "set"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 184
            },
            {
                "name": "Set Credentials",
                "args": [
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    },
                    {
                        "name": "apikey",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "apikey: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set credentials needed by the Process API</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the Control Room workspace</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the Control Room process</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param apikey:</th><td class=\"field-body\">workspace API access key</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set credentials needed by the Process API",
                "tags": [
                    "set"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 193
            },
            {
                "name": "Set Process Id",
                "args": [
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Control Room process ID</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the Control Room process</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set Control Room process ID",
                "tags": [
                    "set"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 175
            },
            {
                "name": "Set Workspace Id",
                "args": [
                    {
                        "name": "workspace_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "workspace_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set Control Room workspace ID</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param workspace_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">ID of the Control Room workspace</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set Control Room workspace ID",
                "tags": [
                    "set"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 166
            },
            {
                "name": "Start Configured Process",
                "args": [
                    {
                        "name": "config_type",
                        "types": [
                            "ConfigurationType"
                        ],
                        "defaultValue": "default",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "config_type: ConfigurationType = default"
                    },
                    {
                        "name": "extra_info",
                        "types": [
                            "str",
                            "List",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "extra_info: str | List | None = None"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Start a Control Room process with the provided configuration</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param config_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of the start, (ConfigurationType.default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param extra_info:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">data to be sent with the start, for example. work item IDs</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to start</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Start a Control Room process with the provided configuration",
                "tags": [
                    "post",
                    "process",
                    "start",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 246
            },
            {
                "name": "Start Process",
                "args": [
                    {
                        "name": "work_items",
                        "types": [
                            "Dict",
                            "List[typing.Dict]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "work_items: Dict | List[typing.Dict] | None = None"
                    },
                    {
                        "name": "batch",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "batch: bool = False"
                    },
                    {
                        "name": "process_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "process_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Start a Control Room process</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param work_items:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">input work items for the process (default empty)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param batch:</th><td class=\"field-body\">set to True if sending list of workitems to start each\nas a separate run</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param process_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">specific process to start</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Start a Control Room process",
                "tags": [
                    "post",
                    "process",
                    "start",
                    "work item"
                ],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Process.py",
                "lineno": 223
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "ConfigurationType",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>Possible configuration types</p>\n</div>\n",
                    "members": [
                        {
                            "name": "default",
                            "value": "default"
                        },
                        {
                            "name": "work_items",
                            "value": "workItemIds"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Robocorp.Vault": {
        "name": "RPA.Robocorp.Vault",
        "doc": "<div class=\"document\">\n<p><cite>Vault</cite> is a library for interacting with secrets stored in Robocorp\nVault (by default) or file-based secrets, which can be taken into use\nby setting some environment variables.</p>\n<p>Robocorp Vault works together with Robocorp Worker or Robocorp CLI (RCC).\nThe following three environment variables need to exist, and are set by\nRobocorp Worker automatically and can be set manually with Robocorp CLI.</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">RC_API_SECRET_HOST</tt>: URL to Robocorp Vault API</li>\n<li><tt class=\"docutils literal\">RC_API_SECRET_TOKEN</tt>: API Token for Robocorp Vault API</li>\n<li><tt class=\"docutils literal\">RC_WORKSPACE_ID</tt>: Control Room Workspace ID</li>\n</ul>\n<p>File-based secrets can be set by defining two environment variables.</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">RPA_SECRET_MANAGER</tt>: RPA.Robocorp.Vault.FileSecrets</li>\n<li><tt class=\"docutils literal\">RPA_SECRET_FILE</tt>: Absolute path to the secrets database file</li>\n</ul>\n<p>Example content of local secrets file:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;swaglabs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;standard_user&quot;</span><span class=\"p\">,</span>\n        <span class=\"nt\">&quot;password&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;secret_sauce&quot;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>OR</p>\n<pre class=\"code YAML literal-block\">\n<span class=\"nt\">swaglabs</span><span class=\"p\">:</span>\n    <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">standard_user</span>\n    <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">secret_sauce</span>\n</pre>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Collections</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Reading secrets</span><span class=\"p\">\n    ${</span><span class=\"nv\">secret</span><span class=\"p\">}=    </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">swaglabs</span><span class=\"p\">\n    </span><span class=\"nf\">Log Many</span><span class=\"p\">      ${</span><span class=\"nv\">secret</span><span class=\"p\">}\n\n</span><span class=\"gu\">Modifying secrets</span><span class=\"p\">\n    ${</span><span class=\"nv\">secret</span><span class=\"p\">}=          </span><span class=\"nf\">Get Secret</span><span class=\"p\">      </span><span class=\"s\">swaglabs</span><span class=\"p\">\n    ${</span><span class=\"nv\">level</span><span class=\"p\">}=           </span><span class=\"nf\">Set Log Level</span><span class=\"p\">   </span><span class=\"s\">NONE</span><span class=\"p\">\n    </span><span class=\"nf\">Set To Dictionary</span><span class=\"p\">   ${</span><span class=\"nv\">secret</span><span class=\"p\">}       </span><span class=\"s\">username</span><span class=\"p\">    </span><span class=\"s\">nobody</span><span class=\"p\">\n    </span><span class=\"nf\">Set Log Level</span><span class=\"p\">       ${</span><span class=\"nv\">level</span><span class=\"p\">}\n    </span><span class=\"nf\">Set Secret</span><span class=\"p\">          ${</span><span class=\"nv\">secret</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Secrets</span>\n\n<span class=\"n\">SECRETS</span> <span class=\"o\">=</span> <span class=\"n\">Secrets</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reading_secrets</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;My secrets: </span><span class=\"si\">{</span><span class=\"n\">SECRETS</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s1\">'swaglabs'</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">modifying_secrets</span><span class=\"p\">():</span>\n    <span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">SECRETS</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;swaglabs&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">secret</span><span class=\"p\">[</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;nobody&quot;</span>\n    <span class=\"n\">secrets</span><span class=\"o\">.</span><span class=\"n\">set_secret</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
        "lineno": 426,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>The selected adapter can be set with the environment variable\n<tt class=\"docutils literal\">RPA_SECRET_MANAGER</tt>, or the keyword argument <tt class=\"docutils literal\">default_adapter</tt>.\nDefaults to Robocorp Vault if not defined.</p>\n<p>All other library arguments are passed to the adapter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param default_adapter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Override default secret adapter</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "The selected adapter can be set with the environment variable ``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``. Defaults to Robocorp Vault if not defined.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
                "lineno": 507
            }
        ],
        "keywords": [
            {
                "name": "Get Secret",
                "args": [
                    {
                        "name": "secret_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read a secret from the configured source, e.g. Robocorp Vault,\nand return it as a <tt class=\"docutils literal\">Secret</tt> object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param secret_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Name of secret</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Read a secret from the configured source, e.g. Robocorp Vault, and return it as a ``Secret`` object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
                "lineno": 550
            },
            {
                "name": "Set Secret",
                "args": [
                    {
                        "name": "secret",
                        "types": [
                            "Secret"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "secret: Secret"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Overwrite an existing secret with new values.</p>\n<dl class=\"docutils\">\n<dt>Note: Only allows modifying existing secrets, and replaces</dt>\n<dd>all values contained within it.</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param secret:</th><td class=\"field-body\">Secret as a <tt class=\"docutils literal\">Secret</tt> object, from e.g. <tt class=\"docutils literal\">Get Secret</tt></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Overwrite an existing secret with new values.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\Vault.py",
                "lineno": 558
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Robocorp.WorkItems": {
        "name": "RPA.Robocorp.WorkItems",
        "doc": "<div class=\"document\">\n<p>A library for interacting with Control Room work items.</p>\n<p>Work items are used for managing data that go through multiple\nsteps and tasks inside a process. Each step of a process receives\ninput work items from the previous step, and creates output work items for\nthe next step.</p>\n<p><strong>Item structure</strong></p>\n<p>A work item's data payload is JSON and allows storing anything that is\nserializable. This library by default interacts with payloads that\nare a dictionary of key-value pairs, which it treats as individual\nvariables. These variables can be exposed to the Robot Framework task\nto be used directly.</p>\n<p>In addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp Control Room. Adding and using\nfiles with work items requires no additional setup from the user.</p>\n<p><strong>Loading inputs</strong></p>\n<p>The library automatically loads the first input work item, if the\nlibrary input argument <tt class=\"docutils literal\">autoload</tt> is truthy (default).</p>\n<p>After an input has been loaded its payload and files can be accessed\nthrough corresponding keywords, and optionally these values can be modified.</p>\n<p><strong>Creating outputs</strong></p>\n<p>It's possible to create multiple new work items as an output from a\ntask. With the keyword <tt class=\"docutils literal\">Create output work item</tt> a new empty item\nis created as a child for the currently loaded input.</p>\n<p>All created output items are sent into the input queue of the next\nstep in the process.</p>\n<p><strong>Active work item</strong></p>\n<p>Keywords that read or write from a work item always operate on the currently\nactive work item. Usually that is the input item that has been automatically\nloaded when the execution started, but the currently active item is changed\nwhenever the keywords <tt class=\"docutils literal\">Create output work item</tt> or <tt class=\"docutils literal\">Get input work item</tt>\nare called. It's also possible to change the active item manually with the\nkeyword <tt class=\"docutils literal\">Set current work item</tt>.</p>\n<p><strong>Saving changes</strong></p>\n<p>While a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the keyword <tt class=\"docutils literal\">Save work item</tt> is called.\nThis also applies to created output work items.</p>\n<p>It is recommended to defer saves until all changes have been made to prevent\nleaving work items in a half-modified state in case of failures.</p>\n<p><strong>Development and mocking</strong></p>\n<p>While Control Room is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the <tt class=\"docutils literal\">default_adapter</tt>\nargument for the library, or the <tt class=\"docutils literal\">RPA_WORKITEMS_ADAPTER</tt> environment\nvariable. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.</p>\n<p>The FileAdapter uses a local JSON file for input work items.\nIt's a list of work items, each of which has a data payload and files.</p>\n<p>An example of a local file with one work item:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;payload&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;variable1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a-string-value&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;variable2&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;list&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;files&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;file1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;path/to/file.ext&quot;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Output work items (if any) are saved to an adjacent file\nwith the same name, but with the extension <tt class=\"docutils literal\">.output.json</tt>. You can specify\nthrough the &quot;RPA_OUTPUT_WORKITEM_PATH&quot; env var a different path and name for this\nfile.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example a task creates an output work item,\nand attaches some variables to it.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Save variables to Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Create output work item</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variables</span><span class=\"p\">    </span><span class=\"s\">user=Dude</span><span class=\"p\">    </span><span class=\"s\">mail=address&#64;company.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save work item</span>\n</pre>\n<p>In the next step of the process inside a different robot, we can use\npreviously saved work item variables. Also note how the input work item is\nloaded implicitly when the suite starts.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Use variables from Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Set task variables from work item</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Variables are now available: s</span><span class=\"p\">${</span><span class=\"nv\">user</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">mail</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used through Python, but it does not implicitly\nload the first work item.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">list_variables</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">):</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span>\n\n    <span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variables</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:05",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
        "lineno": 622,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "autoload",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "autoload: bool = True"
                    },
                    {
                        "name": "root",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "root: str | None = None"
                    },
                    {
                        "name": "default_adapter",
                        "types": [
                            "Type[RPA.Robocorp.WorkItems.BaseAdapter]",
                            "str"
                        ],
                        "defaultValue": "<class 'RPA.Robocorp.WorkItems.RobocorpAdapter'>",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default_adapter: Type[RPA.Robocorp.WorkItems.BaseAdapter] | str = <class 'RPA.Robocorp.WorkItems.RobocorpAdapter'>"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 765
            }
        ],
        "keywords": [
            {
                "name": "Add Work Item File",
                "args": [
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add given file to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file on disk</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Destination name for file. If not given, current name\nof local file is used.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not uploaded before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item file</span><span class=\"p\">    </span><span class=\"c\">output.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Add given file to work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1145
            },
            {
                "name": "Add Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add all files that match given pattern to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Path wildcard pattern</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add work item files</span><span class=\"p\">    </span><span class=\"c\">%{ROBOT_ROOT}/generated/*.csv</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Add all files that match given pattern to work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1213
            },
            {
                "name": "Clear Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Remove all data and files in the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Clear work item</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all data and files in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 927
            },
            {
                "name": "Create Output Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Create a new output work item.</p>\n<p>An output work item is always created as a child for an input item,\nand as such requires an input to be loaded.</p>\n<p>All changes to the work item are done locally, and are only sent\nto the output queue after the keyword <tt class=\"docutils literal\">Save work item</tt> is called.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${customers}=</span><span class=\"p\">    </span><span class=\"c\">Load customer data</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${customer}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{customers}</span><span class=\"p\">\n    </span><span class=\"c\">Create output work item</span><span class=\"p\">\n    </span><span class=\"c\">Set work item variables</span><span class=\"p\">    </span><span class=\"c\">name=${customer.name}</span><span class=\"p\">    </span><span class=\"c\">id=${customer.id}</span><span class=\"p\">\n    </span><span class=\"c\">Save work item</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a new output work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 886
            },
            {
                "name": "Delete Work Item Variables",
                "args": [
                    {
                        "name": "names",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*names"
                    },
                    {
                        "name": "force",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "force=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete variable(s) from the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">Names of variables to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param force:</th><td class=\"field-body\">Ignore variables that don't exist in work item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete work item variables</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Delete variable(s) from the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1073
            },
            {
                "name": "Get Input Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Load the next work item from the input queue,\nand set it as the active work item.</p>\n<p>If the library import argument <tt class=\"docutils literal\">autoload</tt> is truthy (default),\nthis is called automatically when the Robot Framework suite\nstarts.</p>\n<dl class=\"docutils\">\n<dt><strong>NOTE</strong>: Currently only one input work item per execution is supported</dt>\n<dd>by Control Room.</dd>\n</dl>\n</div>\n",
                "shortdoc": "Load the next work item from the input queue, and set it as the active work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 865
            },
            {
                "name": "Get Work Item File",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "path",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "path=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get attached file from work item to disk.\nReturns the absolute path to the created file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Destination path of file. If not given, current\nworking directory is used.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Get work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Open workbook</span><span class=\"p\">    </span><span class=\"c\">${path}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get attached file from work item to disk. Returns the absolute path to the created file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1125
            },
            {
                "name": "Get Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    },
                    {
                        "name": "dirname",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "dirname=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">Destination directory, if not given robot root is used</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${paths}=</span><span class=\"p\">    </span><span class=\"c\">Get work item files</span><span class=\"p\">    </span><span class=\"c\">customer_*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${path}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{paths}</span><span class=\"p\">\n    </span><span class=\"c\">Handle customer file</span><span class=\"p\">    </span><span class=\"c\">${path}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1184
            },
            {
                "name": "Get Work Item Payload",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get the full JSON payload for a work item.</p>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${payload}=</span><span class=\"p\">    </span><span class=\"c\">Get work item payload</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Entire payload as dictionary: ${payload}</span>\n</pre>\n</div>\n",
                "shortdoc": "Get the full JSON payload for a work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 941
            },
            {
                "name": "Get Work Item Variable",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "default",
                        "types": [],
                        "defaultValue": "<object object at 0x0000019664684860>",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default=<object object at 0x0000019664684860>"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a single variable value from the work item,\nor default value if defined and key does not exist.</p>\n<p>If key does not exist and default is not defined, raises <cite>KeyError</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Default value if key does not exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${username}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">default=guest</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a single variable value from the work item, or default value if defined and key does not exist.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 988
            },
            {
                "name": "Get Work Item Variables",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Read all variables from the current work item and\nreturn their names and values as a dictionary.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">Get work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Username: ${variables}[username], Email: ${variables}[email]</span>\n</pre>\n</div>\n",
                "shortdoc": "Read all variables from the current work item and return their names and values as a dictionary.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1013
            },
            {
                "name": "List Work Item Files",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List the names of files attached to the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${names}=</span><span class=\"p\">    </span><span class=\"c\">List work item files</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Work item has files with names: ${names}</span>\n</pre>\n</div>\n",
                "shortdoc": "List the names of files attached to the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1112
            },
            {
                "name": "List Work Item Variables",
                "args": [],
                "doc": "<div class=\"document\">\n<p>List the variable names for the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variables}=</span><span class=\"p\">    </span><span class=\"c\">List work item variables</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Available variables in work item: ${variables}</span>\n</pre>\n</div>\n",
                "shortdoc": "List the variable names for the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 974
            },
            {
                "name": "Remove Work Item File",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove attached file from work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not deleted before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item file</span><span class=\"p\">    </span><span class=\"c\">input.xls</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove attached file from work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1165
            },
            {
                "name": "Remove Work Item Files",
                "args": [
                    {
                        "name": "pattern",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pattern"
                    },
                    {
                        "name": "missing_ok",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "missing_ok=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Removes files attached to work item that match the given pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Remove work item files</span><span class=\"p\">    </span><span class=\"c\">*.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Removes files attached to work item that match the given pattern.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1236
            },
            {
                "name": "Save Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Save the current data and files in the work item. If not saved,\nall changes are discarded when the library goes out of scope.</p>\n</div>\n",
                "shortdoc": "Save the current data and files in the work item. If not saved, all changes are discarded when the library goes out of scope.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 920
            },
            {
                "name": "Set Task Variables From Work Item",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Convert all variables in the current work item to\nRobot Framework task variables.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Work item has variable INPUT_URL\nSet task variables from work item</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">The variable is now available: ${INPUT_URL}</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert all variables in the current work item to Robot Framework task variables.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1095
            },
            {
                "name": "Set Work Item Payload",
                "args": [
                    {
                        "name": "payload",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "payload"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the full JSON payload for a work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param payload:</th><td class=\"field-body\">Content of payload, must be JSON-serializable</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${output}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">url=example.com</span><span class=\"p\">    </span><span class=\"c\">username=Mark</span><span class=\"p\">\n</span><span class=\"c\">Set work item payload</span><span class=\"p\">    </span><span class=\"c\">${output}</span>\n</pre>\n</div>\n",
                "shortdoc": "Set the full JSON payload for a work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 956
            },
            {
                "name": "Set Work Item Variable",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set a single variable value in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value of variable</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variable</span><span class=\"p\">    </span><span class=\"c\">username</span><span class=\"p\">    </span><span class=\"c\">MarkyMark</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Set a single variable value in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1037
            },
            {
                "name": "Set Work Item Variables",
                "args": [
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set multiple variables in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Pairs of variable names and values</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set work item variables</span><span class=\"p\">    </span><span class=\"c\">username=MarkyMark</span><span class=\"p\">    </span><span class=\"c\">email=mark&#64;example.com</span><span class=\"p\">\n</span><span class=\"c\">Save work item</span>\n</pre>\n</div>\n",
                "shortdoc": "Set multiple variables in the current work item.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Robocorp\\WorkItems.py",
                "lineno": 1055
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.RobotLogListener": {
        "name": "RPA.RobotLogListener",
        "doc": "<div class=\"document\">\n<p><cite>RobotLogListener</cite> is a library for controlling logging during\na Robot Framework execution using the listener API.</p>\n<p><strong>About keyword parameters</strong></p>\n<p>Parameters <cite>names</cite> and <cite>keywords</cite> for keywords <cite>Mute Run On Failure</cite> and <cite>Register Protected Keywords</cite>\ndo not need to be full names of keywords, ie. all keywords matching even partially will be affected.\n<cite>Run Keyword</cite> would match all <cite>BuiltIn</cite> library keywords (17 keywords in RF 3.2.1) and of course all\n<cite>Run Keyword</cite> named keywords in any resource and/or library file which are imported would be matched also.</p>\n<p><strong>Mute Run On Failure</strong></p>\n<p>This keyword is to be used specifically with <cite>RPA.Browser.Selenium</cite> library, which extends\n<cite>SeleniumLibrary</cite>.  Normally most of the <cite>SeleniumLibrary</cite> keywords execute <cite>run_on_failure</cite>\nbehaviour, which can be set at library initialization. By default this behaviour is running\n<cite>Capture Page Screenshot</cite> keyword on failure.</p>\n<p>In the example task <cite>Check the official website</cite> below the keyword <cite>Run Keyword</cite> is muted and when\nit runs the keyword <cite>Element Should Be Visible</cite> then those failures do not create page screenshots\ninto log file.</p>\n<p>It is also possible to change default failure behaviour by giving parameter\n<cite>optional_keyword_to_run</cite> for <cite>Mute Run On Failure</cite>, see task <cite>Check the official website with error log</cite>.\nThis optional keyword would be then executed on failure. Due to the underlying <cite>SeleniumLibrary</cite>\nimplementation this keyword can't have arguments.</p>\n<p>Example of using <cite>Mute Run On Failure</cite> without and with optional keyword to run.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.Browser.Selenium</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.RobotLogListener</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">      </span><span class=\"nf\">Set Task Variable</span><span class=\"p\">   ${</span><span class=\"nv\">TRIES</span><span class=\"p\">}   </span><span class=\"s\">1</span><span class=\"p\">\n</span><span class=\"kn\">Task Teardown</span><span class=\"p\">   </span><span class=\"nf\">Close All Browsers</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check the official website</span><span class=\"p\">\n   </span><span class=\"nf\">Mute Run On Failure</span><span class=\"p\">   </span><span class=\"s\">Run Keyword</span><span class=\"p\">\n   </span><span class=\"nf\">Open Available Browser</span><span class=\"p\">   </span><span class=\"s\">https://www.robocorp.com</span><span class=\"p\">\n   </span><span class=\"nf\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">Capture Page Screenshot</span><span class=\"p\">\n\n</span><span class=\"gu\">Check the official website with error log</span><span class=\"p\">\n   </span><span class=\"nf\">Mute Run On Failure</span><span class=\"p\">   </span><span class=\"s\">Run Keyword</span><span class=\"p\">  </span><span class=\"s\">optional_keyword_to_run=Log tries</span><span class=\"p\">\n   </span><span class=\"nf\">Open Available Browser</span><span class=\"p\">   </span><span class=\"s\">https://www.robocorp.com</span><span class=\"p\">\n   </span><span class=\"nf\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">Capture Page Screenshot</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Check for visible element</span><span class=\"p\">\n   </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">idx</span><span class=\"p\">}  </span><span class=\"s\">IN RANGE</span><span class=\"p\">  </span><span class=\"s\">1</span><span class=\"p\">   </span><span class=\"s\">20</span><span class=\"p\">\n      </span><span class=\"nf\">Set Task Variable</span><span class=\"p\">   ${</span><span class=\"nv\">TRIES</span><span class=\"p\">}   ${</span><span class=\"nv\">idx</span><span class=\"p\">}\n      ${</span><span class=\"nv\">status</span><span class=\"p\">}   </span><span class=\"nf\">Run Keyword And Return Status</span><span class=\"p\">   </span><span class=\"s\">Element Should Be Visible</span><span class=\"p\">  </span><span class=\"s\">id:xyz</span><span class=\"p\">\n      </span><span class=\"nf\">Exit For Loop If</span><span class=\"p\">   </span><span class=\"s\">'</span><span class=\"p\">${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"s\">' == 'PASS'</span><span class=\"p\">\n      </span><span class=\"nf\">Sleep</span><span class=\"p\">  </span><span class=\"s\">2s</span><span class=\"p\">\n   </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Log tries</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">  </span><span class=\"s\">Checked element visibility </span><span class=\"p\">${</span><span class=\"nv\">TRIES</span><span class=\"p\">}</span><span class=\"s\"> times</span>\n</pre>\n<p><strong>Register Protected Keywords</strong></p>\n<p>This keyword is used to totally disable logging for named keywords. In the example below\nthe keyword <cite>This will not output</cite> is protected and it will not be logging into Robot Framework\nlog files.</p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.RobotLogListener</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Protecting keywords</span><span class=\"p\">\n   </span><span class=\"nf\">This will not output</span><span class=\"p\">        </span><span class=\"c\"># will output because called before register\n</span><span class=\"p\">   </span><span class=\"nf\">Register Protected Keywords</span><span class=\"p\">    </span><span class=\"s\">This will not output</span><span class=\"p\">\n   </span><span class=\"nf\">This will not output</span><span class=\"p\">        </span><span class=\"c\"># is now registered\n</span><span class=\"p\">   </span><span class=\"nf\">This will output</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">This will not output</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">1</span><span class=\"p\">\n\n</span><span class=\"gu\">This will output</span><span class=\"p\">\n   </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">2</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">robot.libraries.BuiltIn</span> <span class=\"kn\">import</span> <span class=\"n\">BuiltIn</span><span class=\"p\">,</span> <span class=\"n\">RobotNotRunningError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.RobotLogListener</span> <span class=\"kn\">import</span> <span class=\"n\">RobotLogListener</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n   <span class=\"n\">BuiltIn</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">import_library</span><span class=\"p\">(</span><span class=\"s2\">&quot;RPA.RobotLogListener&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">RobotNotRunningError</span><span class=\"p\">:</span>\n   <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomLibrary</span><span class=\"p\">:</span>\n\n   <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"n\">listener</span> <span class=\"o\">=</span> <span class=\"n\">RobotLogListener</span><span class=\"p\">()</span>\n      <span class=\"n\">listener</span><span class=\"o\">.</span><span class=\"n\">register_protected_keywords</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;CustomLibrary.special_keyword&quot;</span><span class=\"p\">]</span>\n      <span class=\"p\">)</span>\n\n   <span class=\"k\">def</span> <span class=\"nf\">special_keyword</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n      <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will not be written to log'</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"s1\">'not shown in the log'</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
        "lineno": 24,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "End Keyword",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "attributes",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attributes"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Listener method for keyword end.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">keyword name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keyword attributes</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>name</cite> exists in the protected keywords list then log level is\nrestored back to level it was before settings to NONE.</p>\n</div>\n",
                "shortdoc": "Listener method for keyword end.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
                "lineno": 266
            },
            {
                "name": "Mute Run On Failure",
                "args": [
                    {
                        "name": "keywords",
                        "types": [
                            "str",
                            "List",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "keywords: str | List | None = None"
                    },
                    {
                        "name": "optional_keyword_to_run",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "optional_keyword_to_run: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set keywords which should not execute <cite>SeleniumLibrary</cite>\ndefault behaviour of running keyword on failure.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param keywords:</th><td class=\"field-body\">list of keywords to mute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param optional_keyword_to_run:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the keyword to execute\nif keyword defined by <cite>keywords</cite> fail</td>\n</tr>\n</tbody>\n</table>\n<p>Keyword names do not need to be full names of keywords, ie. all keywords\nmatching even partially will be affected. <cite>Run Keyword</cite> would match all\n<cite>BuiltIn</cite> library keywords (17 keywords in RF 3.2.1) and of course all\n<cite>Run Keyword</cite> named keywords in any resource and/or library file which\nare imported would be matched also.</p>\n<p>By default <cite>SeleniumLibrary</cite> executes <cite>Capture Page Screenshot</cite>\non failure.</p>\n<p>If <cite>optional_keyword_to_run</cite> is not given then nothing is done\non failure, but this can be set to override <cite>SeleniumLibrary</cite>\ndefault behaviour for a set of keywords.</p>\n</div>\n",
                "shortdoc": "Set keywords which should not execute `SeleniumLibrary` default behaviour of running keyword on failure.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
                "lineno": 184
            },
            {
                "name": "Only Info Level",
                "args": [
                    {
                        "name": "names",
                        "types": [
                            "str",
                            "List",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "names: str | List | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Register keywords that are allowed only INFO level logging</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">list of keywords to protect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Register keywords that are allowed only INFO level logging",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
                "lineno": 156
            },
            {
                "name": "Register Protected Keywords",
                "args": [
                    {
                        "name": "names",
                        "types": [
                            "str",
                            "List",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "names: str | List | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Register keywords that are not going to be logged into Robot Framework logs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">list of keywords to protect</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Register keywords that are not going to be logged into Robot Framework logs.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
                "lineno": 170
            },
            {
                "name": "Start Keyword",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "attributes",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "attributes"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Listener method for keyword start.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">keyword name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">keyword attributes</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>name</cite> exists in the protected keywords list then log level is\ntemporarily set to NONE.</p>\n</div>\n",
                "shortdoc": "Listener method for keyword start.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\core\\logger.py",
                "lineno": 226
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.SAP": {
        "name": "RPA.SAP",
        "doc": "<p>This library wraps the upstream <a href=\"https://frankvanderkuur.github.io/SapGuiLibrary.html\">SapGuiLibrary</a>.</p>\n<p>The SapGuiLibrary is a library that enables users to create tests for the Sap Gui application</p>\n<p>The library uses the Sap Scripting Engine, therefore Scripting must be enabled in Sap in order for this library to work.</p>\n<h2 id=\"Opening a connection / Before running tests\">Opening a connection / Before running tests</h2>\n<p>First of all, you have to <b>make sure the Sap Logon Pad is started</b>. You can automate this process by using the AutoIT library or the Process Library.</p>\n<p>After the Sap Login Pad is started, you can connect to the Sap Session using the keyword <a href=\"#Connect%20To%20Session\" class=\"name\">connect to session</a>.</p>\n<p>If you have a successful connection you can use <a href=\"#Open%20Connection\" class=\"name\">Open Connection</a> to open a new connection from the Sap Logon Pad or <a href=\"#Connect%20To%20Existing%20Connection\" class=\"name\">Connect To Existing Connection</a> to connect to a connection that is already open.</p>\n<h2 id=\"Locating or specifying elements\">Locating or specifying elements</h2>\n<p>You need to specify elements starting from the window ID, for example, wnd[0]/tbar[1]/btn[8]. In some cases the SAP ID contains backslashes. Make sure you escape these backslashes by adding another backslash in front of it.</p>\n<h2 id=\"Screenshots (on error)\">Screenshots (on error)</h2>\n<p>The SapGUILibrary offers an option for automatic screenshots on error. Default this option is enabled, use keyword <a href=\"#Disable%20Screenshots%20On%20Error\" class=\"name\">disable screenshots on error</a> to skip the screenshot functionality. Alternatively, this option can be set at import.</p>",
        "version": "1.1",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\SAP.py",
        "lineno": 17,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    },
                    {
                        "name": "kwargs",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_NAMED",
                        "required": false,
                        "repr": "**kwargs"
                    }
                ],
                "doc": "<p>Sets default variables for the library</p>",
                "shortdoc": "Sets default variables for the library",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\SAP.py",
                "lineno": 26
            }
        ],
        "keywords": [
            {
                "name": "Click Element",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Performs a single click on a given element. Used only for buttons, tabs and menu items.</p>\n<p>In case you want to change a value of an element like checkboxes of selecting an option in dropdown lists, use <a href=\"#Select%20Checkbox\" class=\"name\">select checkbox</a> or <a href=\"#Select%20From%20List%20By%20Label\" class=\"name\">select from list by label</a> instead.</p>",
                "shortdoc": "Performs a single click on a given element. Used only for buttons, tabs and menu items.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 56
            },
            {
                "name": "Click Toolbar Button",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    },
                    {
                        "name": "button_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "button_id"
                    }
                ],
                "doc": "<p>Clicks a button of a toolbar within a GridView 'table_id' which is contained within a shell object. Use the Scripting tracker recorder to find the 'button_id' of the button to click</p>",
                "shortdoc": "Clicks a button of a toolbar within a GridView 'table_id' which is contained within a shell object. Use the Scripting tracker recorder to find the 'button_id' of the button to click",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 76
            },
            {
                "name": "Connect To Existing Connection",
                "args": [
                    {
                        "name": "connection_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "connection_name"
                    }
                ],
                "doc": "<p>Connects to an open connection. If the connection matches the given connection_name, the session is connected to this connection.</p>",
                "shortdoc": "Connects to an open connection. If the connection matches the given connection_name, the session is connected to this connection.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 93
            },
            {
                "name": "Connect To Session",
                "args": [
                    {
                        "name": "explicit_wait",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "explicit_wait=0"
                    }
                ],
                "doc": "<p>Connects to an open session SAP.</p>\n<p>See <a href=\"#Opening%20a%20connection%20%2F%20Before%20running%20tests\" class=\"name\">Opening a connection / Before running tests</a> for details about requirements before connecting to a session.</p>\n<p>Optionally <a href=\"#Set%20Explicit%20Wait\" class=\"name\">set explicit wait</a> can be used to set the explicit wait time.</p>\n<p><b>Examples</b>:</p>\n<table border=\"1\">\n<tr>\n<td><b>Keyword</b></td>\n<td><b>Attributes</b></td>\n</tr>\n<tr>\n<td>connect to session</td>\n<td></td>\n</tr>\n<tr>\n<td>connect to session</td>\n<td>3</td>\n</tr>\n<tr>\n<td>connect to session</td>\n<td>explicit_wait=500ms</td>\n</tr>\n</table>",
                "shortdoc": "Connects to an open session SAP.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 105
            },
            {
                "name": "Disable Screenshots On Error",
                "args": [],
                "doc": "<p>Disables automatic screenshots on error.</p>",
                "shortdoc": "Disables automatic screenshots on error.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 143
            },
            {
                "name": "Doubleclick Element",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "item_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "item_id"
                    },
                    {
                        "name": "column_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column_id"
                    }
                ],
                "doc": "<p>Performs a double-click on a given element. Used only for shell objects.</p>",
                "shortdoc": "Performs a double-click on a given element. Used only for shell objects.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 148
            },
            {
                "name": "Element Should Be Present",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "message",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message=None"
                    }
                ],
                "doc": "<p>Checks whether an element is present on the screen.</p>",
                "shortdoc": "Checks whether an element is present on the screen.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 162
            },
            {
                "name": "Element Value Should Be",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "expected_value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected_value"
                    },
                    {
                        "name": "message",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message=None"
                    }
                ],
                "doc": "<p>Checks whether the element value is the same as the expected value. The possible expected values depend on the type of element (see usage).</p>\n<p>Usage:</p>\n<table border=\"1\">\n<tr>\n<td><b>Element type</b></td>\n<td><b>possible values</b></td>\n</tr>\n<tr>\n<td>textfield</td>\n<td>text</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n</tr>\n<tr>\n<td>checkbox</td>\n<td>checked / unchecked</td>\n</tr>\n<tr>\n<td>radiobutton</td>\n<td>checked / unchecked</td>\n</tr>\n<tr>\n<td>combobox</td>\n<td>text of the option to be expected</td>\n</tr>\n</table>",
                "shortdoc": "Checks whether the element value is the same as the expected value. The possible expected values depend on the type of element (see usage).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 173
            },
            {
                "name": "Element Value Should Contain",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "expected_value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "expected_value"
                    },
                    {
                        "name": "message",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "message=None"
                    }
                ],
                "doc": "<p>Checks whether the element value contains the expected value. The possible expected values depend on the type of element (see usage).</p>\n<p>Usage:</p>\n<table border=\"1\">\n<tr>\n<td><b>Element type</b></td>\n<td><b>possible values</b></td>\n</tr>\n<tr>\n<td>textfield</td>\n<td>text</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n</tr>\n<tr>\n<td>combobox</td>\n<td>text of the option to be expected</td>\n</tr>\n</table>",
                "shortdoc": "Checks whether the element value contains the expected value. The possible expected values depend on the type of element (see usage).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 235
            },
            {
                "name": "Enable Screenshots On Error",
                "args": [],
                "doc": "<p>Enables automatic screenshots on error.</p>",
                "shortdoc": "Enables automatic screenshots on error.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 270
            },
            {
                "name": "Get Cell Value",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    },
                    {
                        "name": "row_num",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row_num"
                    },
                    {
                        "name": "col_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "col_id"
                    }
                ],
                "doc": "<p>Returns the cell value for the specified cell.</p>",
                "shortdoc": "Returns the cell value for the specified cell.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 275
            },
            {
                "name": "Get Element Location",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Returns the Sap element location for the given element.</p>",
                "shortdoc": "Returns the Sap element location for the given element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 288
            },
            {
                "name": "Get Element Type",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Returns the Sap element type for the given element.</p>",
                "shortdoc": "Returns the Sap element type for the given element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 296
            },
            {
                "name": "Get Row Count",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    }
                ],
                "doc": "<p>Returns the number of rows found in the specified table.</p>",
                "shortdoc": "Returns the number of rows found in the specified table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 307
            },
            {
                "name": "Get Scroll Position",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Returns the scroll position of the scrollbar of an element 'element_id' that is contained within a shell object.</p>",
                "shortdoc": "Returns the scroll position of the scrollbar of an element 'element_id' that is contained within a shell object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 314
            },
            {
                "name": "Get Value",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Gets the value of the given element. The possible return values depend on the type of element (see Return values).</p>\n<p>Return values:</p>\n<table border=\"1\">\n<tr>\n<td><b>Element type</b></td>\n<td><b>Return values</b></td>\n</tr>\n<tr>\n<td>textfield</td>\n<td>text</td>\n</tr>\n<tr>\n<td>label</td>\n<td>text</td>\n</tr>\n<tr>\n<td>checkbox</td>\n<td>checked / unchecked</td>\n</tr>\n<tr>\n<td>radiobutton</td>\n<td>checked / unchecked</td>\n</tr>\n<tr>\n<td>combobox</td>\n<td>text of the selected option</td>\n</tr>\n<tr>\n<td>guibutton</td>\n<td>text</td>\n</tr>\n<tr>\n<td>guititlebar</td>\n<td>text</td>\n</tr>\n<tr>\n<td>guistatusbar</td>\n<td>text</td>\n</tr>\n<tr>\n<td>guitab</td>\n<td>text</td>\n</tr>\n</table>",
                "shortdoc": "Gets the value of the given element. The possible return values depend on the type of element (see Return values).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 321
            },
            {
                "name": "Get Window Title",
                "args": [
                    {
                        "name": "locator",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "locator"
                    }
                ],
                "doc": "<p>Retrieves the window title of the given window.</p>",
                "shortdoc": "Retrieves the window title of the given window.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 369
            },
            {
                "name": "Input Password",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "password",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password"
                    }
                ],
                "doc": "<p>Inserts the given password into the text field identified by locator. The password is not recorded in the log.</p>",
                "shortdoc": "Inserts the given password into the text field identified by locator. The password is not recorded in the log.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 382
            },
            {
                "name": "Input Text",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "text",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text"
                    }
                ],
                "doc": "<p>Inserts the given text into the text field identified by locator. Use keyword <a href=\"#Input%20Password\" class=\"name\">input password</a> to insert a password in a text field.</p>",
                "shortdoc": "Inserts the given text into the text field identified by locator. Use keyword `input password` to insert a password in a text field.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 399
            },
            {
                "name": "Maximize Window",
                "args": [
                    {
                        "name": "window",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "window=0"
                    }
                ],
                "doc": "<p>Maximizes the SapGui window.</p>",
                "shortdoc": "Maximizes the SapGui window.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 416
            },
            {
                "name": "Open Connection",
                "args": [
                    {
                        "name": "connection_name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "connection_name"
                    }
                ],
                "doc": "<p>Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.</p>",
                "shortdoc": "Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 430
            },
            {
                "name": "Run Transaction",
                "args": [
                    {
                        "name": "transaction",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "transaction"
                    }
                ],
                "doc": "<p>Runs a Sap transaction. An error is given when an unknown transaction is specified.</p>",
                "shortdoc": "Runs a Sap transaction. An error is given when an unknown transaction is specified.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 449
            },
            {
                "name": "Scroll",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "position",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "position"
                    }
                ],
                "doc": "<p>Scrolls the scrollbar of an element 'element_id' that is contained within a shell object. 'Position' is the number of rows to scroll.</p>",
                "shortdoc": "Scrolls the scrollbar of an element 'element_id' that is contained within a shell object. 'Position' is the number of rows to scroll.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 467
            },
            {
                "name": "Select Checkbox",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Selects checkbox identified by locator. Does nothing if the checkbox is already selected.</p>",
                "shortdoc": "Selects checkbox identified by locator. Does nothing if the checkbox is already selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 475
            },
            {
                "name": "Select Context Menu Item",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "menu_or_button_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "menu_or_button_id"
                    },
                    {
                        "name": "item_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "item_id"
                    }
                ],
                "doc": "<p>Selects an item from the context menu by clicking a button or right-clicking in the node context menu.</p>",
                "shortdoc": "Selects an item from the context menu by clicking a button or right-clicking in the node context menu.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 488
            },
            {
                "name": "Select From List By Label",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    },
                    {
                        "name": "value",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value"
                    }
                ],
                "doc": "<p>Selects the specified option from the selection list.</p>",
                "shortdoc": "Selects the specified option from the selection list.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 507
            },
            {
                "name": "Select Node",
                "args": [
                    {
                        "name": "tree_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "tree_id"
                    },
                    {
                        "name": "node_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "node_id"
                    },
                    {
                        "name": "expand",
                        "types": [],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "expand=False"
                    }
                ],
                "doc": "<p>Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.</p>\n<p>Use the Scripting tracker recorder to find the 'node_id' of the node. Expand can be set to True to expand the node. If the node cannot be expanded, no error is given.</p>",
                "shortdoc": "Selects a node of a TableTreeControl 'tree_id' which is contained within a shell object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 519
            },
            {
                "name": "Select Node Link",
                "args": [
                    {
                        "name": "tree_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "tree_id"
                    },
                    {
                        "name": "link_id1",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "link_id1"
                    },
                    {
                        "name": "link_id2",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "link_id2"
                    }
                ],
                "doc": "<p>Selects a link of a TableTreeControl 'tree_id' which is contained within a shell object.</p>\n<p>Use the Scripting tracker recorder to find the 'link_id1' and 'link_id2' of the link to select.</p>",
                "shortdoc": "Selects a link of a TableTreeControl 'tree_id' which is contained within a shell object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 535
            },
            {
                "name": "Select Radio Button",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Sets radio button to the specified value.</p>",
                "shortdoc": "Sets radio button to the specified value.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 545
            },
            {
                "name": "Select Table Column",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    },
                    {
                        "name": "column_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column_id"
                    }
                ],
                "doc": "<p>Selects an entire column of a GridView 'table_id' which is contained within a shell object.</p>\n<p>Use the Scripting tracker recorder to find the 'column_id' of the column to select.</p>",
                "shortdoc": "Selects an entire column of a GridView 'table_id' which is contained within a shell object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 557
            },
            {
                "name": "Select Table Row",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    },
                    {
                        "name": "row_num",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row_num"
                    }
                ],
                "doc": "<p>Selects an entire row of a table. This can either be a TableControl or a GridView 'table_id' which is contained within a shell object. The row is an index to select the row, starting from 0.</p>",
                "shortdoc": "Selects an entire row of a table. This can either be a TableControl or a GridView 'table_id' which is contained within a shell object. The row is an index to select the row, starting from 0.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 571
            },
            {
                "name": "Send Vkey",
                "args": [
                    {
                        "name": "vkey_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "vkey_id"
                    },
                    {
                        "name": "window",
                        "types": [],
                        "defaultValue": "0",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "window=0"
                    }
                ],
                "doc": "<p>Sends a SAP virtual key combination to the window, not into an element. If you want to send a value to a text field, use <a href=\"#Input%20Text\" class=\"name\">input text</a> instead.</p>\n<p>To send a vkey, you can either use te <b>VKey ID</b> or the <b>Key combination</b>.</p>\n<p>Sap Virtual Keys (on Windows)</p>\n<table border=\"1\">\n<tr>\n<td><b>VKey ID</b></td>\n<td><b>Key combination</b></td>\n<td><b>VKey ID</b></td>\n<td><b>Key combination</b></td>\n<td><b>VKey ID</b></td>\n<td><b>Key combination</b></td>\n</tr>\n<tr>\n<td><b>0</b></td>\n<td>Enter</td>\n<td><b>26</b></td>\n<td>Ctrl + F2</td>\n<td><b>72</b></td>\n<td>Ctrl + A</td>\n</tr>\n<tr>\n<td><b>1</b></td>\n<td>F1</td>\n<td><b>27</b></td>\n<td>Ctrl + F3</td>\n<td><b>73</b></td>\n<td>Ctrl + D</td>\n</tr>\n<tr>\n<td><b>2</b></td>\n<td>F2</td>\n<td><b>28</b></td>\n<td>Ctrl + F4</td>\n<td><b>74</b></td>\n<td>Ctrl + N</td>\n</tr>\n<tr>\n<td><b>3</b></td>\n<td>F3</td>\n<td><b>29</b></td>\n<td>Ctrl + F5</td>\n<td><b>75</b></td>\n<td>Ctrl + O</td>\n</tr>\n<tr>\n<td><b>4</b></td>\n<td>F4</td>\n<td><b>30</b></td>\n<td>Ctrl + F6</td>\n<td><b>76</b></td>\n<td>Shift + Del</td>\n</tr>\n<tr>\n<td><b>5</b></td>\n<td>F5</td>\n<td><b>31</b></td>\n<td>Ctrl + F7</td>\n<td><b>77</b></td>\n<td>Ctrl + Ins</td>\n</tr>\n<tr>\n<td><b>6</b></td>\n<td>F6</td>\n<td><b>32</b></td>\n<td>Ctrl + F8</td>\n<td><b>78</b></td>\n<td>Shift + Ins</td>\n</tr>\n<tr>\n<td><b>7</b></td>\n<td>F7</td>\n<td><b>33</b></td>\n<td>Ctrl + F9</td>\n<td><b>79</b></td>\n<td>Alt + Backspace</td>\n</tr>\n<tr>\n<td><b>8</b></td>\n<td>F8</td>\n<td><b>34</b></td>\n<td>Ctrl + F10</td>\n<td><b>80</b></td>\n<td>Ctrl + Page Up</td>\n</tr>\n<tr>\n<td><b>9</b></td>\n<td>F9</td>\n<td><b>35</b></td>\n<td>Ctrl + F11</td>\n<td><b>81</b></td>\n<td>Page Up</td>\n</tr>\n<tr>\n<td><b>10</b></td>\n<td>F10</td>\n<td><b>36</b></td>\n<td>Ctrl + F12</td>\n<td><b>82</b></td>\n<td>Page Down</td>\n</tr>\n<tr>\n<td><b>11</b></td>\n<td>F11 or Ctrl + S</td>\n<td><b>37</b></td>\n<td>Ctrl + Shift + F1</td>\n<td><b>83</b></td>\n<td>Ctrl + Page Down</td>\n</tr>\n<tr>\n<td><b>12</b></td>\n<td>F12 or ESC</td>\n<td><b>38</b></td>\n<td>Ctrl + Shift + F2</td>\n<td><b>84</b></td>\n<td>Ctrl + G</td>\n</tr>\n<tr>\n<td><b>14</b></td>\n<td>Shift + F2</td>\n<td><b>39</b></td>\n<td>Ctrl + Shift + F3</td>\n<td><b>85</b></td>\n<td>Ctrl + R</td>\n</tr>\n<tr>\n<td><b>15</b></td>\n<td>Shift + F3</td>\n<td><b>40</b></td>\n<td>Ctrl + Shift + F4</td>\n<td><b>86</b></td>\n<td>Ctrl + P</td>\n</tr>\n<tr>\n<td><b>16</b></td>\n<td>Shift + F4</td>\n<td><b>41</b></td>\n<td>Ctrl + Shift + F5</td>\n<td><b>87</b></td>\n<td>Ctrl + B</td>\n</tr>\n<tr>\n<td><b>17</b></td>\n<td>Shift + F5</td>\n<td><b>42</b></td>\n<td>Ctrl + Shift + F6</td>\n<td><b>88</b></td>\n<td>Ctrl + K</td>\n</tr>\n<tr>\n<td><b>18</b></td>\n<td>Shift + F6</td>\n<td><b>43</b></td>\n<td>Ctrl + Shift + F7</td>\n<td><b>89</b></td>\n<td>Ctrl + T</td>\n</tr>\n<tr>\n<td><b>19</b></td>\n<td>Shift + F7</td>\n<td><b>44</b></td>\n<td>Ctrl + Shift + F8</td>\n<td><b>90</b></td>\n<td>Ctrl + Y</td>\n</tr>\n<tr>\n<td><b>20</b></td>\n<td>Shift + F8</td>\n<td><b>45</b></td>\n<td>Ctrl + Shift + F9</td>\n<td><b>91</b></td>\n<td>Ctrl + X</td>\n</tr>\n<tr>\n<td><b>21</b></td>\n<td>Shift + F9</td>\n<td><b>46</b></td>\n<td>Ctrl + Shift + F10</td>\n<td><b>92</b></td>\n<td>Ctrl + C</td>\n</tr>\n<tr>\n<td><b>22</b></td>\n<td>Ctrl + Shift + 0</td>\n<td><b>47</b></td>\n<td>Ctrl + Shift + F11</td>\n<td><b>93</b></td>\n<td>Ctrl + V</td>\n</tr>\n<tr>\n<td><b>23</b></td>\n<td>Shift + F11</td>\n<td><b>48</b></td>\n<td>Ctrl + Shift + F12</td>\n<td><b>94</b></td>\n<td>Shift + F10</td>\n</tr>\n<tr>\n<td><b>24</b></td>\n<td>Shift + F12</td>\n<td><b>70</b></td>\n<td>Ctrl + E</td>\n<td><b>97</b></td>\n<td>Ctrl + #</td>\n</tr>\n<tr>\n<td><b>25</b></td>\n<td>Ctrl + F1</td>\n<td><b>71</b></td>\n<td>Ctrl + F</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n<p>Examples:</p>\n<table border=\"1\">\n<tr>\n<td><b>Keyword</b></td>\n<td><b>Attributes</b></td>\n<td></td>\n</tr>\n<tr>\n<td>send_vkey</td>\n<td>8</td>\n<td></td>\n</tr>\n<tr>\n<td>send_vkey</td>\n<td>Ctrl + Shift + F1</td>\n<td></td>\n</tr>\n<tr>\n<td>send_vkey</td>\n<td>Ctrl + F7</td>\n<td>window=1</td>\n</tr>\n</table>",
                "shortdoc": "Sends a SAP virtual key combination to the window, not into an element. If you want to send a value to a text field, use `input text` instead.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 588
            },
            {
                "name": "Set Cell Value",
                "args": [
                    {
                        "name": "table_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table_id"
                    },
                    {
                        "name": "row_num",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row_num"
                    },
                    {
                        "name": "col_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "col_id"
                    },
                    {
                        "name": "text",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text"
                    }
                ],
                "doc": "<p>Sets the cell value for the specified cell of a GridView 'table_id' which is contained within a shell object.</p>\n<p>Use the Scripting tracker recorder to find the 'col_id' of the cell to set.</p>",
                "shortdoc": "Sets the cell value for the specified cell of a GridView 'table_id' which is contained within a shell object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 669
            },
            {
                "name": "Set Explicit Wait",
                "args": [
                    {
                        "name": "speed",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "speed"
                    }
                ],
                "doc": "<p>Sets the delay time that is waited after each SapGui keyword.</p>\n<p>The value can be given as a number that is considered to be seconds or as a human-readable string like 1 second or 700 ms.</p>\n<p>This functionality is designed to be used for demonstration and debugging purposes. It is not advised to use this keyword to wait for an element to appear or function to finish.</p>\n<p><b>Possible time formats:</b></p>\n<table border=\"1\">\n<tr>\n<td>miliseconds</td>\n<td>milliseconds, millisecond, millis, ms</td>\n</tr>\n<tr>\n<td>seconds</td>\n<td>seconds, second, secs, sec, s</td>\n</tr>\n<tr>\n<td>minutes</td>\n<td>minutes, minute, mins, min, m</td>\n</tr>\n</table>\n<p><b>Example:</b></p>\n<table border=\"1\">\n<tr>\n<td><b>Keyword</b></td>\n<td><b>Attributes</b></td>\n</tr>\n<tr>\n<td>Set explicit wait</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Set explicit wait</td>\n<td>3 seconds</td>\n</tr>\n<tr>\n<td>Set explicit wait</td>\n<td>500 ms</td>\n</tr>\n</table>",
                "shortdoc": "Sets the delay time that is waited after each SapGui keyword.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 685
            },
            {
                "name": "Set Focus",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Sets the focus to the given element.</p>",
                "shortdoc": "Sets the focus to the given element.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 739
            },
            {
                "name": "Take Screenshot",
                "args": [
                    {
                        "name": "screenshot_name",
                        "types": [],
                        "defaultValue": "sap-screenshot",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "screenshot_name=sap-screenshot"
                    }
                ],
                "doc": "<p>Takes a screenshot, only if 'screenshots on error' has been enabled, either at import of with keyword <a href=\"#Enable%20Screenshots%20On%20Error\" class=\"name\">enable screenshots on error</a>.</p>\n<p>This keyword uses Robots' internal <span class=\"name\">Screenshot</span> library.</p>",
                "shortdoc": "Takes a screenshot, only if 'screenshots on error' has been enabled, either at import of with keyword `enable screenshots on error`.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 748
            },
            {
                "name": "Unselect Checkbox",
                "args": [
                    {
                        "name": "element_id",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "element_id"
                    }
                ],
                "doc": "<p>Removes selection of checkbox identified by locator. Does nothing if the checkbox is not selected.</p>",
                "shortdoc": "Removes selection of checkbox identified by locator. Does nothing if the checkbox is not selected.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\SapGuiLibrary\\SapGuiLibrary.py",
                "lineno": 757
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Salesforce": {
        "name": "RPA.Salesforce",
        "doc": "<div class=\"document\">\n<p><cite>Salesforce</cite> is a library for accessing Salesforce using REST API.\nThe library extends <a class=\"reference external\" href=\"https://github.com/simple-salesforce/simple-salesforce\">simple-salesforce library</a>.</p>\n<p>More information available at <a class=\"reference external\" href=\"https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_what_is_rest_api.htm\">Salesforce REST API Developer Guide</a>.</p>\n<p><strong>Dataloader</strong></p>\n<p>The keyword <cite>execute_dataloader_import</cite> can be used to mimic\n<a class=\"reference external\" href=\"https://developer.salesforce.com/docs/atlas.en-us.dataLoader.meta/dataLoader/data_loader.htm\">Salesforce Dataloader</a> import behaviour.</p>\n<p><cite>input_object</cite> can be given in different formats. Below is an example where\ninput is in <cite>RPA.Table</cite> format in <strong>method a</strong> and list format in <strong>method b</strong>.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Salesforce</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Salesforce</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"c\"># Method a\n</span><span class=\"p\">${</span><span class=\"nv\">orders</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Database Query Result As Table</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               </span><span class=\"nf\">SELECT * FROM incoming_orders</span><span class=\"p\">\n${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Execute Dataloader Insert</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               ${</span><span class=\"nv\">orders</span><span class=\"p\">}  ${</span><span class=\"nv\">mapping_dict</span><span class=\"p\">}  </span><span class=\"nf\">Tilaus__c</span><span class=\"p\">\n</span><span class=\"c\"># Method b\n</span><span class=\"p\">${</span><span class=\"nv\">status</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">        </span><span class=\"nf\">Execute Dataloader Insert</span><span class=\"p\">\n</span><span class=\"gu\">...</span><span class=\"p\">               ${</span><span class=\"nv\">WORKDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"nf\">orders.json</span><span class=\"p\">  ${</span><span class=\"nv\">mapping_dict</span><span class=\"p\">}  </span><span class=\"s\">Tilaus__c</span>\n</pre>\n<p>Example file <strong>orders.json</strong></p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0015I000002jBLIQA2&quot;</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;0015I000002jBLDQA2&quot;</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<p><cite>mapping_object</cite> describes how the input data fields are mapped into Salesforce\nobject attributes. In the example, the mapping defines that <cite>asiakas</cite> attribute in the\ninput object is mapped into <cite>Tilaaja__c</cite> attribute of <cite>Tilaus__c</cite> custom Salesforce object.</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;Tilaus__c&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;asiakas&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tilaaja__c&quot;</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Object type could be, for example, <cite>Tilaus__c</cite>.</p>\n<p><strong>Salesforce object operations</strong></p>\n<p>Following operations can be used to manage Salesforce objects:</p>\n<ul class=\"simple\">\n<li>Get Salesforce Object By Id</li>\n<li>Create Salesforce Object</li>\n<li>Update Salesforce Object</li>\n<li>Upsert Salesforce Object</li>\n<li>Delete Salesforce Object</li>\n<li>Get Salesforce Object Metadata</li>\n<li>Describe Salesforce Object</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Salesforce</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">  </span><span class=\"nf\">Authorize Salesforce</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}    </span><span class=\"s\">0015I000002jBLDQA2</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Change account details in Salesforce</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">account</span><span class=\"p\">}=      </span><span class=\"nf\">Get Salesforce Object By Id</span><span class=\"p\">   </span><span class=\"s\">Account</span><span class=\"p\">  ${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}\n    &amp;{</span><span class=\"nv\">update_obj</span><span class=\"p\">}=   </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">   </span><span class=\"s\">Name=Nokia Ltd</span><span class=\"p\">  </span><span class=\"s\">BillingStreet=Nokia bulevard 1</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=       </span><span class=\"nf\">Update Salesforce Object</span><span class=\"p\">  </span><span class=\"s\">Account</span><span class=\"p\">  ${</span><span class=\"nv\">ACCOUNT_NOKIA</span><span class=\"p\">}  ${</span><span class=\"nv\">update_obj</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Authorize Salesforce</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=     </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">salesforce</span><span class=\"p\">\n    </span><span class=\"nf\">Auth With Token</span><span class=\"p\">\n    ...        </span><span class=\"s\">username=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[USERNAME]</span><span class=\"p\">\n    ...        </span><span class=\"s\">password=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[PASSWORD]</span><span class=\"p\">\n    ...        </span><span class=\"s\">api_token=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[API_TOKEN]</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Salesforce</span> <span class=\"kn\">import</span> <span class=\"n\">Salesforce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">FileSecrets</span>\n\n<span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">pprint</span><span class=\"o\">.</span><span class=\"n\">PrettyPrinter</span><span class=\"p\">(</span><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">filesecrets</span> <span class=\"o\">=</span> <span class=\"n\">FileSecrets</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets.json&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">filesecrets</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;salesforce&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">sf</span> <span class=\"o\">=</span> <span class=\"n\">Salesforce</span><span class=\"p\">()</span>\n<span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">auth_with_token</span><span class=\"p\">(</span>\n    <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;USERNAME&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">api_token</span><span class=\"o\">=</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;API_TOKEN&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">nokia_account_id</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0015I000002jBLDQA2&quot;</span>\n<span class=\"n\">account</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">get_salesforce_object_by_id</span><span class=\"p\">(</span><span class=\"s2\">&quot;Account&quot;</span><span class=\"p\">,</span> <span class=\"n\">nokia_account_id</span><span class=\"p\">)</span>\n<span class=\"n\">pp</span><span class=\"o\">.</span><span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">account</span><span class=\"p\">)</span>\n<span class=\"n\">billing_information</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;BillingStreet&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Nokia Bulevard 1&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingCity&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Espoo&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingPostalCode&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;01210&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;BillingCountry&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Finland&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">sf</span><span class=\"o\">.</span><span class=\"n\">update_salesforce_object</span><span class=\"p\">(</span><span class=\"s2\">&quot;Account&quot;</span><span class=\"p\">,</span> <span class=\"n\">nokia_account_id</span><span class=\"p\">,</span> <span class=\"n\">billing_information</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Update result: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
        "lineno": 23,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "sandbox",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "sandbox: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
                "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 167
            }
        ],
        "keywords": [
            {
                "name": "Add Product Into Opportunity",
                "args": [
                    {
                        "name": "product_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "product_name: str"
                    },
                    {
                        "name": "quantity",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "quantity: int"
                    },
                    {
                        "name": "opportunity_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "opportunity_id: str | None = None"
                    },
                    {
                        "name": "pricebook_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "pricebook_name: str | None = None"
                    },
                    {
                        "name": "custom_total_price",
                        "types": [
                            "float",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "custom_total_price: float | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Add Salesforce Product into Opportunity.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param product_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of the product in the Pricelist</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param quantity:</th><td class=\"field-body\">number of products to add</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">identifier of Opportunity, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the pricelist, default None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param custom_total_price:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">price that overrides quantity and product price,\ndefault None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True is operation is successful or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Add Salesforce Product into Opportunity.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 358
            },
            {
                "name": "Auth With Token",
                "args": [
                    {
                        "name": "username",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "username: str"
                    },
                    {
                        "name": "password",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "password: str"
                    },
                    {
                        "name": "api_token",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "api_token: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Authorize to Salesforce with security token, username\nand password creating instance.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">Salesforce API username</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">Salesforce API password</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param api_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce API security token</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Authorize to Salesforce with security token, username and password creating instance.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 188
            },
            {
                "name": "Create New Opportunity",
                "args": [
                    {
                        "name": "close_date",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "close_date: str"
                    },
                    {
                        "name": "opportunity_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "opportunity_name: str"
                    },
                    {
                        "name": "stage_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "Closed Won",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "stage_name: str = Closed Won"
                    },
                    {
                        "name": "account_name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account_name: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create Salesforce Opportunity object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param close_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">closing date for the Opportunity, format 'YYYY-MM-DD'</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">as string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param stage_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">needs to be one of the defined stages,\ndefaults to &quot;Closed Won&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">by default uses previously set account, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created opportunity or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create Salesforce Opportunity object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 398
            },
            {
                "name": "Create Salesforce Object",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    },
                    {
                        "name": "object_data",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_data: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create Salesforce object by type and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">resulting object as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Create Salesforce object by type and data.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 526
            },
            {
                "name": "Delete Salesforce Object",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    },
                    {
                        "name": "object_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_id: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Delete Salesfoce object by type and id.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Delete Salesfoce object by type and id.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 577
            },
            {
                "name": "Describe Salesforce Object",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get Salesfoce object description by type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object description as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get Salesfoce object description by type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 599
            },
            {
                "name": "Execute Dataloader Insert",
                "args": [
                    {
                        "name": "input_object",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "input_object: Any"
                    },
                    {
                        "name": "mapping_object",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "mapping_object: Any"
                    },
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Keyword mimics Salesforce Dataloader 'insert' behaviour by taking\nin a <cite>input_object`representing dictionary of data to input into Salesforce,\na `mapping_object</cite> representing dictionary mapping the input keys into\nSalesforce keys, an <cite>object_type</cite> representing Salesforce object which\nDatahandler will handle with <cite>operation</cite> type.</p>\n<p>Stores operation successes into <cite>Salesforce.dataloader_success</cite> array.\nStores operation errors into <cite>Salesforce.dataloader_errors</cite>.</p>\n<p>These can be retrieved with keywords <cite>get_dataloader_success_table</cite> and\n<cite>get_dataloader_error_table</cite> which return corresponding data as\n<cite>RPA.Table</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param input_object:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath or list of dictionaries</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param mapping_object:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath or dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if operation is successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Keyword mimics Salesforce Dataloader 'insert' behaviour by taking in a `input_object`representing dictionary of data to input into Salesforce, a `mapping_object` representing dictionary mapping the input keys into Salesforce keys, an `object_type` representing Salesforce object which Datahandler will handle with `operation` type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 463
            },
            {
                "name": "Get Dataloader Error Table",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Return Dataloader error entries as <cite>RPA.Table</cite></p>\n</div>\n",
                "shortdoc": "Return Dataloader error entries as `RPA.Table`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 511
            },
            {
                "name": "Get Dataloader Success Table",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Return Dataloader success entries as <cite>RPA.Table</cite></p>\n</div>\n",
                "shortdoc": "Return Dataloader success entries as `RPA.Table`",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 507
            },
            {
                "name": "Get Opportunity Id",
                "args": [
                    {
                        "name": "opportunity_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "opportunity_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get ID of an Opportunity linked to set account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param opportunity_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">opportunity to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Id of the opportunity or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get ID of an Opportunity linked to set account.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 297
            },
            {
                "name": "Get Pricebook Entries",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all pricebook entries.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">query result</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all pricebook entries.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 290
            },
            {
                "name": "Get Pricebook Id",
                "args": [
                    {
                        "name": "pricebook_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pricebook_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get ID of a pricelist.</p>\n<p>Returns False if unique Id is not found.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Id of the pricelist or False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get ID of a pricelist.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 315
            },
            {
                "name": "Get Products In Pricelist",
                "args": [
                    {
                        "name": "pricebook_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pricebook_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all products in a pricelist.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to query</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">products in dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all products in a pricelist.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 330
            },
            {
                "name": "Get Salesforce Object By Id",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    },
                    {
                        "name": "object_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_id: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get Salesforce object by id and type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of object attributes</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get Salesforce object by id and type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 515
            },
            {
                "name": "Get Salesforce Object Metadata",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get Salesfoce object metadata by type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object metadata as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get Salesfoce object metadata by type.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 589
            },
            {
                "name": "Read Dictionary From File",
                "args": [
                    {
                        "name": "mapping_file",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "mapping_file: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read dictionary from file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param mapping_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">path to the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">file content as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Read dictionary from file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 434
            },
            {
                "name": "Salesforce Query",
                "args": [
                    {
                        "name": "sql_string",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sql_string: str"
                    },
                    {
                        "name": "as_table",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_table: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Perform SQL query.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sql_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL clause to perform</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">set to <cite>True</cite> if result should be <cite>RPA.Tables.Table</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the SQL query</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Perform SQL query.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 241
            },
            {
                "name": "Salesforce Query Result As Table",
                "args": [
                    {
                        "name": "sql_string",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sql_string: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Perform SQL query and return result as <cite>RPA.Table</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sql_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL clause to perform</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the SQL query as Table</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Perform SQL query and return result as `RPA.Table`.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 255
            },
            {
                "name": "Set Account",
                "args": [
                    {
                        "name": "account_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account_name: str = "
                    },
                    {
                        "name": "account_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "account_id: str = "
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set account name and id by giving either parameter.</p>\n<dl class=\"docutils\">\n<dt>Can be used together with keywords:</dt>\n<dd><ul class=\"first last simple\">\n<li>get_opportunity_id</li>\n<li>create_new_opportunity</li>\n</ul>\n</dd>\n</dl>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param account_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">string, defaults to &quot;&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if account was found from Salesforce, else False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set account name and id by giving either parameter.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 266
            },
            {
                "name": "Set Pricebook",
                "args": [
                    {
                        "name": "pricebook_name",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "pricebook_name: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Sets Pricebook to be used in Salesforce operations.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pricebook_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pricelist to use</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Sets Pricebook to be used in Salesforce operations.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 351
            },
            {
                "name": "Update Salesforce Object",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    },
                    {
                        "name": "object_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_id: str"
                    },
                    {
                        "name": "object_data",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_data: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Update Salesfoce object by type, id and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Update Salesfoce object by type, id and data.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 541
            },
            {
                "name": "Upsert Salesforce Object",
                "args": [
                    {
                        "name": "object_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_type: str"
                    },
                    {
                        "name": "object_id",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_id: str"
                    },
                    {
                        "name": "object_data",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "object_data: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Upsert Salesfoce object by type, id and data.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object type</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object id</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_data:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Salesforce object data</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises SalesforceDataNotAnDictionary:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when <cite>object_data</cite> is not dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if successful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Upsert Salesfoce object by type, id and data.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Salesforce.py",
                "lineno": 559
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Slack": {
        "name": "RPA.Slack",
        "doc": "<div class=\"document\">\n<p>RPA Framework library for Slack operations.</p>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Slack.py",
        "lineno": 6,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Slack Message Using Webhook",
                "args": [
                    {
                        "name": "webhook_url",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "webhook_url: str"
                    },
                    {
                        "name": "channel",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "channel: str"
                    },
                    {
                        "name": "sender",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "sender: str"
                    },
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "icon_emoji",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "icon_emoji: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Send message to Slack channel using webhook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param webhook_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">needs to be configured for the Slack server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param channel:</th><td class=\"field-body\">channel needs to exist in the Slack server</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sender:</th><td class=\"field-body\">shown in the message post as sender</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text for the message post</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param icon_emoji:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">icon for the message post, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Send message to Slack channel using webhook.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Slack.py",
                "lineno": 15
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Tables": {
        "name": "RPA.Tables",
        "doc": "<div class=\"document\">\n<p><cite>Tables</cite> is a library for manipulating tabular data inside Robot Framework.</p>\n<p>It can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.</p>\n<p><strong>Import types</strong></p>\n<p>The data a table can be created from can be of two main types:</p>\n<ol class=\"arabic simple\">\n<li>An iterable of individual rows, like a list of lists, or list of dictionaries</li>\n<li>A dictionary of columns, where each dictionary value is a list of values</li>\n</ol>\n<p>For instance, these two input values:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">],</span>\n    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">58</span><span class=\"p\">,</span>     <span class=\"mi\">22</span><span class=\"p\">,</span>     <span class=\"mi\">67</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Would both result in the following table:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"39%\" />\n<col width=\"33%\" />\n<col width=\"28%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Index</th>\n<th class=\"head\">Name</th>\n<th class=\"head\">Age</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>0</td>\n<td>Mark</td>\n<td>58</td>\n</tr>\n<tr><td>1</td>\n<td>John</td>\n<td>22</td>\n</tr>\n<tr><td>2</td>\n<td>Adam</td>\n<td>67</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Indexing columns and rows</strong></p>\n<p>Columns can be referred to in two ways: either with a unique string\nname or their position as an integer. Columns can be named either when\nthe table is created, or they can be (re)named dynamically with keywords.\nThe integer position can always be used, and it starts from zero.</p>\n<p>For instance, a table with columns &quot;Name&quot;, &quot;Age&quot;, and &quot;Address&quot; would\nallow referring to the &quot;Age&quot; column with either the name &quot;Age&quot; or the\nnumber 1.</p>\n<p>Rows do not have a name, but instead only have an integer index. This\nindex also starts from zero. Keywords where rows are indexed also support\nnegative values, which start counting backwards from the end.</p>\n<p>For instance, in a table with five rows, the first row could be referred\nto with the number 0. The last row could be accessed with either 4 or\n-1.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Tables</cite> library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Files to Table</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}\n    </span><span class=\"nf\">Filter table by column</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">size</span><span class=\"p\">  </span><span class=\"s\">&gt;=</span><span class=\"p\">  ${</span><span class=\"nv\">1024</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}</span><span class=\"s\">[name]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Write table to CSV</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files.csv</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span>\n<span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">read_table_from_csv</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;orders.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;product&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">group_table_by_column</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">customer</span> <span class=\"ow\">in</span> <span class=\"n\">customers</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">customer</span><span class=\"p\">:</span>\n        <span class=\"n\">add_cart</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n    <span class=\"n\">make_order</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
        "lineno": 871,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Add Table Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "name",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "name: str | None = None"
                    },
                    {
                        "name": "values",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "values: Any | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Append a column to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of new column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) for new column</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, one for each row, or\none single value that is set for all rows.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Add empty column\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add empty column with name\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=Home Address</span><span class=\"p\">\n\n</span><span class=\"c\"># Add new column where every every row has the same value\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=TOS</span><span class=\"p\">    </span><span class=\"c\">values=${FALSE}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add new column where every row has a unique value\n${is_first}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">${TRUE}</span><span class=\"p\">    </span><span class=\"c\">${FALSE}</span><span class=\"p\">    </span><span class=\"c\">${FALSE}</span><span class=\"p\">\n</span><span class=\"c\">Add table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=IsFirst</span><span class=\"p\">    </span><span class=\"c\">values=${is_first}</span>\n</pre>\n</div>\n",
                "shortdoc": "Append a column to a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1199
            },
            {
                "name": "Add Table Row",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "values",
                        "types": [
                            "Any",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "values: Any | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Append rows to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) for new row</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.</p>\n<p>It can also be a single value that is set for all columns,\nwhich is <tt class=\"docutils literal\">None</tt> by default.</p>\n<p>Example:s</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Add empty row\nAdd table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add row where every column has the same value\nAdd table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">Unknown</span><span class=\"p\">\n\n</span><span class=\"c\"># Add values per column\n${values}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">Username=Mark</span><span class=\"p\">    </span><span class=\"c\">Mail=mark&#64;robocorp.com</span><span class=\"p\">\n</span><span class=\"c\">Add table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${values}</span>\n</pre>\n</div>\n",
                "shortdoc": "Append rows to a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1231
            },
            {
                "name": "Clear Table",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Clear table in-place, but keep columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to clear</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Clear table in-place, but keep columns.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1046
            },
            {
                "name": "Copy Table",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Make a copy of a table object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to copy</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Make a copy of a table object.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1038
            },
            {
                "name": "Create Table",
                "args": [
                    {
                        "name": "data",
                        "types": [
                            "Dict[typing.Union[int, str], typing.Union[typing.Dict, typing.List, typing.Tuple, typing.NamedTuple, set]]",
                            "List[typing.Union[typing.Dict, typing.List, typing.Tuple, typing.NamedTuple, set]]",
                            "Table",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "data: Dict[typing.Union[int, str], typing.Union[typing.Dict, typing.List, typing.Tuple, typing.NamedTuple, set]] | List[typing.Union[typing.Dict, typing.List, typing.Tuple, typing.NamedTuple, set]] | Table | None = None"
                    },
                    {
                        "name": "trim",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "trim: bool = False"
                    },
                    {
                        "name": "columns",
                        "types": [
                            "List[str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "columns: List[str] | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create Table object from data.</p>\n<p>Data can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">Source data for table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Remove all empty rows from the end of the worksheet,\ndefault <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">Names of columns (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>See the main library documentation for more information about\nsupported data types.</p>\n</div>\n",
                "shortdoc": "Create Table object from data.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 986
            },
            {
                "name": "Export Table",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "with_index",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "with_index: bool = False"
                    },
                    {
                        "name": "as_list",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_list: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Convert a table object into standard Python containers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to convert to dict</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_index:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Include index in values</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Export data as list instead of dict</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${orders}=</span><span class=\"p\">       </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Sort table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">CustomerId</span><span class=\"p\">\n</span><span class=\"c\">${export}=</span><span class=\"p\">       </span><span class=\"c\">Export table</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n</span><span class=\"c\"># The following keyword expects a dictionary:\nWrite as JSON</span><span class=\"p\">    </span><span class=\"c\">${export}</span>\n</pre>\n</div>\n",
                "shortdoc": "Convert a table object into standard Python containers.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1013
            },
            {
                "name": "Filter Empty Rows",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove all rows from a table which have only <tt class=\"docutils literal\">None</tt> values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Filter empty rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all rows from a table which have only ``None`` values.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1678
            },
            {
                "name": "Filter Table By Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    },
                    {
                        "name": "operator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "operator: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove all rows where column values don't match the\ngiven condition.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to filter with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">Filtering operator, e.g. &gt;, &lt;, ==, contains</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to compare column to (using operator)</td>\n</tr>\n</tbody>\n</table>\n<p>See the keyword <tt class=\"docutils literal\">Find table rows</tt> for all supported operators\nand their descriptions.</p>\n<p>The filtering will be done in-place.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Only accept prices that are non-zero\nFilter table by column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">price</span><span class=\"p\">  </span><span class=\"c\">!=</span><span class=\"p\">  </span><span class=\"c\">${0}</span><span class=\"p\">\n\n</span><span class=\"c\"># Remove uwnanted product types\n&#64;{types}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">Unknown</span><span class=\"p\">    </span><span class=\"c\">Removed</span><span class=\"p\">\n</span><span class=\"c\">Filter table by column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">product_type</span><span class=\"p\">  </span><span class=\"c\">not in</span><span class=\"p\">  </span><span class=\"c\">${types}</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all rows where column values don't match the given condition.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1641
            },
            {
                "name": "Find Table Rows",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    },
                    {
                        "name": "operator",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "operator: str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Find all rows in a table which match a condition for a\ngiven column.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to find from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name of column to search</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">Comparison operator</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to compare against</td>\n</tr>\n</tbody>\n</table>\n<p>Supported operators:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"23%\" />\n<col width=\"77%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Operator</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>&gt;</td>\n<td>Cell value is larger than</td>\n</tr>\n<tr><td>&lt;</td>\n<td>Cell value is smaller than</td>\n</tr>\n<tr><td>&gt;=</td>\n<td>Cell value is larger or equal than</td>\n</tr>\n<tr><td>&lt;=</td>\n<td>Cell value is smaller or equal than</td>\n</tr>\n<tr><td>==</td>\n<td>Cell value is equal to</td>\n</tr>\n<tr><td>!=</td>\n<td>Cell value is not equal to</td>\n</tr>\n<tr><td>is</td>\n<td>Cell value is the same object</td>\n</tr>\n<tr><td>not is</td>\n<td>Cell value is not the same object</td>\n</tr>\n<tr><td>contains</td>\n<td>Cell value contains given value</td>\n</tr>\n<tr><td>not contains</td>\n<td>Cell value does not contain given value</td>\n</tr>\n<tr><td>in</td>\n<td>Cell value is in given value</td>\n</tr>\n<tr><td>not in</td>\n<td>Cell value is not in given value</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the matches as a new Table instance.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Find all rows where price is over 200\n&#64;{rows}=</span><span class=\"p\">    </span><span class=\"c\">Find table rows</span><span class=\"p\">    </span><span class=\"c\">Price</span><span class=\"p\">  </span><span class=\"c\">&gt;</span><span class=\"p\">  </span><span class=\"c\">${200}</span><span class=\"p\">\n\n</span><span class=\"c\"># Find all rows where the status does not contain &quot;removed&quot;\n&#64;{rows}=</span><span class=\"p\">    </span><span class=\"c\">Find table rows</span><span class=\"p\">    </span><span class=\"c\">Status</span><span class=\"p\">    </span><span class=\"c\">not contains</span><span class=\"p\">    </span><span class=\"c\">removed</span>\n</pre>\n</div>\n",
                "shortdoc": "Find all rows in a table which match a condition for a given column.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1548
            },
            {
                "name": "Get Table Cell",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a cell value from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column of cell</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the value in the first row and first column\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">\n\n</span><span class=\"c\"># Get the value in the last row and first column\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">\n\n</span><span class=\"c\"># Get the value in the third row and column &quot;Name&quot;\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">Name</span>\n</pre>\n</div>\n",
                "shortdoc": "Get a cell value from a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1501
            },
            {
                "name": "Get Table Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get all values for a single column in a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to read</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${emails}=</span><span class=\"p\">    </span><span class=\"c\">Get table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">E-Mail Address</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${email}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{emails}</span><span class=\"p\">\n    </span><span class=\"c\">Send promotion</span><span class=\"p\">    </span><span class=\"c\">${email}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get all values for a single column in a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1287
            },
            {
                "name": "Get Table Dimensions",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return table dimensions, as (rows, columns).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to inspect</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${rows}</span><span class=\"p\">  </span><span class=\"c\">${columns}=</span><span class=\"p\">    </span><span class=\"c\">Get table dimensions</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Table has ${rows} rows and ${columns} columns.</span>\n</pre>\n</div>\n",
                "shortdoc": "Return table dimensions, as (rows, columns).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1140
            },
            {
                "name": "Get Table Row",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "as_list",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_list: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get a single row from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${first}=</span><span class=\"p\">    </span><span class=\"c\">Get table row</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">     </span><span class=\"c\">Handling order: ${first}[Order ID]</span><span class=\"p\">\n\n</span><span class=\"c\">${row}=</span><span class=\"p\">      </span><span class=\"c\">Get table row</span><span class=\"p\">    </span><span class=\"c\">${data}</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">as_list=${TRUE}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{row}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Data point: ${value}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Get a single row from a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1261
            },
            {
                "name": "Get Table Slice",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "start",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "start: int | None = None"
                    },
                    {
                        "name": "end",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "end: int | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return a new Table from a range of given Table rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Start index (inclusive)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">End index (exclusive)</td>\n</tr>\n</tbody>\n</table>\n<p>If <tt class=\"docutils literal\">start</tt> is not defined, starts from the first row.\nIf <tt class=\"docutils literal\">end</tt> is not defined, stops at the last row.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get all rows except first five\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">   </span><span class=\"c\">&nbsp;${table}</span><span class=\"p\">    </span><span class=\"c\">start=5</span><span class=\"p\">\n\n</span><span class=\"c\"># Get rows at indexes 5, 6, 7, 8, and 9\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">   </span><span class=\"c\">&nbsp;${table}</span><span class=\"p\">    </span><span class=\"c\">start=5</span><span class=\"p\">    </span><span class=\"c\">end=10</span><span class=\"p\">\n\n</span><span class=\"c\"># Get all rows except last five\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">end=-5</span>\n</pre>\n</div>\n",
                "shortdoc": "Return a new Table from a range of given Table rows.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1417
            },
            {
                "name": "Group Table By Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Group a table by <tt class=\"docutils literal\">column</tt> and return a list of grouped Tables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to use for grouping</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column which is used as grouping criteria</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${orders}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">&#64;{groups}=</span><span class=\"p\">    </span><span class=\"c\">Group table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">customer</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${group}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{groups}</span><span class=\"p\">\n    </span><span class=\"c\"># Process all orders for the customer at once\n</span><span class=\"p\">    </span><span class=\"c\">Process order</span><span class=\"p\">    </span><span class=\"c\">${group}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Group a table by ``column`` and return a list of grouped Tables.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1619
            },
            {
                "name": "Merge Tables",
                "args": [
                    {
                        "name": "tables",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*tables: Table"
                    },
                    {
                        "name": "index",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "NAMED_ONLY",
                        "required": false,
                        "repr": "index: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Create a union of two tables and their contents.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tables:</th><td class=\"field-body\">Tables to merge</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">Column name to use as index for merge</td>\n</tr>\n</tbody>\n</table>\n<p>By default rows from all tables are appended one after the other.\nOptionally a column name can be given with <tt class=\"docutils literal\">index</tt>, which is\nused to merge rows together.</p>\n<p>Example:</p>\n<p>For instance, a <tt class=\"docutils literal\">name</tt> column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Price</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>10.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>15.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>20.0</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Stock</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>12.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>99.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>0.0</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${products}=</span><span class=\"p\">    </span><span class=\"c\">Merge tables</span><span class=\"p\">    </span><span class=\"c\">${prices}</span><span class=\"p\">    </span><span class=\"c\">${stock}</span><span class=\"p\">    </span><span class=\"c\">index=Name</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${product}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{products}</span><span class=\"p\">\n    </span><span class=\"c\">Log many</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Product: ${product}[Name]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Price: ${product}[Price]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Stock: ${product}[Stock]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Create a union of two tables and their contents.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1054
            },
            {
                "name": "Pop Table Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column: int | str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove column from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to remove</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Remove column from table and discard it\nPop table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">   </span><span class=\"c\">userId</span><span class=\"p\">\n\n</span><span class=\"c\"># Remove column from table and iterate over it\n${ids}=</span><span class=\"p\">    </span><span class=\"c\">Pop table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">userId</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${id}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{ids}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">User id: ${id}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove column from table and return it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1389
            },
            {
                "name": "Pop Table Row",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "row: int | None = None"
                    },
                    {
                        "name": "as_list",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_list: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove row from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row index, pops first row if none given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${first}=</span><span class=\"p\">    </span><span class=\"c\">Pop table row</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">     </span><span class=\"c\">Handling order: ${first}[Order ID]</span><span class=\"p\">\n\n</span><span class=\"c\">${row}=</span><span class=\"p\">      </span><span class=\"c\">Pop table row</span><span class=\"p\">    </span><span class=\"c\">${data}</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">as_list=${TRUE}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{row}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Data point: ${value}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove row from table and return it.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1361
            },
            {
                "name": "Read table from CSV",
                "args": [
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "header",
                        "types": [
                            "bool",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header: bool | None = None"
                    },
                    {
                        "name": "columns",
                        "types": [
                            "List[str]",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "columns: List[str] | None = None"
                    },
                    {
                        "name": "dialect",
                        "types": [
                            "Dialect",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "dialect: Dialect | None = None"
                    },
                    {
                        "name": "delimiters",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "delimiters: str | None = None"
                    },
                    {
                        "name": "column_unknown",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "Unknown",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "column_unknown: str = Unknown"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Read a CSV file as a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">CSV file includes header</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">Names of columns in resulting table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">Format of CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delimiters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">String of possible delimiters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param column_unknown:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Column name for unknown fields</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Text encoding for input file,\nuses system encoding by default</td>\n</tr>\n</tbody>\n</table>\n<p>By default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it's unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.</p>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>,\nand <tt class=\"docutils literal\">header</tt> is boolean argument (<tt class=\"docutils literal\">True</tt>/<tt class=\"docutils literal\">False</tt>). Optionally a\nset of valid <tt class=\"docutils literal\">delimiters</tt> can be given as a string.</p>\n<p>The <tt class=\"docutils literal\">columns</tt> argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.</p>\n<p>If the source data has a header and rows have more fields than\nthe header defines, the remaining values are put into the column\ngiven by <tt class=\"docutils literal\">column_unknown</tt>. By default it has the value &quot;Unknown&quot;.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Source dialect is deduced automatically\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">export.csv</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Found columns: ${table.columns}</span><span class=\"p\">\n\n</span><span class=\"c\"># Source dialect is known and given explicitly\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">export-excel.csv</span><span class=\"p\">    </span><span class=\"c\">dialect=excel</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Found columns: ${table.columns}</span>\n</pre>\n</div>\n",
                "shortdoc": "Read a CSV file as a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1750
            },
            {
                "name": "Rename Table Columns",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "names",
                        "types": [
                            "List[typing.Union[str, NoneType]]"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "names: List[typing.Union[str, NoneType]]"
                    },
                    {
                        "name": "strict",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "strict: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Renames columns in the Table with given values. Columns with\nname as <tt class=\"docutils literal\">None</tt> will use the previous value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">List of new column names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">If True, raises ValueError if column lengths\ndo not match</td>\n</tr>\n</tbody>\n</table>\n<p>The renaming will be done in-place.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${columns}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">   </span><span class=\"c\">First</span><span class=\"p\">  </span><span class=\"c\">Second</span><span class=\"p\">  </span><span class=\"c\">Third</span><span class=\"p\">\n</span><span class=\"c\">Rename table columns</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${columns}</span><span class=\"p\">\n</span><span class=\"c\"># First, Second, Third\n</span><span class=\"p\">\n\n</span><span class=\"c\">${columns}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">   </span><span class=\"c\">Uno</span><span class=\"p\">  </span><span class=\"c\">Dos</span><span class=\"p\">\n</span><span class=\"c\">Rename table columns</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${columns}</span><span class=\"p\">\n</span><span class=\"c\"># Uno, Dos, Third</span>\n</pre>\n</div>\n",
                "shortdoc": "Renames columns in the Table with given values. Columns with name as ``None`` will use the previous value.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1156
            },
            {
                "name": "Set Row As Column Names",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set existing row as names for columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to use as column names</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">data.csv</span><span class=\"p\">\n</span><span class=\"c\">Set row as column names</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span>\n</pre>\n</div>\n",
                "shortdoc": "Set existing row as names for columns.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1445
            },
            {
                "name": "Set Table Cell",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    },
                    {
                        "name": "value",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "value: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set a cell value in a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to set</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set the value in the first row and first column to &quot;First&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">       </span><span class=\"c\">First</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the value in the last row and first column to &quot;Last&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">       </span><span class=\"c\">Last</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the value in the third row and column &quot;Name&quot; to &quot;Unknown&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">Name</span><span class=\"p\">    </span><span class=\"c\">Unknown</span>\n</pre>\n</div>\n",
                "shortdoc": "Set a cell value in a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1524
            },
            {
                "name": "Set Table Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    },
                    {
                        "name": "values",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "values: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Assign values to entire column in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) to set</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, one for each row, or\none single value that is set for all rows.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set different value for each row (sizes must match)\n${ids}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">  </span><span class=\"c\">4</span><span class=\"p\">  </span><span class=\"c\">5</span><span class=\"p\">\n</span><span class=\"c\">Set table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">userId</span><span class=\"p\">    </span><span class=\"c\">${ids}</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the same value for all rows\nSet table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">     </span><span class=\"c\">${NONE}</span>\n</pre>\n</div>\n",
                "shortdoc": "Assign values to entire column in the table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1337
            },
            {
                "name": "Set Table Row",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "row",
                        "types": [
                            "int"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "row: int"
                    },
                    {
                        "name": "values",
                        "types": [
                            "Any"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "values: Any"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Assign values to a row in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) to set</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.</p>\n<p>It can also be a single value that is set for all columns.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${columns}=</span><span class=\"p\">  </span><span class=\"c\">Create list</span><span class=\"p\">     </span><span class=\"c\">One</span><span class=\"p\">  </span><span class=\"c\">Two</span><span class=\"p\">  </span><span class=\"c\">Three</span><span class=\"p\">\n</span><span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Create table</span><span class=\"p\">    </span><span class=\"c\">columns=${columns}</span><span class=\"p\">\n\n</span><span class=\"c\">${values}=</span><span class=\"p\">   </span><span class=\"c\">Create list</span><span class=\"p\">     </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">${values}</span><span class=\"p\">\n\n</span><span class=\"c\">${values}=</span><span class=\"p\">   </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">One=1</span><span class=\"p\">  </span><span class=\"c\">Two=2</span><span class=\"p\">  </span><span class=\"c\">Three=3</span><span class=\"p\">\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">${values}</span><span class=\"p\">\n\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">${NONE}</span>\n</pre>\n</div>\n",
                "shortdoc": "Assign values to a row in the table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1306
            },
            {
                "name": "Sort Table By Column",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "column",
                        "types": [
                            "int",
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "column: int | str"
                    },
                    {
                        "name": "ascending",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "ascending: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Sort a table in-place according to <tt class=\"docutils literal\">column</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to sort</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to sort with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ascending:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Table sort order</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${orders}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Sort table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">order_date</span>\n</pre>\n</div>\n",
                "shortdoc": "Sort a table in-place according to ``column``.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1600
            },
            {
                "name": "Table Head",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 5"
                    },
                    {
                        "name": "as_list",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_list: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return first <tt class=\"docutils literal\">count</tt> rows from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">Number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the first 10 employees\n${employees}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">employees.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${first}=</span><span class=\"p\">        </span><span class=\"c\">Table head</span><span class=\"p\">    </span><span class=\"c\">${employees}</span><span class=\"p\">    </span><span class=\"c\">10</span>\n</pre>\n</div>\n",
                "shortdoc": "Return first ``count`` rows from a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1461
            },
            {
                "name": "Table Tail",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "5",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 5"
                    },
                    {
                        "name": "as_list",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "as_list: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Return last <tt class=\"docutils literal\">count</tt> rows from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">Number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of Table</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the last 10 orders\n${orders}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">${latest}=</span><span class=\"p\">    </span><span class=\"c\">Table tail</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">10</span>\n</pre>\n</div>\n",
                "shortdoc": "Return last ``count`` rows from a table.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1481
            },
            {
                "name": "Trim Column Names",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove all extraneous whitespace from column names.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">data.csv</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${table.columns}</span><span class=\"p\">  </span><span class=\"c\"># &quot;One&quot;, &quot;Two &quot;, &quot;  Three &quot;\nTrim column names</span><span class=\"p\">     </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${table-columns}</span><span class=\"p\">  </span><span class=\"c\"># &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all extraneous whitespace from column names.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1727
            },
            {
                "name": "Trim Empty Rows",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Remove all rows from the <em>end</em> of a table\nwhich have only <tt class=\"docutils literal\">None</tt> as values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Trim empty rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
                "shortdoc": "Remove all rows from the *end* of a table which have only ``None`` as values.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1701
            },
            {
                "name": "Write table to CSV",
                "args": [
                    {
                        "name": "table",
                        "types": [
                            "Table"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "table: Table"
                    },
                    {
                        "name": "path",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "path: str"
                    },
                    {
                        "name": "header",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "header: bool = True"
                    },
                    {
                        "name": "dialect",
                        "types": [
                            "Dialect"
                        ],
                        "defaultValue": "Excel",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "dialect: Dialect = Excel"
                    },
                    {
                        "name": "encoding",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "encoding: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Write a table as a CSV file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to write to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">Write columns as header to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">The format of output CSV</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Text encoding for output file,\nuses system encoding by default</td>\n</tr>\n</tbody>\n</table>\n<p>Valid <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">Excel</tt>, <tt class=\"docutils literal\">ExcelTab</tt>, and <tt class=\"docutils literal\">Unix</tt>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${sheet}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">header=${TRUE}</span><span class=\"p\">\n</span><span class=\"c\">Write table to CSV</span><span class=\"p\">    </span><span class=\"c\">${sheet}</span><span class=\"p\">    </span><span class=\"c\">output.csv</span>\n</pre>\n</div>\n",
                "shortdoc": "Write a table as a CSV file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tables.py",
                "lineno": 1836
            }
        ],
        "dataTypes": {
            "enums": [
                {
                    "name": "Dialect",
                    "type": "Enum",
                    "doc": "<div class=\"document\">\n<p>CSV dialect</p>\n</div>\n",
                    "members": [
                        {
                            "name": "Excel",
                            "value": "excel"
                        },
                        {
                            "name": "ExcelTab",
                            "value": "excel-tab"
                        },
                        {
                            "name": "Unix",
                            "value": "unix"
                        }
                    ]
                }
            ],
            "typedDicts": []
        }
    },
    "RPA.Tasks": {
        "name": "RPA.Tasks",
        "doc": "<div class=\"document\">\n<p><cite>Tasks</cite> is a library for controlling task execution during a Robot Framework run.</p>\n<p>It allows conditional branching between tasks, loops and jumps, and optionally\nvalidating the execution through a schema file. It can also be used to\nvisualize the tasks as a graph.</p>\n<p id=\"model\"><strong>Execution model</strong></p>\n<p>In a typical Robot Framework run, tasks are ordered linearly in a file and\nthey're executed in definition order. Events that happen during\nthe execution can not affect the order and only have the option to fail the task\nor continue as defined.</p>\n<p>Using the <cite>Tasks</cite> library, it's possible to change this model according\nto different states or inputs. The execution will start by running a single\nstart task from the suite, and then according to user-defined keywords or\nschema rules select the next task. Any task which is defined in the same file\ncan be used, and the same task can also be used multiple times during a single\nexecution.</p>\n<p id=\"execution-example\">Example:</p>\n<p>As an example, the following Robot Framework file describes a process where\na task would have to be executed multiple times before a condition is reached.\nIn a real-world scenario, these tasks would be more complicated, instead of just\nincrementing numbers.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    </span><span class=\"nf\">Set next task if</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}</span><span class=\"s\"> &gt;= </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    ...    </span><span class=\"s\">Target reached</span><span class=\"p\">\n    ...    </span><span class=\"s\">Increment current number</span><span class=\"p\">\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n    </span><span class=\"nf\">Jump to task</span><span class=\"p\">    </span><span class=\"s\">Check loop condition</span><span class=\"p\">\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p>The execution for this example would go as follows:</p>\n<ol class=\"arabic simple\">\n<li>It starts from <tt class=\"docutils literal\">Check loop condition</tt>, as it's the first task in the file.</li>\n<li>During the first task, the keyword <tt class=\"docutils literal\">Set next task if</tt> is called, which queues\nup the next task according to a condition.</li>\n<li>In the initial state, we have not reached the target number, and will next run\nthe task <tt class=\"docutils literal\">Increment current number</tt>.</li>\n<li>The second task executes normally and in the end jumps back to the first\ntask using the keyword <tt class=\"docutils literal\">Jump to task</tt>.</li>\n<li>The above sequence is repeated until the condition is met, and we move to\nthe final task of the file. This final task does not schedule further tasks\nand the execution ends.</li>\n</ol>\n<p>You can also note the task <tt class=\"docutils literal\">This will not run</tt>, which as the name implies\nis never executed, as no other task schedules or jumps to it.</p>\n<p>The console log from the above execution shows how the same task is executed\nmultiple times:</p>\n<pre class=\"code console literal-block\">\n<span class=\"go\">==============================================================================\nIncrementing Process\n==============================================================================\n</span><span class=\"gp\">#</span><span class=\"m\">1</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">2</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">3</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">4</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">5</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">6</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">7</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">8</span>   Increment current number                                         <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">9</span>   Check loop condition                                             <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">10</span>  Target reached                                                   <span class=\"p\">|</span> PASS <span class=\"p\">|</span>\n<span class=\"go\">------------------------------------------------------------------------------\nIncrementing Process:: [/graph_incrementing_process.svg]              | PASS |\n10 critical tasks, 10 passed, 0 failed\n10 tasks total, 10 passed, 0 failed\n==============================================================================</span>\n</pre>\n<p id=\"graph\"><strong>Graph</strong></p>\n<p>A common way to document a process is through a directed graph. These graphs\nare usually drawn manually and describe the expected higher level steps.\nThe actual implementation itself follows a different path through a graph,\ndepending on inputs or implementation details. This library visualizes this\nexecution graph using the <a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a> tool.</p>\n<p>After the execution is finished, it will create a\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/DOT_(graph_description_language)\">DOT</a> file\nand render it as an image. This image will automatically be appended\nto the suite's documentation field.</p>\n<p><strong>Requirements</strong></p>\n<p>Drawing the graph requires a working installation of\n<a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a>. This can be installed through their\nwebsite or by using <a class=\"reference external\" href=\"https://docs.conda.io/\">Conda</a>.</p>\n<p>This requirement is optional for the functioning of this library, and will\ndisplay a warning if the tool is not available. The visualization\ncan be entirely disabled with the <tt class=\"docutils literal\">graph</tt> argument during library\ninitialization.</p>\n<p id=\"schema\"><strong>Schema</strong></p>\n<p>There is an option to define a schema file for the suite, which is written in JSON.\nThis file will be used to validate the actual execution and fail it if an unexpected\ntransition between tasks happens. It can also define rules for selecting the next\ntask, which allows separating the task and process definitions.</p>\n<p>Example:</p>\n<p>The execution-example shown previously used keywords to control\nthe execution. This can also be done using the following schema:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"nt\">&quot;tasks&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">&quot;Check loop condition&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;check&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;start&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;target&quot;</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$CURRENT &gt;= $TARGET&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;target&quot;</span>\n                <span class=\"p\">},</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$CURRENT &lt; $TARGET&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;increment&quot;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;Increment current number&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;check&quot;</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span>\n                    <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;check&quot;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">&quot;Target reached&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;target&quot;</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n            <span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span> <span class=\"p\">[]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>This has the added benefit of protecting against implementation errors,\nas the library will validate the start and end tasks, and transitions between\ndifferent tasks.</p>\n<p>After this schema has been taken into use, the aforementioned example\nwill reduce to the following:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">    </span><span class=\"s\">schema=counter-schema.json</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p><strong>Format</strong></p>\n<p>The current format is JSON with the following structure:</p>\n<pre class=\"code javascript literal-block\">\n<span class=\"p\">{</span>\n    <span class=\"s2\">&quot;tasks&quot;</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;alias&quot;</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;start&quot;</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;end&quot;</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;next&quot;</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">[],</span>\n            <span class=\"s2\">&quot;actions&quot;</span><span class=\"o\">:</span> <span class=\"nx\">action</span><span class=\"p\">[],</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Each schema is a map of tasks with various properties. The keys must\nmatch the task names in the Robot Framework file definition. All properties\ninside the task are optional.</p>\n<p>The available properties and their uses:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>alias</em>:   Define a short name for the task, which can be used as a reference</dt>\n<dd>inside the schema.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>start</em>:   Start task for execution. There can be only one task with this</dt>\n<dd>enabled. If not defined, will default to first task in the file.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>end</em>:     Valid end task for execution. There can be multiple tasks with this</dt>\n<dd>enabled. Fails the execution if this is defined for any task and the\nexecution stops in a non-end task.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>next</em>:    List of valid tasks to transition to from this task. Supports</dt>\n<dd>alias definitions.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>actions</em>: List of actions that are executed at the end of the task.</dt>\n<dd>See section below for details.</dd>\n</dl>\n</li>\n</ul>\n<p>The types of actions:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>exception</em>: Set the next task if a matching exception occurs.</dt>\n<dd>Matches the exception message as regex.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>condition</em>: Set the next task if a conditional expression is true.</dt>\n<dd>Allows using Robot Framework variables.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>status</em>:    Set the next task if the current task's result matches,</dt>\n<dd>e.g. PASS or FAIL.</dd>\n</dl>\n</li>\n</ul>\n<p>Examples of actions:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;exception&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;.*ValueError.*&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Invalid input values&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;$ATTEMPTS &gt; 10&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Too many attempts&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span> <span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Success state&quot;</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
        "lineno": 332,
        "tags": [],
        "inits": [
            {
                "name": "Init",
                "args": [
                    {
                        "name": "execution_limit",
                        "types": [],
                        "defaultValue": "1024",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "execution_limit=1024"
                    },
                    {
                        "name": "schema",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "schema=None"
                    },
                    {
                        "name": "graph",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "graph=True"
                    },
                    {
                        "name": "graph_inline",
                        "types": [],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "graph_inline=True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>There are a few arguments for controlling the Tasks library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param execution_limit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum number of tasks to run in suite,\nused to prevent infinite loops</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param schema:</th><td class=\"field-body\">Path to optional schema file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param graph:</th><td class=\"field-body\">Render execution result as graph using graphviz</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param graph_inline:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Inline graph into log, instead of saving as file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "There are a few arguments for controlling the Tasks library.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 621
            }
        ],
        "keywords": [
            {
                "name": "Jump To Task",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Jump directly to given task, skipping the rest of the task\nexecution. If run inside a teardown, also skips the rest of the\nteardown sequence.</p>\n</div>\n",
                "shortdoc": "Jump directly to given task, skipping the rest of the task execution. If run inside a teardown, also skips the rest of the teardown sequence.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 824
            },
            {
                "name": "Jump To Task If",
                "args": [
                    {
                        "name": "condition",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "condition"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "default",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Jump directly to given task according to the condition.</p>\n</div>\n",
                "shortdoc": "Jump directly to given task according to the condition.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 832
            },
            {
                "name": "Jump To Task If Keyword Fails",
                "args": [
                    {
                        "name": "task",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "task"
                    },
                    {
                        "name": "keyword",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Executes given keyword and jumps to given task if it fails.</p>\n</div>\n",
                "shortdoc": "Executes given keyword and jumps to given task if it fails.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 850
            },
            {
                "name": "Jump To Task If Keyword Succeeds",
                "args": [
                    {
                        "name": "task",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "task"
                    },
                    {
                        "name": "keyword",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Executes given keyword and jumps to given task if it succeeds.</p>\n</div>\n",
                "shortdoc": "Executes given keyword and jumps to given task if it succeeds.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 856
            },
            {
                "name": "Set Next Task",
                "args": [
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the next task to be executed.\nShould be a task in the same suite.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set the next task to be executed. Should be a task in the same suite.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 783
            },
            {
                "name": "Set Next Task If",
                "args": [
                    {
                        "name": "condition",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "condition"
                    },
                    {
                        "name": "name",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "name"
                    },
                    {
                        "name": "default",
                        "types": [],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "default=None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set the next task according to the condition.\nIf no default is given, does not modify execution order.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param condition:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Condition expression to evaluate</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task, if successful</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Name of next task, if unsuccessful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set the next task according to the condition. If no default is given, does not modify execution order.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 804
            },
            {
                "name": "Set Next Task If Keyword Fails",
                "args": [
                    {
                        "name": "task",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "task"
                    },
                    {
                        "name": "keyword",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Executes given keyword and sets the next task if it fails.</p>\n</div>\n",
                "shortdoc": "Executes given keyword and sets the next task if it fails.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 838
            },
            {
                "name": "Set Next Task If Keyword Succeeds",
                "args": [
                    {
                        "name": "task",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "task"
                    },
                    {
                        "name": "keyword",
                        "types": [],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "keyword"
                    },
                    {
                        "name": "args",
                        "types": [],
                        "defaultValue": null,
                        "kind": "VAR_POSITIONAL",
                        "required": false,
                        "repr": "*args"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Executes given keyword and sets the next task if it succeeds.</p>\n</div>\n",
                "shortdoc": "Executes given keyword and sets the next task if it succeeds.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Tasks.py",
                "lineno": 844
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Twitter": {
        "name": "RPA.Twitter",
        "doc": "<div class=\"document\">\n<p><cite>Twitter</cite> is a library for accessing Twitter using developer API.\nThe library extends <a class=\"reference external\" href=\"http://docs.tweepy.org/en/latest/index.html\">tweepy</a> library.</p>\n<p>Authorization credentials can be given as parameters for <tt class=\"docutils literal\">authorize</tt> keyword\nor keyword can read them in as environment variables:</p>\n<ul class=\"simple\">\n<li><cite>TWITTER_CONSUMER_KEY</cite></li>\n<li><cite>TWITTER_CONSUMER_SECRET</cite></li>\n<li><cite>TWITTER_ACCESS_TOKEN</cite></li>\n<li><cite>TWITTER_ACCESS_TOKEN_SECRET</cite></li>\n</ul>\n<p>Library usage requires Twitter developer credentials.\nThose can be requested from <a class=\"reference external\" href=\"https://developer.twitter.com/\">Twitter developer site</a></p>\n<p><strong>Examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Twitter</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get user tweets and like them</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Authorize</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">tweets</span><span class=\"p\">}=   </span><span class=\"nf\">Get User Tweets</span><span class=\"p\">   </span><span class=\"s\">username=niinisto</span><span class=\"p\">   </span><span class=\"s\">count=5</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">tweet</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">tweets</span><span class=\"p\">}\n        </span><span class=\"nf\">Like</span><span class=\"p\">   ${</span><span class=\"nv\">tweet</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Twitter</span> <span class=\"kn\">import</span> <span class=\"n\">Twitter</span>\n\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Twitter</span><span class=\"p\">()</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">authorize</span><span class=\"p\">()</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_user_tweets</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;niinisto&quot;</span><span class=\"p\">,</span> <span class=\"n\">count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">tw</span> <span class=\"ow\">in</span> <span class=\"n\">tweets</span><span class=\"p\">:</span>\n    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">like</span><span class=\"p\">(</span><span class=\"n\">tw</span><span class=\"p\">)</span>\n<span class=\"n\">tweets</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">text_search_tweets</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s2\">&quot;corona trump&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">tw</span> <span class=\"ow\">in</span> <span class=\"n\">tweets</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tw</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_user_profile</span><span class=\"p\">(</span><span class=\"s2\">&quot;niinisto&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">follow</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n<span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">tweet</span><span class=\"p\">(</span><span class=\"s2\">&quot;first tweet&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">me</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_me</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:06",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
        "lineno": 41,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Authorize",
                "args": [
                    {
                        "name": "consumer_key",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "consumer_key: str | None = None"
                    },
                    {
                        "name": "consumer_secret",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "consumer_secret: str | None = None"
                    },
                    {
                        "name": "access_token",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "access_token: str | None = None"
                    },
                    {
                        "name": "access_token_secret",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "access_token_secret: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Authorize to Twitter API</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">app consumer key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param consumer_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">app consumer secret</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">user access token</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">user access token secret</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Authorize to Twitter API",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 118
            },
            {
                "name": "Follow",
                "args": [
                    {
                        "name": "user",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Follow Twitter user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">screen name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if user was followed, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Follow Twitter user",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 321
            },
            {
                "name": "Get Me",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get Twitter profile of authenticated user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">user profile as dictionary or <cite>None</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get Twitter profile of authenticated user",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 151
            },
            {
                "name": "Get User Profile",
                "args": [
                    {
                        "name": "username",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "username: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get user's Twitter profile</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">whose profile to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">profile as dictionary</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get user's Twitter profile",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 262
            },
            {
                "name": "Get User Tweets",
                "args": [
                    {
                        "name": "username",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "username: str | None = None"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "100",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 100"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Get user tweets</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">whose tweets to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">maximum number of tweets, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of user tweets</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get user tweets",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 160
            },
            {
                "name": "Like",
                "args": [
                    {
                        "name": "tweet",
                        "types": [
                            "Tweet",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tweet: Tweet | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Like a tweet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tweet:</th><td class=\"field-body\">as a class <cite>Tweet</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if Tweet was liked, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Like a tweet",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 285
            },
            {
                "name": "Text Search Tweets",
                "args": [
                    {
                        "name": "query",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "query: str | None = None"
                    },
                    {
                        "name": "count",
                        "types": [
                            "int"
                        ],
                        "defaultValue": "100",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "count: int = 100"
                    },
                    {
                        "name": "geocode",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "geocode: str | None = None"
                    },
                    {
                        "name": "lang",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "lang: str | None = None"
                    },
                    {
                        "name": "locale",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "locale: str | None = None"
                    },
                    {
                        "name": "result_type",
                        "types": [
                            "str"
                        ],
                        "defaultValue": "mixed",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "result_type: str = mixed"
                    },
                    {
                        "name": "until",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "until: str | None = None"
                    },
                    {
                        "name": "since_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "since_id: str | None = None"
                    },
                    {
                        "name": "max_id",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "max_id: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Search tweets defined by search query</p>\n<p>Results types:</p>\n<ul class=\"simple\">\n<li>mixed : include both popular and real time results in the response</li>\n<li>recent : return only the most recent results in the response</li>\n<li>popular : return only the most popular results in the response</li>\n</ul>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\">search query string of 500 characters maximum,\nincluding operators</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">maximum number of tweets, defaults to 100</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param geocode:</th><td class=\"field-body\">tweets by users located within a given\nradius of the given latitude/longitude</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of tweets</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">language of the query you are sending</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param result_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">type of search results you would prefer to receive,\ndefault &quot;mixed&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param until:</th><td class=\"field-body\">tweets created before the given date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param since_id:</th><td class=\"field-body\">Returns only statuses with an ID greater than</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param max_id:</th><td class=\"field-body\">only statuses with an ID less than</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of matching tweets</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Search tweets defined by search query",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 193
            },
            {
                "name": "Tweet",
                "args": [
                    {
                        "name": "content",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "content: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Make a tweet with content</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">text for the status update</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Make a tweet with content",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 277
            },
            {
                "name": "Unfollow",
                "args": [
                    {
                        "name": "user",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "user: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Unfollow Twitter user</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param user:</th><td class=\"field-body\">screen name of the user</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if user was followed, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Unfollow Twitter user",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 335
            },
            {
                "name": "Unlike",
                "args": [
                    {
                        "name": "tweet",
                        "types": [
                            "Tweet",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "tweet: Tweet | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Unlike a tweet</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tweet:</th><td class=\"field-body\">as a class <cite>Tweet</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if Tweet was unliked, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Unlike a tweet",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Twitter.py",
                "lineno": 303
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    },
    "RPA.Word.Application": {
        "name": "RPA.Word.Application",
        "doc": "<div class=\"document\">\n<p><cite>Word.Application</cite> is a library for controlling a Word application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">                 </span><span class=\"nn\">RPA.Word.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">              </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">          </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Open existing file</span><span class=\"p\">\n    </span><span class=\"nf\">Open File</span><span class=\"p\">           </span><span class=\"s\">old.docx</span><span class=\"p\">\n    </span><span class=\"nf\">Write Text</span><span class=\"p\">          </span><span class=\"s\">Extra Line Text</span><span class=\"p\">\n    </span><span class=\"nf\">Write Text</span><span class=\"p\">          </span><span class=\"s\">Another Extra Line of Text</span><span class=\"p\">\n    </span><span class=\"nf\">Save Document AS</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">new.docx</span><span class=\"p\">\n    ${</span><span class=\"nv\">texts</span><span class=\"p\">}=           </span><span class=\"nf\">Get all Texts</span><span class=\"p\">\n    </span><span class=\"nf\">Close Document</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Word.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"s1\">'old.docx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_text</span><span class=\"p\">(</span><span class=\"s1\">'Extra Line Text'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">save_document_as</span><span class=\"p\">(</span><span class=\"s1\">'new.docx'</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">quit_application</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
        "version": "",
        "generated": "2021-10-02 08:06:07",
        "type": "LIBRARY",
        "scope": "GLOBAL",
        "docFormat": "HTML",
        "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
        "lineno": 20,
        "tags": [],
        "inits": [],
        "keywords": [
            {
                "name": "Close Document",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Close the active document (if open).</p>\n</div>\n",
                "shortdoc": "Close the active document (if open).",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 87
            },
            {
                "name": "Create New Document",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Create new document for Word application</p>\n</div>\n",
                "shortdoc": "Create new document for Word application",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 118
            },
            {
                "name": "Export To Pdf",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Export active document into PDF file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">PDF to export WORD into</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Export active document into PDF file.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 123
            },
            {
                "name": "Get All Texts",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Get all texts from active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">texts</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Get all texts from active document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 210
            },
            {
                "name": "Open Application",
                "args": [
                    {
                        "name": "visible",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "visible: bool = False"
                    },
                    {
                        "name": "display_alerts",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "display_alerts: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open the Word application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">show window after opening</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">show alert popups</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open the Word application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 70
            },
            {
                "name": "Open File",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "read_only",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "read_only: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Open Word document with filename.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Word document path</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Open Word document with filename.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 99
            },
            {
                "name": "Quit Application",
                "args": [
                    {
                        "name": "save_changes",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "False",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "save_changes: bool = False"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Quit the application.</p>\n</div>\n",
                "shortdoc": "Quit the application.",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 92
            },
            {
                "name": "Replace Text",
                "args": [
                    {
                        "name": "find",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "find: str"
                    },
                    {
                        "name": "replace",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "replace: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Replace text in active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param find:</th><td class=\"field-body\">text to replace</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param replace:</th><td class=\"field-body\">new text</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Replace text in active document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 145
            },
            {
                "name": "Save Document",
                "args": [],
                "doc": "<div class=\"document\">\n<p>Save active document</p>\n</div>\n",
                "shortdoc": "Save active document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 171
            },
            {
                "name": "Save Document As",
                "args": [
                    {
                        "name": "filename",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "filename: str"
                    },
                    {
                        "name": "fileformat",
                        "types": [
                            "str",
                            "None"
                        ],
                        "defaultValue": "None",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "fileformat: str | None = None"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Save document with filename and optionally with given fileformat</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">where to save document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param fileformat:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">see &#64;FILEFORMATS dictionary for possible format,\ndefaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Save document with filename and optionally with given fileformat",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 181
            },
            {
                "name": "Set Footer",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set footer for the active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">footer text to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set footer for the active document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 162
            },
            {
                "name": "Set Header",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Set header for the active document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">header text to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Set header for the active document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 153
            },
            {
                "name": "Write Text",
                "args": [
                    {
                        "name": "text",
                        "types": [
                            "str"
                        ],
                        "defaultValue": null,
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": true,
                        "repr": "text: str"
                    },
                    {
                        "name": "newline",
                        "types": [
                            "bool"
                        ],
                        "defaultValue": "True",
                        "kind": "POSITIONAL_OR_NAMED",
                        "required": false,
                        "repr": "newline: bool = True"
                    }
                ],
                "doc": "<div class=\"document\">\n<p>Writes given text at the end of the document</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">string to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newline:</th><td class=\"field-body\">write text to newline if True, default to True</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
                "shortdoc": "Writes given text at the end of the document",
                "tags": [],
                "source": "D:\\a\\rpaframework\\rpaframework\\.venv\\lib\\site-packages\\RPA\\Word\\Application.py",
                "lineno": 133
            }
        ],
        "dataTypes": {
            "enums": [],
            "typedDicts": []
        }
    }
}